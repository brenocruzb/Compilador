Helpers
tudo = [0..0xffff];
digito = ['0' .. '9'];
letra = ['a' .. 'z'] | ['A' .. 'Z'];
under = '_';
simbolo = letra | under;

hcomentario = '/''/' [tudo-10]* (10);

States
normal, comentado;


Tokens
{normal} adicao = '+';
{normal} subtracao = '-';
{normal} multiplicacao = '*';
{normal} divisao = '/';

{normal} caractere = 'caractere';
{normal} real = 'real';
{normal} inteiro = 'inteiro';
{normal} string = '''[tudo-''']*''';

{normal} pontovirgula = ';';
{normal} doispontos = ':';
{normal} maiorque = '>';
{normal} menorque = '<';
{normal} igual = '=';
{normal} maiorigual = '>=';
{normal} menorigual = '<=';
{normal} diferente = '<>';
{normal} atribuicao = '<-';

{normal} const = 'const';
{normal} programa = 'programa';
{normal} inicio = 'inicio';
{normal} fim = 'fim';
{normal} ponto = '.';
{normal} escreva = 'escreva';
{normal} leia = 'leia';

{normal} se = 'se';
{normal} entao = 'entao';
{normal} senao = 'senao';
{normal} fimse = 'fim se';
{normal} aspa = ''';
{normal} repita = 'repita';
{normal} enquanto = 'enquanto';
{normal} fimenquanto = 'fim enquanto';
{normal} para = 'para';
{normal} de = 'de';
{normal} ate = 'ate';
{normal} faca = 'faca';
{normal} fimpara = 'fim para';
{normal} passo = 'passo';
{normal} avalie = 'avalie';
{normal} caso = 'caso';
{normal} fimavalie = 'fim avalie';

{normal} abrecolchete = '[';
{normal} fecharcolchete = ']';

{normal} e = 'e';
{normal} ou = 'ou';
{normal} xor = 'xor';
{normal} nao = 'nao';
{normal} virgula = ',';
{normal} abreparenteses = '(';
{normal} fechaparenteses = ')';
{normal} numero = digito+;
{normal} numero_real = digito+'.'digito+;
{normal} identificador = simbolo (simbolo|digito)*;

{normal} comentarioemlinha = hcomentario;
{normal} lf = 10;
{normal} espaco = ' '+ | '	'+;
{normal} cr = 13;

{normal->comentado, comentado} comentado = '/*';
{comentado} comentadofinal = '*/';
{comentado} corpo = [tudo -['*' + '/']]*;
{comentado} estrela = '*';
{comentado} barra = '/';

Ignored Tokens
lf,
espaco,
comentarioemlinha,
cr,
comentado;

Productions 

total = 
programa identificador pontovirgula
inicio
super_declaracao_variavel
corpo_programa
fim ponto;

super_declaracao_variavel = super_declaracao_variavel declaracao_variavel | {vazio};
declaracao_variavel = {conjunto} tipo doispontos declaracao_variavel_virgula variaveld pontovirgula |{dconstante}const identificador valor pontovirgula |tipo doispontos variaveld pontovirgula;
declaracao_variavel_virgula = {encadeamento}declaracao_variavel_virgula variaveld virgula| variaveld virgula;
variaveld = identificador | {vetor}identificador abrecolchete numero fecharcolchete;
corpo_programa = comandos;
tipo = {c} caractere | {i} inteiro | real;
valor = {str} string | {num} numero | numero_real; 

exp = exp soma termo |{term} termo;
soma = adicao | {sub} subtracao;
termo = termo mult fator | {fat} fator;
mult = multiplicacao | {div} divisao;
fator = abreparenteses exp fechaparenteses | {num} numero | {real} numero_real | {variavel} var;

parabool = lcomp | {menorig} menorigual | {maiorig} maiorigual | {menor} menorque |{maior} maiorque ;
lcomp = igual |{nao} diferente;
lsoma = ou;
lmult = e | {xor}xor;

exp_logica = lexp;
lexp = {igual} lexp lcomp lini | lini; 
lini = {ou} lini lsoma ltermo | ltermo;
ltermo = {enot} ltermo lmult lfator | {simples} lfator | ltermo lmult nao lfator |{negado} nao lfator;
lfator = {parenteses} abreparenteses lexp fechaparenteses |{exp} exp parabool outraexp;// | var; // | taut;  
outraexp = exp;

comando_se = se abreparenteses exp_logica fechaparenteses entao comandos fimse| 
     {se_nao} se abreparenteses exp_logica fechaparenteses entao comandos comando_senao;
comando_senao = senao comandos fimse;  
     
var = identificador | {vetor} identificador abrecolchete exp fecharcolchete;
comandos = {leia} comandos comando_leia pontovirgula |
		  {repita} comandos comando_repita pontovirgula | 
		  {enquanto} comandos comando_enquanto pontovirgula |
		  {avaliar} comandos comando_avalie pontovirgula |
		  {escrita} comandos comando_escrita pontovirgula |
		  {se} comandos comando_se pontovirgula|
		  {atribuida} comandos comando_atribuicao pontovirgula |
		  {para} comandos comando_para pontovirgula |
		  {base} comando;
comando = {leia} comando_leia pontovirgula |
		  {repita} comando_repita pontovirgula | 
		  {enquanto} comando_enquanto pontovirgula |
		  {avaliar} comando_avalie pontovirgula |
		  {escrita} comando_escrita pontovirgula |
		  {se} comando_se pontovirgula|
		  {atribuida} comando_atribuicao pontovirgula |
		  {para} comando_para pontovirgula;

comando_repita = repita comandos ate abreparenteses exp_logica fechaparenteses; 
comando_enquanto = enquanto abreparenteses exp_logica fechaparenteses faca comandos fimenquanto;
casos = casos caso valor doispontos comandos | {vazio};
avsenao = senao doispontos comandos | {vazio};
comando_avalie = avalie abreparenteses exp fechaparenteses caso valor doispontos comandos casos avsenao fimavalie;
paratipos = numero | {var}var;
aparatipos = paratipos;
bparatipos = paratipos;
comando_para = para var de paratipos ate aparatipos faca comandos fimpara|
	    {passo}para var de paratipos passo aparatipos ate bparatipos faca comandos fimpara;	   
comando_escrita = escreva abreparenteses exp fechaparenteses |
            {bool}escreva abreparenteses exp_logica fechaparenteses | 
	     {str}escreva abreparenteses string fechaparenteses;
comando_leia = leia abreparenteses var fechaparenteses;
comando_atribuicao = var atribuicao exp;
     