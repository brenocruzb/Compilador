/* This file was generated by SableCC (http://www.sablecc.org/). */

package analysis;

import node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseATotal(ATotal node);
    void caseASuperDeclaracaoVariavel(ASuperDeclaracaoVariavel node);
    void caseAVazioSuperDeclaracaoVariavel(AVazioSuperDeclaracaoVariavel node);
    void caseAConjuntoDeclaracaoVariavel(AConjuntoDeclaracaoVariavel node);
    void caseADconstanteDeclaracaoVariavel(ADconstanteDeclaracaoVariavel node);
    void caseADeclaracaoVariavel(ADeclaracaoVariavel node);
    void caseAEncadeamentoDeclaracaoVariavelVirgula(AEncadeamentoDeclaracaoVariavelVirgula node);
    void caseADeclaracaoVariavelVirgula(ADeclaracaoVariavelVirgula node);
    void caseAVariaveld(AVariaveld node);
    void caseAVetorVariaveld(AVetorVariaveld node);
    void caseACorpoPrograma(ACorpoPrograma node);
    void caseACTipo(ACTipo node);
    void caseAITipo(AITipo node);
    void caseATipo(ATipo node);
    void caseAStrValor(AStrValor node);
    void caseANumValor(ANumValor node);
    void caseAValor(AValor node);
    void caseAExp(AExp node);
    void caseATermExp(ATermExp node);
    void caseASoma(ASoma node);
    void caseASubSoma(ASubSoma node);
    void caseATermo(ATermo node);
    void caseAFatTermo(AFatTermo node);
    void caseAMult(AMult node);
    void caseADivMult(ADivMult node);
    void caseAFator(AFator node);
    void caseANumFator(ANumFator node);
    void caseARealFator(ARealFator node);
    void caseAVariavelFator(AVariavelFator node);
    void caseAParabool(AParabool node);
    void caseAMenorigParabool(AMenorigParabool node);
    void caseAMaiorigParabool(AMaiorigParabool node);
    void caseAMenorParabool(AMenorParabool node);
    void caseAMaiorParabool(AMaiorParabool node);
    void caseALcomp(ALcomp node);
    void caseANaoLcomp(ANaoLcomp node);
    void caseALsoma(ALsoma node);
    void caseALmult(ALmult node);
    void caseAXorLmult(AXorLmult node);
    void caseAExpLogica(AExpLogica node);
    void caseAIgualLexp(AIgualLexp node);
    void caseALexp(ALexp node);
    void caseAOuLini(AOuLini node);
    void caseALini(ALini node);
    void caseAEnotLtermo(AEnotLtermo node);
    void caseASimplesLtermo(ASimplesLtermo node);
    void caseALtermo(ALtermo node);
    void caseANegadoLtermo(ANegadoLtermo node);
    void caseAParentesesLfator(AParentesesLfator node);
    void caseAExpLfator(AExpLfator node);
    void caseAOutraexp(AOutraexp node);
    void caseAComandoSe(AComandoSe node);
    void caseASeNaoComandoSe(ASeNaoComandoSe node);
    void caseAComandoSenao(AComandoSenao node);
    void caseAVar(AVar node);
    void caseAVetorVar(AVetorVar node);
    void caseALeiaComandos(ALeiaComandos node);
    void caseARepitaComandos(ARepitaComandos node);
    void caseAEnquantoComandos(AEnquantoComandos node);
    void caseAAvaliarComandos(AAvaliarComandos node);
    void caseAEscritaComandos(AEscritaComandos node);
    void caseASeComandos(ASeComandos node);
    void caseAAtribuidaComandos(AAtribuidaComandos node);
    void caseAParaComandos(AParaComandos node);
    void caseABaseComandos(ABaseComandos node);
    void caseALeiaComando(ALeiaComando node);
    void caseARepitaComando(ARepitaComando node);
    void caseAEnquantoComando(AEnquantoComando node);
    void caseAAvaliarComando(AAvaliarComando node);
    void caseAEscritaComando(AEscritaComando node);
    void caseASeComando(ASeComando node);
    void caseAAtribuidaComando(AAtribuidaComando node);
    void caseAParaComando(AParaComando node);
    void caseAComandoRepita(AComandoRepita node);
    void caseAComandoEnquanto(AComandoEnquanto node);
    void caseACasos(ACasos node);
    void caseAVazioCasos(AVazioCasos node);
    void caseAAvsenao(AAvsenao node);
    void caseAVazioAvsenao(AVazioAvsenao node);
    void caseAComandoAvalie(AComandoAvalie node);
    void caseAParatipos(AParatipos node);
    void caseAVarParatipos(AVarParatipos node);
    void caseAAparatipos(AAparatipos node);
    void caseABparatipos(ABparatipos node);
    void caseAComandoPara(AComandoPara node);
    void caseAPassoComandoPara(APassoComandoPara node);
    void caseAComandoEscrita(AComandoEscrita node);
    void caseABoolComandoEscrita(ABoolComandoEscrita node);
    void caseAStrComandoEscrita(AStrComandoEscrita node);
    void caseAComandoLeia(AComandoLeia node);
    void caseAComandoAtribuicao(AComandoAtribuicao node);

    void caseTAdicao(TAdicao node);
    void caseTSubtracao(TSubtracao node);
    void caseTMultiplicacao(TMultiplicacao node);
    void caseTDivisao(TDivisao node);
    void caseTCaractere(TCaractere node);
    void caseTReal(TReal node);
    void caseTInteiro(TInteiro node);
    void caseTString(TString node);
    void caseTPontovirgula(TPontovirgula node);
    void caseTDoispontos(TDoispontos node);
    void caseTMaiorque(TMaiorque node);
    void caseTMenorque(TMenorque node);
    void caseTIgual(TIgual node);
    void caseTMaiorigual(TMaiorigual node);
    void caseTMenorigual(TMenorigual node);
    void caseTDiferente(TDiferente node);
    void caseTAtribuicao(TAtribuicao node);
    void caseTConst(TConst node);
    void caseTPrograma(TPrograma node);
    void caseTInicio(TInicio node);
    void caseTFim(TFim node);
    void caseTPonto(TPonto node);
    void caseTEscreva(TEscreva node);
    void caseTLeia(TLeia node);
    void caseTSe(TSe node);
    void caseTEntao(TEntao node);
    void caseTSenao(TSenao node);
    void caseTFimse(TFimse node);
    void caseTAspa(TAspa node);
    void caseTRepita(TRepita node);
    void caseTEnquanto(TEnquanto node);
    void caseTFimenquanto(TFimenquanto node);
    void caseTPara(TPara node);
    void caseTDe(TDe node);
    void caseTAte(TAte node);
    void caseTFaca(TFaca node);
    void caseTFimpara(TFimpara node);
    void caseTPasso(TPasso node);
    void caseTAvalie(TAvalie node);
    void caseTCaso(TCaso node);
    void caseTFimavalie(TFimavalie node);
    void caseTAbrecolchete(TAbrecolchete node);
    void caseTFecharcolchete(TFecharcolchete node);
    void caseTE(TE node);
    void caseTOu(TOu node);
    void caseTXor(TXor node);
    void caseTNao(TNao node);
    void caseTVirgula(TVirgula node);
    void caseTAbreparenteses(TAbreparenteses node);
    void caseTFechaparenteses(TFechaparenteses node);
    void caseTNumero(TNumero node);
    void caseTNumeroReal(TNumeroReal node);
    void caseTIdentificador(TIdentificador node);
    void caseTComentarioemlinha(TComentarioemlinha node);
    void caseTLf(TLf node);
    void caseTEspaco(TEspaco node);
    void caseTCr(TCr node);
    void caseTComentado(TComentado node);
    void caseTComentadofinal(TComentadofinal node);
    void caseTCorpo(TCorpo node);
    void caseTEstrela(TEstrela node);
    void caseTBarra(TBarra node);
    void caseEOF(EOF node);
    void caseInvalidToken(InvalidToken node);
}
