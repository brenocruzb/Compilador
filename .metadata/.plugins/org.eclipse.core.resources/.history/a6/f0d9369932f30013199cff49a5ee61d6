/* This file was generated by SableCC (http://www.sablecc.org/). */

package analysis;

import java.util.*;
import node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPTotal().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inATotal(ATotal node)
    {
        defaultIn(node);
    }

    public void outATotal(ATotal node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATotal(ATotal node)
    {
        inATotal(node);
        if(node.getPrograma() != null)
        {
            node.getPrograma().apply(this);
        }
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        if(node.getPontovirgula() != null)
        {
            node.getPontovirgula().apply(this);
        }
        if(node.getDeclaracaoVariavel() != null)
        {
            node.getDeclaracaoVariavel().apply(this);
        }
        if(node.getInicio() != null)
        {
            node.getInicio().apply(this);
        }
        if(node.getFim() != null)
        {
            node.getFim().apply(this);
        }
        if(node.getPonto() != null)
        {
            node.getPonto().apply(this);
        }
        outATotal(node);
    }

    public void inADeclaracaoVariavel(ADeclaracaoVariavel node)
    {
        defaultIn(node);
    }

    public void outADeclaracaoVariavel(ADeclaracaoVariavel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclaracaoVariavel(ADeclaracaoVariavel node)
    {
        inADeclaracaoVariavel(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getDeclaracaoVariavelVirgula() != null)
        {
            node.getDeclaracaoVariavelVirgula().apply(this);
        }
        if(node.getVariavel() != null)
        {
            node.getVariavel().apply(this);
        }
        if(node.getPontovirgula() != null)
        {
            node.getPontovirgula().apply(this);
        }
        outADeclaracaoVariavel(node);
    }

    public void inANonEmptyDeclaracaoVariavel(ANonEmptyDeclaracaoVariavel node)
    {
        defaultIn(node);
    }

    public void outANonEmptyDeclaracaoVariavel(ANonEmptyDeclaracaoVariavel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANonEmptyDeclaracaoVariavel(ANonEmptyDeclaracaoVariavel node)
    {
        inANonEmptyDeclaracaoVariavel(node);
        if(node.getVariavel() != null)
        {
            node.getVariavel().apply(this);
        }
        if(node.getPontovirgula() != null)
        {
            node.getPontovirgula().apply(this);
        }
        outANonEmptyDeclaracaoVariavel(node);
    }

    public void inAEmptyDeclaracaoVariavel(AEmptyDeclaracaoVariavel node)
    {
        defaultIn(node);
    }

    public void outAEmptyDeclaracaoVariavel(AEmptyDeclaracaoVariavel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmptyDeclaracaoVariavel(AEmptyDeclaracaoVariavel node)
    {
        inAEmptyDeclaracaoVariavel(node);
        outAEmptyDeclaracaoVariavel(node);
    }

    public void inADeclaracaoVariavelVirgula(ADeclaracaoVariavelVirgula node)
    {
        defaultIn(node);
    }

    public void outADeclaracaoVariavelVirgula(ADeclaracaoVariavelVirgula node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclaracaoVariavelVirgula(ADeclaracaoVariavelVirgula node)
    {
        inADeclaracaoVariavelVirgula(node);
        if(node.getVariavel() != null)
        {
            node.getVariavel().apply(this);
        }
        if(node.getVirgula() != null)
        {
            node.getVirgula().apply(this);
        }
        outADeclaracaoVariavelVirgula(node);
    }

    public void inAVariavel(AVariavel node)
    {
        defaultIn(node);
    }

    public void outAVariavel(AVariavel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariavel(AVariavel node)
    {
        inAVariavel(node);
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        outAVariavel(node);
    }

    public void inAArrayVariavel(AArrayVariavel node)
    {
        defaultIn(node);
    }

    public void outAArrayVariavel(AArrayVariavel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayVariavel(AArrayVariavel node)
    {
        inAArrayVariavel(node);
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        if(node.getAbrecolchete() != null)
        {
            node.getAbrecolchete().apply(this);
        }
        if(node.getNumero() != null)
        {
            node.getNumero().apply(this);
        }
        if(node.getFecharcolchete() != null)
        {
            node.getFecharcolchete().apply(this);
        }
        outAArrayVariavel(node);
    }

    public void inAConstrucao(AConstrucao node)
    {
        defaultIn(node);
    }

    public void outAConstrucao(AConstrucao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConstrucao(AConstrucao node)
    {
        inAConstrucao(node);
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        if(node.getAtribuicao() != null)
        {
            node.getAtribuicao().apply(this);
        }
        if(node.getExpressao() != null)
        {
            node.getExpressao().apply(this);
        }
        if(node.getPontovirgula() != null)
        {
            node.getPontovirgula().apply(this);
        }
        outAConstrucao(node);
    }

    public void inAExpressao(AExpressao node)
    {
        defaultIn(node);
    }

    public void outAExpressao(AExpressao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressao(AExpressao node)
    {
        inAExpressao(node);
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        outAExpressao(node);
    }
}
