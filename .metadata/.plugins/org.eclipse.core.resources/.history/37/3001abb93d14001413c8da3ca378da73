/* This file was generated by SableCC (http://www.sablecc.org/). */

package parser;

import lexer.*;
import node.*;
import analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    @SuppressWarnings({"unchecked","unused"})
    private void push(int numstate, ArrayList<Object> listNode) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PTotal node1 = (PTotal) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AAtotal1Total */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list);
            }
            break;
            case 1: /* reduce AAtotal2Total */
            {
                ArrayList<Object> list = new1();
                push(goTo(0), list);
            }
            break;
            case 2: /* reduce AAtotal3Total */
            {
                ArrayList<Object> list = new2();
                push(goTo(0), list);
            }
            break;
            case 3: /* reduce AAtotal4Total */
            {
                ArrayList<Object> list = new3();
                push(goTo(0), list);
            }
            break;
            case 4: /* reduce AAvariaveldeclaracaovariavel1DeclaracaoVariavel */
            {
                ArrayList<Object> list = new4();
                push(goTo(1), list);
            }
            break;
            case 5: /* reduce AAvariaveldeclaracaovariavel2DeclaracaoVariavel */
            {
                ArrayList<Object> list = new5();
                push(goTo(1), list);
            }
            break;
            case 6: /* reduce ADconstanteDeclaracaoVariavel */
            {
                ArrayList<Object> list = new6();
                push(goTo(1), list);
            }
            break;
            case 7: /* reduce ADeclaracaoVariavelVirgula */
            {
                ArrayList<Object> list = new7();
                push(goTo(2), list);
            }
            break;
            case 8: /* reduce ASimplesVariaveld */
            {
                ArrayList<Object> list = new8();
                push(goTo(3), list);
            }
            break;
            case 9: /* reduce AVetorVariaveld */
            {
                ArrayList<Object> list = new9();
                push(goTo(3), list);
            }
            break;
            case 10: /* reduce ACaractereTipo */
            {
                ArrayList<Object> list = new10();
                push(goTo(4), list);
            }
            break;
            case 11: /* reduce AInteiroTipo */
            {
                ArrayList<Object> list = new11();
                push(goTo(4), list);
            }
            break;
            case 12: /* reduce ARealTipo */
            {
                ArrayList<Object> list = new12();
                push(goTo(4), list);
            }
            break;
            case 13: /* reduce AStringValor */
            {
                ArrayList<Object> list = new13();
                push(goTo(5), list);
            }
            break;
            case 14: /* reduce ANumeroValor */
            {
                ArrayList<Object> list = new14();
                push(goTo(5), list);
            }
            break;
            case 15: /* reduce ARealValor */
            {
                ArrayList<Object> list = new15();
                push(goTo(5), list);
            }
            break;
            case 16: /* reduce ANumericoExpr */
            {
                ArrayList<Object> list = new16();
                push(goTo(6), list);
            }
            break;
            case 17: /* reduce ABaixaExpnum */
            {
                ArrayList<Object> list = new17();
                push(goTo(7), list);
            }
            break;
            case 18: /* reduce ATermoExpnum */
            {
                ArrayList<Object> list = new18();
                push(goTo(7), list);
            }
            break;
            case 19: /* reduce AAddSoma */
            {
                ArrayList<Object> list = new19();
                push(goTo(8), list);
            }
            break;
            case 20: /* reduce ASubSoma */
            {
                ArrayList<Object> list = new20();
                push(goTo(8), list);
            }
            break;
            case 21: /* reduce AAltaTermo */
            {
                ArrayList<Object> list = new21();
                push(goTo(9), list);
            }
            break;
            case 22: /* reduce AFatorTermo */
            {
                ArrayList<Object> list = new22();
                push(goTo(9), list);
            }
            break;
            case 23: /* reduce AMultMult */
            {
                ArrayList<Object> list = new23();
                push(goTo(10), list);
            }
            break;
            case 24: /* reduce ADivMult */
            {
                ArrayList<Object> list = new24();
                push(goTo(10), list);
            }
            break;
            case 25: /* reduce AInternoFator */
            {
                ArrayList<Object> list = new25();
                push(goTo(11), list);
            }
            break;
            case 26: /* reduce ANegativoFator */
            {
                ArrayList<Object> list = new26();
                push(goTo(11), list);
            }
            break;
            case 27: /* reduce ANumeroFator */
            {
                ArrayList<Object> list = new27();
                push(goTo(11), list);
            }
            break;
            case 28: /* reduce ARealFator */
            {
                ArrayList<Object> list = new28();
                push(goTo(11), list);
            }
            break;
            case 29: /* reduce AVariavelFator */
            {
                ArrayList<Object> list = new29();
                push(goTo(11), list);
            }
            break;
            case 30: /* reduce AMenorigParabool */
            {
                ArrayList<Object> list = new30();
                push(goTo(12), list);
            }
            break;
            case 31: /* reduce AMaiorigParabool */
            {
                ArrayList<Object> list = new31();
                push(goTo(12), list);
            }
            break;
            case 32: /* reduce AMenorParabool */
            {
                ArrayList<Object> list = new32();
                push(goTo(12), list);
            }
            break;
            case 33: /* reduce AMaiorParabool */
            {
                ArrayList<Object> list = new33();
                push(goTo(12), list);
            }
            break;
            case 34: /* reduce AIgualLcomp */
            {
                ArrayList<Object> list = new34();
                push(goTo(13), list);
            }
            break;
            case 35: /* reduce ADiffLcomp */
            {
                ArrayList<Object> list = new35();
                push(goTo(13), list);
            }
            break;
            case 36: /* reduce ALsoma */
            {
                ArrayList<Object> list = new36();
                push(goTo(14), list);
            }
            break;
            case 37: /* reduce ALmult */
            {
                ArrayList<Object> list = new37();
                push(goTo(15), list);
            }
            break;
            case 38: /* reduce ALxor */
            {
                ArrayList<Object> list = new38();
                push(goTo(16), list);
            }
            break;
            case 39: /* reduce AConjuntoExpLogica */
            {
                ArrayList<Object> list = new39();
                push(goTo(17), list);
            }
            break;
            case 40: /* reduce ADiretoExpLogica */
            {
                ArrayList<Object> list = new40();
                push(goTo(17), list);
            }
            break;
            case 41: /* reduce ARnaoigualfator */
            {
                ArrayList<Object> list = new41();
                push(goTo(18), list);
            }
            break;
            case 42: /* reduce AParentesesNaoigualfator */
            {
                ArrayList<Object> list = new42();
                push(goTo(19), list);
            }
            break;
            case 43: /* reduce AExpNaoigualfator */
            {
                ArrayList<Object> list = new43();
                push(goTo(19), list);
            }
            break;
            case 44: /* reduce ANaoNaoigualfator */
            {
                ArrayList<Object> list = new44();
                push(goTo(19), list);
            }
            break;
            case 45: /* reduce ACadeiaLinicio */
            {
                ArrayList<Object> list = new45();
                push(goTo(20), list);
            }
            break;
            case 46: /* reduce ASimplesLinicio */
            {
                ArrayList<Object> list = new46();
                push(goTo(20), list);
            }
            break;
            case 47: /* reduce ACadeiaLmeio */
            {
                ArrayList<Object> list = new47();
                push(goTo(21), list);
            }
            break;
            case 48: /* reduce ASimplesLmeio */
            {
                ArrayList<Object> list = new48();
                push(goTo(21), list);
            }
            break;
            case 49: /* reduce ACadeiaLtermo */
            {
                ArrayList<Object> list = new49();
                push(goTo(22), list);
            }
            break;
            case 50: /* reduce ASimplesLtermo */
            {
                ArrayList<Object> list = new50();
                push(goTo(22), list);
            }
            break;
            case 51: /* reduce AParentesesLfator */
            {
                ArrayList<Object> list = new51();
                push(goTo(23), list);
            }
            break;
            case 52: /* reduce AExpLfator */
            {
                ArrayList<Object> list = new52();
                push(goTo(23), list);
            }
            break;
            case 53: /* reduce AExpigLfator */
            {
                ArrayList<Object> list = new53();
                push(goTo(23), list);
            }
            break;
            case 54: /* reduce ANaoLfator */
            {
                ArrayList<Object> list = new54();
                push(goTo(23), list);
            }
            break;
            case 55: /* reduce AOutraexp */
            {
                ArrayList<Object> list = new55();
                push(goTo(24), list);
            }
            break;
            case 56: /* reduce AComandoSe */
            {
                ArrayList<Object> list = new56();
                push(goTo(25), list);
            }
            break;
            case 57: /* reduce ASeNaoComandoSe */
            {
                ArrayList<Object> list = new57();
                push(goTo(25), list);
            }
            break;
            case 58: /* reduce AIdVar */
            {
                ArrayList<Object> list = new58();
                push(goTo(26), list);
            }
            break;
            case 59: /* reduce AVetorVar */
            {
                ArrayList<Object> list = new59();
                push(goTo(26), list);
            }
            break;
            case 60: /* reduce ALeiaComando */
            {
                ArrayList<Object> list = new60();
                push(goTo(27), list);
            }
            break;
            case 61: /* reduce ARepitaComando */
            {
                ArrayList<Object> list = new61();
                push(goTo(27), list);
            }
            break;
            case 62: /* reduce AEnquantoComando */
            {
                ArrayList<Object> list = new62();
                push(goTo(27), list);
            }
            break;
            case 63: /* reduce AAvaliarComando */
            {
                ArrayList<Object> list = new63();
                push(goTo(27), list);
            }
            break;
            case 64: /* reduce AEscritaComando */
            {
                ArrayList<Object> list = new64();
                push(goTo(27), list);
            }
            break;
            case 65: /* reduce ASeComando */
            {
                ArrayList<Object> list = new65();
                push(goTo(27), list);
            }
            break;
            case 66: /* reduce AAtribuicaoComando */
            {
                ArrayList<Object> list = new66();
                push(goTo(27), list);
            }
            break;
            case 67: /* reduce AParaComando */
            {
                ArrayList<Object> list = new67();
                push(goTo(27), list);
            }
            break;
            case 68: /* reduce AComandoRepita */
            {
                ArrayList<Object> list = new68();
                push(goTo(28), list);
            }
            break;
            case 69: /* reduce AComandoEnquanto */
            {
                ArrayList<Object> list = new69();
                push(goTo(29), list);
            }
            break;
            case 70: /* reduce ACasos */
            {
                ArrayList<Object> list = new70();
                push(goTo(30), list);
            }
            break;
            case 71: /* reduce ASenaoAvsenao */
            {
                ArrayList<Object> list = new71();
                push(goTo(31), list);
            }
            break;
            case 72: /* reduce AVazioAvsenao */
            {
                ArrayList<Object> list = new72();
                push(goTo(31), list);
            }
            break;
            case 73: /* reduce AComandoAvalie */
            {
                ArrayList<Object> list = new73();
                push(goTo(32), list);
            }
            break;
            case 74: /* reduce ANumParatipos */
            {
                ArrayList<Object> list = new74();
                push(goTo(33), list);
            }
            break;
            case 75: /* reduce AVarParatipos */
            {
                ArrayList<Object> list = new75();
                push(goTo(33), list);
            }
            break;
            case 76: /* reduce ASempassoComandoPara */
            {
                ArrayList<Object> list = new76();
                push(goTo(34), list);
            }
            break;
            case 77: /* reduce ACompassoComandoPara */
            {
                ArrayList<Object> list = new77();
                push(goTo(34), list);
            }
            break;
            case 78: /* reduce ANormalComandoEscrita */
            {
                ArrayList<Object> list = new78();
                push(goTo(35), list);
            }
            break;
            case 79: /* reduce AStrComandoEscrita */
            {
                ArrayList<Object> list = new79();
                push(goTo(35), list);
            }
            break;
            case 80: /* reduce AComandoLeia */
            {
                ArrayList<Object> list = new80();
                push(goTo(36), list);
            }
            break;
            case 81: /* reduce AComandoAtribuicao */
            {
                ArrayList<Object> list = new81();
                push(goTo(37), list);
            }
            break;
            case 82: /* reduce ATerminal$DeclaracaoVariavel */
            {
                ArrayList<Object> list = new82();
                push(goTo(38), list);
            }
            break;
            case 83: /* reduce ANonTerminal$DeclaracaoVariavel */
            {
                ArrayList<Object> list = new83();
                push(goTo(38), list);
            }
            break;
            case 84: /* reduce ATerminal$Comando */
            {
                ArrayList<Object> list = new84();
                push(goTo(39), list);
            }
            break;
            case 85: /* reduce ANonTerminal$Comando */
            {
                ArrayList<Object> list = new85();
                push(goTo(39), list);
            }
            break;
            case 86: /* reduce ATerminal$DeclaracaoVariavelVirgula */
            {
                ArrayList<Object> list = new86();
                push(goTo(40), list);
            }
            break;
            case 87: /* reduce ANonTerminal$DeclaracaoVariavelVirgula */
            {
                ArrayList<Object> list = new87();
                push(goTo(40), list);
            }
            break;
            case 88: /* reduce ATerminal$Casos */
            {
                ArrayList<Object> list = new88();
                push(goTo(41), list);
            }
            break;
            case 89: /* reduce ANonTerminal$Casos */
            {
                ArrayList<Object> list = new89();
                push(goTo(41), list);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AAtotal1Total */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTotal ptotalNode1;
        {
            // Block
        TIdentificador tidentificadorNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PExpr pexprNode4;
        tidentificadorNode2 = (TIdentificador)nodeArrayList2.get(0);
        {
            // Block
        }
        pexprNode4 = (PExpr)nodeArrayList5.get(0);

        ptotalNode1 = new ATotal(tidentificadorNode2, listNode3, pexprNode4);
        }
	nodeList.add(ptotalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AAtotal2Total */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTotal ptotalNode1;
        {
            // Block
        TIdentificador tidentificadorNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        PExpr pexprNode5;
        tidentificadorNode2 = (TIdentificador)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList5.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        pexprNode5 = (PExpr)nodeArrayList6.get(0);

        ptotalNode1 = new ATotal(tidentificadorNode2, listNode4, pexprNode5);
        }
	nodeList.add(ptotalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AAtotal3Total */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTotal ptotalNode1;
        {
            // Block
        TIdentificador tidentificadorNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PExpr pexprNode4;
        tidentificadorNode2 = (TIdentificador)nodeArrayList2.get(0);
        {
            // Block
        }
        pexprNode4 = (PExpr)nodeArrayList5.get(0);

        ptotalNode1 = new ATotal(tidentificadorNode2, listNode3, pexprNode4);
        }
	nodeList.add(ptotalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AAtotal4Total */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTotal ptotalNode1;
        {
            // Block
        TIdentificador tidentificadorNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        PExpr pexprNode5;
        tidentificadorNode2 = (TIdentificador)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList5.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        pexprNode5 = (PExpr)nodeArrayList6.get(0);

        ptotalNode1 = new ATotal(tidentificadorNode2, listNode4, pexprNode5);
        }
	nodeList.add(ptotalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AAvariaveldeclaracaovariavel1DeclaracaoVariavel */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaracaoVariavel pdeclaracaovariavelNode1;
        {
            // Block
        PTipo ptipoNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PVariaveld pvariaveldNode4;
        ptipoNode2 = (PTipo)nodeArrayList1.get(0);
        {
            // Block
        }
        pvariaveldNode4 = (PVariaveld)nodeArrayList3.get(0);

        pdeclaracaovariavelNode1 = new AVariavelDeclaracaoVariavel(ptipoNode2, listNode3, pvariaveldNode4);
        }
	nodeList.add(pdeclaracaovariavelNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AAvariaveldeclaracaovariavel2DeclaracaoVariavel */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaracaoVariavel pdeclaracaovariavelNode1;
        {
            // Block
        PTipo ptipoNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        PVariaveld pvariaveldNode5;
        ptipoNode2 = (PTipo)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList3.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        pvariaveldNode5 = (PVariaveld)nodeArrayList4.get(0);

        pdeclaracaovariavelNode1 = new AVariavelDeclaracaoVariavel(ptipoNode2, listNode4, pvariaveldNode5);
        }
	nodeList.add(pdeclaracaovariavelNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce ADconstanteDeclaracaoVariavel */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaracaoVariavel pdeclaracaovariavelNode1;
        {
            // Block
        TIdentificador tidentificadorNode2;
        PValor pvalorNode3;
        tidentificadorNode2 = (TIdentificador)nodeArrayList2.get(0);
        pvalorNode3 = (PValor)nodeArrayList3.get(0);

        pdeclaracaovariavelNode1 = new ADconstanteDeclaracaoVariavel(tidentificadorNode2, pvalorNode3);
        }
	nodeList.add(pdeclaracaovariavelNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce ADeclaracaoVariavelVirgula */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVariaveld pvariaveldNode1;
        pvariaveldNode1 = (PVariaveld)nodeArrayList1.get(0);
	nodeList.add(pvariaveldNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce ASimplesVariaveld */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVariaveld pvariaveldNode1;
        {
            // Block
        TIdentificador tidentificadorNode2;
        tidentificadorNode2 = (TIdentificador)nodeArrayList1.get(0);

        pvariaveldNode1 = new ASimplesVariaveld(tidentificadorNode2);
        }
	nodeList.add(pvariaveldNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AVetorVariaveld */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVariaveld pvariaveldNode1;
        {
            // Block
        TIdentificador tidentificadorNode2;
        TNumero tnumeroNode3;
        tidentificadorNode2 = (TIdentificador)nodeArrayList1.get(0);
        tnumeroNode3 = (TNumero)nodeArrayList3.get(0);

        pvariaveldNode1 = new AVetorVariaveld(tidentificadorNode2, tnumeroNode3);
        }
	nodeList.add(pvariaveldNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce ACaractereTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipo ptipoNode1;
        {
            // Block
        TCaractere tcaractereNode2;
        tcaractereNode2 = (TCaractere)nodeArrayList1.get(0);

        ptipoNode1 = new ACaractereTipo(tcaractereNode2);
        }
	nodeList.add(ptipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce AInteiroTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipo ptipoNode1;
        {
            // Block
        TInteiro tinteiroNode2;
        tinteiroNode2 = (TInteiro)nodeArrayList1.get(0);

        ptipoNode1 = new AInteiroTipo(tinteiroNode2);
        }
	nodeList.add(ptipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce ARealTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipo ptipoNode1;
        {
            // Block
        TReal trealNode2;
        trealNode2 = (TReal)nodeArrayList1.get(0);

        ptipoNode1 = new ARealTipo(trealNode2);
        }
	nodeList.add(ptipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce AStringValor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValor pvalorNode1;
        {
            // Block
        TString tstringNode2;
        tstringNode2 = (TString)nodeArrayList1.get(0);

        pvalorNode1 = new AStringValor(tstringNode2);
        }
	nodeList.add(pvalorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce ANumeroValor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValor pvalorNode1;
        {
            // Block
        TNumero tnumeroNode2;
        tnumeroNode2 = (TNumero)nodeArrayList1.get(0);

        pvalorNode1 = new ANumeroValor(tnumeroNode2);
        }
	nodeList.add(pvalorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce ARealValor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValor pvalorNode1;
        {
            // Block
        TNumeroReal tnumerorealNode2;
        tnumerorealNode2 = (TNumeroReal)nodeArrayList1.get(0);

        pvalorNode1 = new ARealValor(tnumerorealNode2);
        }
	nodeList.add(pvalorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce ANumericoExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList1.get(0);
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce ABaixaExpnum */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        PSoma psomaNode3;
        PExpr pexprNode4;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        psomaNode3 = (PSoma)nodeArrayList2.get(0);
        pexprNode4 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new ASomaExpr(pexprNode2, psomaNode3, pexprNode4);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce ATermoExpnum */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList1.get(0);
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce AAddSoma */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSoma psomaNode1;
        {
            // Block
        TAdicao tadicaoNode2;
        tadicaoNode2 = (TAdicao)nodeArrayList1.get(0);

        psomaNode1 = new AAddSoma(tadicaoNode2);
        }
	nodeList.add(psomaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce ASubSoma */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSoma psomaNode1;
        {
            // Block
        TSubtracao tsubtracaoNode2;
        tsubtracaoNode2 = (TSubtracao)nodeArrayList1.get(0);

        psomaNode1 = new ASubSoma(tsubtracaoNode2);
        }
	nodeList.add(psomaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AAltaTermo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        PMult pmultNode3;
        PExpr pexprNode4;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        pmultNode3 = (PMult)nodeArrayList2.get(0);
        pexprNode4 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new AMultExpr(pexprNode2, pmultNode3, pexprNode4);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce AFatorTermo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList1.get(0);
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce AMultMult */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMult pmultNode1;
        {
            // Block
        TMultiplicacao tmultiplicacaoNode2;
        tmultiplicacaoNode2 = (TMultiplicacao)nodeArrayList1.get(0);

        pmultNode1 = new AMultMult(tmultiplicacaoNode2);
        }
	nodeList.add(pmultNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce ADivMult */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMult pmultNode1;
        {
            // Block
        TDivisao tdivisaoNode2;
        tdivisaoNode2 = (TDivisao)nodeArrayList1.get(0);

        pmultNode1 = new ADivMult(tdivisaoNode2);
        }
	nodeList.add(pmultNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce AInternoFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        pexprNode2 = (PExpr)nodeArrayList2.get(0);

        pexprNode1 = new AInternoExpr(pexprNode2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce ANegativoFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        TSubtracao tsubtracaoNode2;
        PExpr pexprNode3;
        tsubtracaoNode2 = (TSubtracao)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);

        pexprNode1 = new ANegativoExpr(tsubtracaoNode2, pexprNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce ANumeroFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        TNumero tnumeroNode2;
        tnumeroNode2 = (TNumero)nodeArrayList1.get(0);

        pexprNode1 = new ANumeroExpr(tnumeroNode2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce ARealFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        TNumeroReal tnumerorealNode2;
        tnumerorealNode2 = (TNumeroReal)nodeArrayList1.get(0);

        pexprNode1 = new ARealExpr(tnumerorealNode2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce AVariavelFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PVar pvarNode2;
        pvarNode2 = (PVar)nodeArrayList1.get(0);

        pexprNode1 = new AVariavelExpr(pvarNode2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce AMenorigParabool */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce AMaiorigParabool */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce AMenorParabool */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce AMaiorParabool */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce AIgualLcomp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce ADiffLcomp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce ALsoma */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce ALmult */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce ALxor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce AConjuntoExpLogica */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce ADiretoExpLogica */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce ARnaoigualfator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce AParentesesNaoigualfator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce AExpNaoigualfator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce ANaoNaoigualfator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce ACadeiaLinicio */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce ASimplesLinicio */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce ACadeiaLmeio */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce ASimplesLmeio */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce ACadeiaLtermo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce ASimplesLtermo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce AParentesesLfator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce AExpLfator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce AExpigLfator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce ANaoLfator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce AOutraexp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce AComandoSe */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce ASeNaoComandoSe */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new58() /* reduce AIdVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVar pvarNode1;
        {
            // Block
        TIdentificador tidentificadorNode2;
        tidentificadorNode2 = (TIdentificador)nodeArrayList1.get(0);

        pvarNode1 = new AIdVar(tidentificadorNode2);
        }
	nodeList.add(pvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new59() /* reduce AVetorVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVar pvarNode1;
        {
            // Block
        TIdentificador tidentificadorNode2;
        PExpr pexprNode3;
        tidentificadorNode2 = (TIdentificador)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList3.get(0);

        pvarNode1 = new AVetorVar(tidentificadorNode2, pexprNode3);
        }
	nodeList.add(pvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new60() /* reduce ALeiaComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new61() /* reduce ARepitaComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new62() /* reduce AEnquantoComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new63() /* reduce AAvaliarComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new64() /* reduce AEscritaComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new65() /* reduce ASeComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new66() /* reduce AAtribuicaoComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new67() /* reduce AParaComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new68() /* reduce AComandoRepita */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new69() /* reduce AComandoEnquanto */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new70() /* reduce ACasos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new71() /* reduce ASenaoAvsenao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new72() /* reduce AVazioAvsenao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new73() /* reduce AComandoAvalie */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new74() /* reduce ANumParatipos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new75() /* reduce AVarParatipos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new76() /* reduce ASempassoComandoPara */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new77() /* reduce ACompassoComandoPara */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new78() /* reduce ANormalComandoEscrita */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new79() /* reduce AStrComandoEscrita */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new80() /* reduce AComandoLeia */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new81() /* reduce AComandoAtribuicao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new82() /* reduce ATerminal$DeclaracaoVariavel */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PDeclaracaoVariavel pdeclaracaovariavelNode1;
        pdeclaracaovariavelNode1 = (PDeclaracaoVariavel)nodeArrayList1.get(0);
	if(pdeclaracaovariavelNode1 != null)
	{
	  listNode2.add(pdeclaracaovariavelNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new83() /* reduce ANonTerminal$DeclaracaoVariavel */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PDeclaracaoVariavel pdeclaracaovariavelNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pdeclaracaovariavelNode2 = (PDeclaracaoVariavel)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pdeclaracaovariavelNode2 != null)
	{
	  listNode3.add(pdeclaracaovariavelNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new84() /* reduce ATerminal$Comando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new85() /* reduce ANonTerminal$Comando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new86() /* reduce ATerminal$DeclaracaoVariavelVirgula */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PVariaveld pvariaveldNode1;
        pvariaveldNode1 = (PVariaveld)nodeArrayList1.get(0);
	if(pvariaveldNode1 != null)
	{
	  listNode2.add(pvariaveldNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new87() /* reduce ANonTerminal$DeclaracaoVariavelVirgula */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PVariaveld pvariaveldNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pvariaveldNode2 = (PVariaveld)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pvariaveldNode2 != null)
	{
	  listNode3.add(pvariaveldNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new88() /* reduce ATerminal$Casos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new89() /* reduce ANonTerminal$Casos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {18, SHIFT, 1}, },
			{{-1, ERROR, 1}, {52, SHIFT, 3}, },
			{{-1, ERROR, 2}, {57, ACCEPT, -1}, },
			{{-1, ERROR, 3}, {8, SHIFT, 4}, },
			{{-1, ERROR, 4}, {19, SHIFT, 5}, },
			{{-1, ERROR, 5}, {1, SHIFT, 6}, {4, SHIFT, 7}, {5, SHIFT, 8}, {6, SHIFT, 9}, {17, SHIFT, 10}, {48, SHIFT, 11}, {50, SHIFT, 12}, {51, SHIFT, 13}, {52, SHIFT, 14}, },
			{{-1, ERROR, 6}, {1, SHIFT, 6}, {48, SHIFT, 11}, {50, SHIFT, 12}, {51, SHIFT, 13}, {52, SHIFT, 14}, },
			{{-1, REDUCE, 10}, },
			{{-1, REDUCE, 12}, },
			{{-1, REDUCE, 11}, },
			{{-1, ERROR, 10}, {52, SHIFT, 24}, },
			{{-1, ERROR, 11}, {1, SHIFT, 6}, {48, SHIFT, 11}, {50, SHIFT, 12}, {51, SHIFT, 13}, {52, SHIFT, 14}, },
			{{-1, REDUCE, 27}, },
			{{-1, REDUCE, 28}, },
			{{-1, REDUCE, 58}, {41, SHIFT, 26}, },
			{{-1, REDUCE, 82}, },
			{{-1, ERROR, 16}, {9, SHIFT, 27}, },
			{{-1, ERROR, 17}, {20, SHIFT, 28}, {22, SHIFT, 29}, {23, SHIFT, 30}, {24, SHIFT, 31}, {29, SHIFT, 32}, {30, SHIFT, 33}, {32, SHIFT, 34}, {38, SHIFT, 35}, {52, SHIFT, 14}, },
			{{-1, REDUCE, 16}, {0, SHIFT, 47}, {1, SHIFT, 48}, },
			{{-1, REDUCE, 18}, {2, SHIFT, 50}, {3, SHIFT, 51}, },
			{{-1, REDUCE, 22}, },
			{{-1, REDUCE, 29}, },
			{{-1, ERROR, 22}, {1, SHIFT, 6}, {4, SHIFT, 7}, {5, SHIFT, 8}, {6, SHIFT, 9}, {17, SHIFT, 10}, {48, SHIFT, 11}, {50, SHIFT, 12}, {51, SHIFT, 13}, {52, SHIFT, 14}, },
			{{-1, REDUCE, 26}, },
			{{-1, ERROR, 24}, {7, SHIFT, 55}, {50, SHIFT, 56}, {51, SHIFT, 57}, },
			{{-1, ERROR, 25}, {0, SHIFT, 47}, {1, SHIFT, 48}, {49, SHIFT, 59}, },
			{{-1, ERROR, 26}, {1, SHIFT, 6}, {48, SHIFT, 11}, {50, SHIFT, 12}, {51, SHIFT, 13}, {52, SHIFT, 14}, },
			{{-1, ERROR, 27}, {52, SHIFT, 61}, },
			{{-1, REDUCE, 0}, },
			{{-1, ERROR, 29}, {48, SHIFT, 65}, },
			{{-1, ERROR, 30}, {48, SHIFT, 66}, },
			{{-1, ERROR, 31}, {48, SHIFT, 67}, },
			{{-1, ERROR, 32}, {22, SHIFT, 29}, {23, SHIFT, 30}, {24, SHIFT, 31}, {29, SHIFT, 32}, {30, SHIFT, 33}, {32, SHIFT, 34}, {38, SHIFT, 35}, {52, SHIFT, 14}, },
			{{-1, ERROR, 33}, {48, SHIFT, 69}, },
			{{-1, ERROR, 34}, {52, SHIFT, 14}, },
			{{-1, ERROR, 35}, {48, SHIFT, 71}, },
			{{-1, ERROR, 36}, {8, SHIFT, 72}, },
			{{-1, ERROR, 37}, {16, SHIFT, 73}, },
			{{-1, REDUCE, 84}, },
			{{-1, ERROR, 39}, {8, SHIFT, 74}, },
			{{-1, ERROR, 40}, {8, SHIFT, 75}, },
			{{-1, ERROR, 41}, {8, SHIFT, 76}, },
			{{-1, ERROR, 42}, {8, SHIFT, 77}, },
			{{-1, ERROR, 43}, {8, SHIFT, 78}, },
			{{-1, ERROR, 44}, {8, SHIFT, 79}, },
			{{-1, ERROR, 45}, {8, SHIFT, 80}, },
			{{-1, ERROR, 46}, {20, SHIFT, 81}, {22, SHIFT, 29}, {23, SHIFT, 30}, {24, SHIFT, 31}, {29, SHIFT, 32}, {30, SHIFT, 33}, {32, SHIFT, 34}, {38, SHIFT, 35}, {52, SHIFT, 14}, },
			{{-1, REDUCE, 19}, },
			{{-1, REDUCE, 20}, },
			{{-1, ERROR, 49}, {1, SHIFT, 6}, {48, SHIFT, 11}, {50, SHIFT, 12}, {51, SHIFT, 13}, {52, SHIFT, 14}, },
			{{-1, REDUCE, 23}, },
			{{-1, REDUCE, 24}, },
			{{-1, ERROR, 52}, {1, SHIFT, 6}, {48, SHIFT, 11}, {50, SHIFT, 12}, {51, SHIFT, 13}, {52, SHIFT, 14}, },
			{{-1, REDUCE, 83}, },
			{{-1, ERROR, 54}, {20, SHIFT, 85}, {22, SHIFT, 29}, {23, SHIFT, 30}, {24, SHIFT, 31}, {29, SHIFT, 32}, {30, SHIFT, 33}, {32, SHIFT, 34}, {38, SHIFT, 35}, {52, SHIFT, 14}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 15}, },
			{{-1, ERROR, 58}, {8, SHIFT, 87}, },
			{{-1, REDUCE, 25}, },
			{{-1, ERROR, 60}, {0, SHIFT, 47}, {1, SHIFT, 48}, {42, SHIFT, 88}, },
			{{-1, REDUCE, 8}, {41, SHIFT, 89}, },
			{{-1, REDUCE, 86}, },
			{{-1, ERROR, 63}, {8, SHIFT, 90}, {47, SHIFT, 91}, },
			{{-1, ERROR, 64}, {52, SHIFT, 61}, },
			{{-1, ERROR, 65}, {1, SHIFT, 6}, {7, SHIFT, 94}, {48, SHIFT, 11}, {50, SHIFT, 12}, {51, SHIFT, 13}, {52, SHIFT, 14}, },
			{{-1, ERROR, 66}, {52, SHIFT, 14}, },
			{{-1, ERROR, 67}, {1, SHIFT, 6}, {46, SHIFT, 97}, {48, SHIFT, 98}, {50, SHIFT, 12}, {51, SHIFT, 13}, {52, SHIFT, 14}, },
			{{-1, ERROR, 68}, {22, SHIFT, 29}, {23, SHIFT, 30}, {24, SHIFT, 31}, {29, SHIFT, 32}, {30, SHIFT, 33}, {32, SHIFT, 34}, {34, SHIFT, 106}, {38, SHIFT, 35}, {52, SHIFT, 14}, },
			{{-1, ERROR, 69}, {1, SHIFT, 6}, {46, SHIFT, 97}, {48, SHIFT, 98}, {50, SHIFT, 12}, {51, SHIFT, 13}, {52, SHIFT, 14}, },
			{{-1, ERROR, 70}, {33, SHIFT, 108}, },
			{{-1, ERROR, 71}, {1, SHIFT, 6}, {48, SHIFT, 11}, {50, SHIFT, 12}, {51, SHIFT, 13}, {52, SHIFT, 14}, },
			{{-1, REDUCE, 65}, },
			{{-1, ERROR, 73}, {1, SHIFT, 6}, {48, SHIFT, 11}, {50, SHIFT, 12}, {51, SHIFT, 13}, {52, SHIFT, 14}, },
			{{-1, REDUCE, 61}, },
			{{-1, REDUCE, 62}, },
			{{-1, REDUCE, 63}, },
			{{-1, REDUCE, 67}, },
			{{-1, REDUCE, 64}, },
			{{-1, REDUCE, 60}, },
			{{-1, REDUCE, 66}, },
			{{-1, REDUCE, 2}, },
			{{-1, REDUCE, 85}, },
			{{-1, REDUCE, 17}, {2, SHIFT, 50}, {3, SHIFT, 51}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 1}, },
			{{-1, ERROR, 86}, {20, SHIFT, 111}, {22, SHIFT, 29}, {23, SHIFT, 30}, {24, SHIFT, 31}, {29, SHIFT, 32}, {30, SHIFT, 33}, {32, SHIFT, 34}, {38, SHIFT, 35}, {52, SHIFT, 14}, },
			{{-1, REDUCE, 6}, },
			{{-1, REDUCE, 59}, },
			{{-1, ERROR, 89}, {50, SHIFT, 112}, },
			{{-1, REDUCE, 4}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 87}, },
			{{-1, ERROR, 93}, {8, SHIFT, 113}, {47, SHIFT, 91}, },
			{{-1, ERROR, 94}, {49, SHIFT, 114}, },
			{{-1, ERROR, 95}, {49, SHIFT, 115}, },
			{{-1, ERROR, 96}, {49, SHIFT, 116}, },
			{{-1, ERROR, 97}, {1, SHIFT, 6}, {46, SHIFT, 117}, {48, SHIFT, 118}, {50, SHIFT, 12}, {51, SHIFT, 13}, {52, SHIFT, 14}, },
			{{-1, ERROR, 98}, {1, SHIFT, 6}, {46, SHIFT, 97}, {48, SHIFT, 98}, {50, SHIFT, 12}, {51, SHIFT, 13}, {52, SHIFT, 14}, },
			{{-1, ERROR, 99}, {0, SHIFT, 47}, {1, SHIFT, 48}, {10, SHIFT, 123}, {11, SHIFT, 124}, {12, SHIFT, 125}, {13, SHIFT, 126}, {14, SHIFT, 127}, {15, SHIFT, 128}, },
			{{-1, ERROR, 100}, {49, SHIFT, 131}, },
			{{-1, ERROR, 101}, {12, SHIFT, 125}, {15, SHIFT, 128}, },
			{{-1, REDUCE, 40}, {44, SHIFT, 133}, },
			{{-1, REDUCE, 46}, {45, SHIFT, 135}, },
			{{-1, REDUCE, 48}, {43, SHIFT, 137}, },
			{{-1, REDUCE, 50}, },
			{{-1, ERROR, 106}, {48, SHIFT, 139}, },
			{{-1, ERROR, 107}, {49, SHIFT, 140}, },
			{{-1, ERROR, 108}, {50, SHIFT, 141}, {52, SHIFT, 14}, },
			{{-1, ERROR, 109}, {49, SHIFT, 144}, },
			{{-1, REDUCE, 81}, {0, SHIFT, 47}, {1, SHIFT, 48}, },
			{{-1, REDUCE, 3}, },
			{{-1, ERROR, 112}, {42, SHIFT, 145}, },
			{{-1, REDUCE, 5}, },
			{{-1, REDUCE, 79}, },
			{{-1, REDUCE, 78}, },
			{{-1, REDUCE, 80}, },
			{{-1, ERROR, 117}, {1, SHIFT, 6}, {46, SHIFT, 117}, {48, SHIFT, 118}, {50, SHIFT, 12}, {51, SHIFT, 13}, {52, SHIFT, 14}, },
			{{-1, ERROR, 118}, {1, SHIFT, 6}, {46, SHIFT, 97}, {48, SHIFT, 98}, {50, SHIFT, 12}, {51, SHIFT, 13}, {52, SHIFT, 14}, },
			{{-1, ERROR, 119}, {0, SHIFT, 47}, {1, SHIFT, 48}, {10, SHIFT, 123}, {11, SHIFT, 124}, {12, SHIFT, 125}, {13, SHIFT, 126}, {14, SHIFT, 127}, {15, SHIFT, 128}, },
			{{-1, REDUCE, 54}, {12, REDUCE, 44}, {15, REDUCE, 44}, },
			{{-1, ERROR, 121}, {0, SHIFT, 47}, {1, SHIFT, 48}, {10, SHIFT, 123}, {11, SHIFT, 124}, {12, SHIFT, 125}, {13, SHIFT, 126}, {14, SHIFT, 127}, {15, SHIFT, 128}, {49, SHIFT, 59}, },
			{{-1, ERROR, 122}, {49, SHIFT, 149}, },
			{{-1, REDUCE, 33}, },
			{{-1, REDUCE, 32}, },
			{{-1, REDUCE, 34}, },
			{{-1, REDUCE, 31}, },
			{{-1, REDUCE, 30}, },
			{{-1, REDUCE, 35}, },
			{{-1, ERROR, 129}, {1, SHIFT, 6}, {48, SHIFT, 11}, {50, SHIFT, 12}, {51, SHIFT, 13}, {52, SHIFT, 14}, },
			{{-1, ERROR, 130}, {1, SHIFT, 6}, {48, SHIFT, 11}, {50, SHIFT, 12}, {51, SHIFT, 13}, {52, SHIFT, 14}, },
			{{-1, ERROR, 131}, {25, SHIFT, 153}, },
			{{-1, ERROR, 132}, {1, SHIFT, 6}, {46, SHIFT, 154}, {48, SHIFT, 155}, {50, SHIFT, 12}, {51, SHIFT, 13}, {52, SHIFT, 14}, },
			{{-1, REDUCE, 36}, },
			{{-1, ERROR, 134}, {1, SHIFT, 6}, {46, SHIFT, 117}, {48, SHIFT, 118}, {50, SHIFT, 12}, {51, SHIFT, 13}, {52, SHIFT, 14}, },
			{{-1, REDUCE, 38}, },
			{{-1, ERROR, 136}, {1, SHIFT, 6}, {46, SHIFT, 117}, {48, SHIFT, 118}, {50, SHIFT, 12}, {51, SHIFT, 13}, {52, SHIFT, 14}, },
			{{-1, REDUCE, 37}, },
			{{-1, ERROR, 138}, {1, SHIFT, 6}, {46, SHIFT, 117}, {48, SHIFT, 118}, {50, SHIFT, 12}, {51, SHIFT, 13}, {52, SHIFT, 14}, },
			{{-1, ERROR, 139}, {1, SHIFT, 6}, {46, SHIFT, 97}, {48, SHIFT, 98}, {50, SHIFT, 12}, {51, SHIFT, 13}, {52, SHIFT, 14}, },
			{{-1, ERROR, 140}, {35, SHIFT, 163}, },
			{{-1, REDUCE, 74}, },
			{{-1, REDUCE, 75}, },
			{{-1, ERROR, 143}, {34, SHIFT, 164}, {37, SHIFT, 165}, },
			{{-1, ERROR, 144}, {39, SHIFT, 166}, },
			{{-1, REDUCE, 9}, },
			{{-1, REDUCE, 54}, },
			{{-1, ERROR, 147}, {49, SHIFT, 169}, },
			{{-1, ERROR, 148}, {1, SHIFT, 6}, {48, SHIFT, 11}, {50, SHIFT, 12}, {51, SHIFT, 13}, {52, SHIFT, 14}, },
			{{-1, REDUCE, 51}, {12, REDUCE, 42}, {15, REDUCE, 42}, },
			{{-1, REDUCE, 55}, {0, SHIFT, 47}, {1, SHIFT, 48}, },
			{{-1, REDUCE, 52}, {12, REDUCE, 43}, {15, REDUCE, 43}, },
			{{-1, REDUCE, 53}, },
			{{-1, ERROR, 153}, {22, SHIFT, 29}, {23, SHIFT, 30}, {24, SHIFT, 31}, {29, SHIFT, 32}, {30, SHIFT, 33}, {32, SHIFT, 34}, {38, SHIFT, 35}, {52, SHIFT, 14}, },
			{{-1, ERROR, 154}, {1, SHIFT, 6}, {46, SHIFT, 117}, {48, SHIFT, 118}, {50, SHIFT, 12}, {51, SHIFT, 13}, {52, SHIFT, 14}, },
			{{-1, ERROR, 155}, {1, SHIFT, 6}, {46, SHIFT, 97}, {48, SHIFT, 98}, {50, SHIFT, 12}, {51, SHIFT, 13}, {52, SHIFT, 14}, },
			{{-1, ERROR, 156}, {0, SHIFT, 47}, {1, SHIFT, 48}, {10, SHIFT, 123}, {11, SHIFT, 124}, {13, SHIFT, 126}, {14, SHIFT, 127}, },
			{{-1, REDUCE, 39}, },
			{{-1, REDUCE, 41}, },
			{{-1, REDUCE, 45}, {45, SHIFT, 135}, },
			{{-1, REDUCE, 47}, {43, SHIFT, 137}, },
			{{-1, REDUCE, 49}, },
			{{-1, ERROR, 162}, {49, SHIFT, 175}, },
			{{-1, ERROR, 163}, {22, SHIFT, 29}, {23, SHIFT, 30}, {24, SHIFT, 31}, {29, SHIFT, 32}, {30, SHIFT, 33}, {32, SHIFT, 34}, {38, SHIFT, 35}, {52, SHIFT, 14}, },
			{{-1, ERROR, 164}, {50, SHIFT, 141}, {52, SHIFT, 14}, },
			{{-1, ERROR, 165}, {50, SHIFT, 141}, {52, SHIFT, 14}, },
			{{-1, ERROR, 166}, {7, SHIFT, 55}, {50, SHIFT, 56}, {51, SHIFT, 57}, },
			{{-1, REDUCE, 88}, },
			{{-1, REDUCE, 72}, {26, SHIFT, 180}, {39, SHIFT, 166}, },
			{{-1, REDUCE, 51}, },
			{{-1, REDUCE, 52}, },
			{{-1, ERROR, 171}, {22, SHIFT, 29}, {23, SHIFT, 30}, {24, SHIFT, 31}, {26, SHIFT, 183}, {27, SHIFT, 184}, {29, SHIFT, 32}, {30, SHIFT, 33}, {32, SHIFT, 34}, {38, SHIFT, 35}, {52, SHIFT, 14}, },
			{{-1, REDUCE, 44}, },
			{{-1, ERROR, 173}, {49, SHIFT, 185}, },
			{{-1, ERROR, 174}, {1, SHIFT, 6}, {48, SHIFT, 11}, {50, SHIFT, 12}, {51, SHIFT, 13}, {52, SHIFT, 14}, },
			{{-1, REDUCE, 68}, },
			{{-1, ERROR, 176}, {22, SHIFT, 29}, {23, SHIFT, 30}, {24, SHIFT, 31}, {29, SHIFT, 32}, {30, SHIFT, 33}, {31, SHIFT, 187}, {32, SHIFT, 34}, {38, SHIFT, 35}, {52, SHIFT, 14}, },
			{{-1, ERROR, 177}, {35, SHIFT, 188}, },
			{{-1, ERROR, 178}, {34, SHIFT, 189}, },
			{{-1, ERROR, 179}, {9, SHIFT, 190}, },
			{{-1, ERROR, 180}, {9, SHIFT, 191}, },
			{{-1, REDUCE, 89}, },
			{{-1, ERROR, 182}, {40, SHIFT, 192}, },
			{{-1, ERROR, 183}, {22, SHIFT, 29}, {23, SHIFT, 30}, {24, SHIFT, 31}, {29, SHIFT, 32}, {30, SHIFT, 33}, {32, SHIFT, 34}, {38, SHIFT, 35}, {52, SHIFT, 14}, },
			{{-1, REDUCE, 56}, },
			{{-1, REDUCE, 42}, },
			{{-1, REDUCE, 43}, },
			{{-1, REDUCE, 69}, },
			{{-1, ERROR, 188}, {22, SHIFT, 29}, {23, SHIFT, 30}, {24, SHIFT, 31}, {29, SHIFT, 32}, {30, SHIFT, 33}, {32, SHIFT, 34}, {38, SHIFT, 35}, {52, SHIFT, 14}, },
			{{-1, ERROR, 189}, {50, SHIFT, 141}, {52, SHIFT, 14}, },
			{{-1, ERROR, 190}, {22, SHIFT, 29}, {23, SHIFT, 30}, {24, SHIFT, 31}, {29, SHIFT, 32}, {30, SHIFT, 33}, {32, SHIFT, 34}, {38, SHIFT, 35}, {52, SHIFT, 14}, },
			{{-1, ERROR, 191}, {22, SHIFT, 29}, {23, SHIFT, 30}, {24, SHIFT, 31}, {29, SHIFT, 32}, {30, SHIFT, 33}, {32, SHIFT, 34}, {38, SHIFT, 35}, {52, SHIFT, 14}, },
			{{-1, REDUCE, 73}, },
			{{-1, ERROR, 193}, {22, SHIFT, 29}, {23, SHIFT, 30}, {24, SHIFT, 31}, {27, SHIFT, 198}, {29, SHIFT, 32}, {30, SHIFT, 33}, {32, SHIFT, 34}, {38, SHIFT, 35}, {52, SHIFT, 14}, },
			{{-1, ERROR, 194}, {22, SHIFT, 29}, {23, SHIFT, 30}, {24, SHIFT, 31}, {29, SHIFT, 32}, {30, SHIFT, 33}, {32, SHIFT, 34}, {36, SHIFT, 199}, {38, SHIFT, 35}, {52, SHIFT, 14}, },
			{{-1, ERROR, 195}, {35, SHIFT, 200}, },
			{{-1, REDUCE, 70}, {22, SHIFT, 29}, {23, SHIFT, 30}, {24, SHIFT, 31}, {29, SHIFT, 32}, {30, SHIFT, 33}, {32, SHIFT, 34}, {38, SHIFT, 35}, {52, SHIFT, 14}, },
			{{-1, REDUCE, 71}, {22, SHIFT, 29}, {23, SHIFT, 30}, {24, SHIFT, 31}, {29, SHIFT, 32}, {30, SHIFT, 33}, {32, SHIFT, 34}, {38, SHIFT, 35}, {52, SHIFT, 14}, },
			{{-1, REDUCE, 57}, },
			{{-1, REDUCE, 76}, },
			{{-1, ERROR, 200}, {22, SHIFT, 29}, {23, SHIFT, 30}, {24, SHIFT, 31}, {29, SHIFT, 32}, {30, SHIFT, 33}, {32, SHIFT, 34}, {38, SHIFT, 35}, {52, SHIFT, 14}, },
			{{-1, ERROR, 201}, {22, SHIFT, 29}, {23, SHIFT, 30}, {24, SHIFT, 31}, {29, SHIFT, 32}, {30, SHIFT, 33}, {32, SHIFT, 34}, {36, SHIFT, 202}, {38, SHIFT, 35}, {52, SHIFT, 14}, },
			{{-1, REDUCE, 77}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 15}, {22, 53}, },
			{{-1, 62}, {64, 92}, },
			{{-1, 63}, {64, 93}, },
			{{-1, 16}, },
			{{-1, 58}, {166, 179}, },
			{{-1, 17}, {22, 54}, {65, 95}, {71, 109}, },
			{{-1, 119}, {5, 18}, {11, 25}, {22, 18}, {26, 60}, {65, 18}, {67, 99}, {69, 99}, {71, 18}, {73, 110}, {98, 121}, {118, 121}, {129, 150}, {130, 150}, {132, 156}, {139, 99}, {148, 150}, {155, 121}, {174, 150}, },
			{{-1, 49}, },
			{{-1, 19}, {49, 83}, },
			{{-1, 52}, },
			{{-1, 20}, {6, 23}, {52, 84}, },
			{{-1, 129}, {119, 148}, {156, 174}, },
			{{-1, 130}, {101, 132}, },
			{{-1, 134}, },
			{{-1, 138}, },
			{{-1, 136}, },
			{{-1, 100}, {69, 107}, {98, 122}, {118, 147}, {139, 162}, {155, 173}, },
			{{-1, 157}, },
			{{-1, 101}, {132, 158}, },
			{{-1, 102}, },
			{{-1, 103}, {134, 159}, },
			{{-1, 104}, {136, 160}, },
			{{-1, 105}, {97, 120}, {117, 146}, {138, 161}, {154, 172}, },
			{{-1, 151}, {130, 152}, {148, 170}, {174, 186}, },
			{{-1, 36}, },
			{{-1, 21}, {17, 37}, {32, 37}, {34, 70}, {46, 37}, {54, 37}, {66, 96}, {68, 37}, {86, 37}, {108, 142}, {153, 37}, {163, 37}, {164, 142}, {165, 142}, {171, 37}, {176, 37}, {183, 37}, {188, 37}, {189, 142}, {190, 37}, {191, 37}, {193, 37}, {194, 37}, {196, 37}, {197, 37}, {200, 37}, {201, 37}, },
			{{-1, 38}, {46, 82}, {68, 82}, {86, 82}, {171, 82}, {176, 82}, {193, 82}, {194, 82}, {196, 82}, {197, 82}, {201, 82}, },
			{{-1, 39}, },
			{{-1, 40}, },
			{{-1, 167}, {168, 181}, },
			{{-1, 182}, },
			{{-1, 41}, },
			{{-1, 143}, {164, 177}, {165, 178}, {189, 195}, },
			{{-1, 42}, },
			{{-1, 43}, },
			{{-1, 44}, },
			{{-1, 45}, },
			{{-1, 22}, },
			{{-1, 46}, {32, 68}, {54, 86}, {153, 171}, {163, 176}, {183, 193}, {188, 194}, {190, 196}, {191, 197}, {200, 201}, },
			{{-1, 64}, },
			{{-1, 168}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'programa'",
			"expecting: identificador",
			"expecting: EOF",
			"expecting: ';'",
			"expecting: 'inicio'",
			"expecting: '-', 'caractere', 'real', 'inteiro', 'const', '(', numero, numero real, identificador",
			"expecting: '-', '(', numero, numero real, identificador",
			"expecting: ':'",
			"expecting: '+', '-', '*', '/', ';', '>', '<', '=', '>=', '<=', '<>', 'fim.', 'escreva', 'leia', 'se', 'repita', 'enquanto', 'para', 'avalie', ']', 'e', 'ou', 'xor', ')', identificador",
			"expecting: '+', '-', '*', '/', ';', '>', '<', '=', '>=', '<=', '<>', '<-', 'fim.', 'escreva', 'leia', 'se', 'repita', 'enquanto', 'para', 'de', 'ate', 'faca', 'passo', 'avalie', '[', ']', 'e', 'ou', 'xor', ')', identificador",
			"expecting: 'fim.', 'escreva', 'leia', 'se', 'repita', 'enquanto', 'para', 'avalie', identificador",
			"expecting: '+', '-', 'fim.', 'escreva', 'leia', 'se', 'repita', 'enquanto', 'para', 'avalie', ')', identificador",
			"expecting: string, numero, numero real",
			"expecting: '+', '-', ')'",
			"expecting: '('",
			"expecting: 'escreva', 'leia', 'se', 'repita', 'enquanto', 'para', 'avalie', identificador",
			"expecting: '<-'",
			"expecting: 'fim.', 'escreva', 'leia', 'se', 'senao', 'fim se', 'repita', 'enquanto', 'fim enquanto', 'para', 'ate', 'fim para', 'avalie', 'caso', 'fim avalie', identificador",
			"expecting: ';', ':'",
			"expecting: '+', '-', ']'",
			"expecting: ';', '[', ','",
			"expecting: ';', ','",
			"expecting: '-', string, '(', numero, numero real, identificador",
			"expecting: '-', 'nao', '(', numero, numero real, identificador",
			"expecting: 'escreva', 'leia', 'se', 'repita', 'enquanto', 'para', 'ate', 'avalie', identificador",
			"expecting: 'de'",
			"expecting: '+', '-', '*', '/', ';', '>', '<', '=', '>=', '<=', '<>', '<-', 'fim.', 'escreva', 'leia', 'se', 'repita', 'enquanto', 'para', 'de', 'ate', 'faca', 'passo', 'avalie', ']', 'e', 'ou', 'xor', ')', identificador",
			"expecting: numero",
			"expecting: ')'",
			"expecting: '+', '-', '>', '<', '=', '>=', '<=', '<>'",
			"expecting: '=', '<>'",
			"expecting: 'ou', ')'",
			"expecting: 'ou', 'xor', ')'",
			"expecting: 'e', 'ou', 'xor', ')'",
			"expecting: numero, identificador",
			"expecting: '+', '-', ';'",
			"expecting: ']'",
			"expecting: '=', '<>', 'e', 'ou', 'xor', ')'",
			"expecting: '+', '-', '>', '<', '=', '>=', '<=', '<>', ')'",
			"expecting: 'entao'",
			"expecting: 'faca'",
			"expecting: 'ate', 'faca', 'passo'",
			"expecting: 'ate', 'passo'",
			"expecting: 'caso'",
			"expecting: '+', '-', '=', '<>', 'e', 'ou', 'xor', ')'",
			"expecting: '+', '-', '>', '<', '>=', '<='",
			"expecting: 'senao', 'caso', 'fim avalie'",
			"expecting: 'escreva', 'leia', 'se', 'senao', 'fim se', 'repita', 'enquanto', 'para', 'avalie', identificador",
			"expecting: 'escreva', 'leia', 'se', 'repita', 'enquanto', 'fim enquanto', 'para', 'avalie', identificador",
			"expecting: 'ate'",
			"expecting: 'fim avalie'",
			"expecting: 'escreva', 'leia', 'se', 'fim se', 'repita', 'enquanto', 'para', 'avalie', identificador",
			"expecting: 'escreva', 'leia', 'se', 'repita', 'enquanto', 'para', 'fim para', 'avalie', identificador",
			"expecting: 'escreva', 'leia', 'se', 'senao', 'repita', 'enquanto', 'para', 'avalie', 'caso', 'fim avalie', identificador",
			"expecting: 'escreva', 'leia', 'se', 'repita', 'enquanto', 'para', 'avalie', 'fim avalie', identificador",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 4, 5, 6, 7, 7, 7, 1, 6, 8, 8, 9, 5, 7, 10, 11, 8, 8, 8, 5, 8, 12, 13, 6, 1, 2, 14, 14, 14, 15, 14, 1, 14, 3, 16, 17, 3, 3, 3, 3, 3, 3, 3, 10, 6, 6, 6, 6, 6, 6, 5, 10, 18, 18, 18, 3, 8, 19, 20, 1, 21, 1, 22, 1, 23, 24, 23, 25, 6, 17, 6, 17, 17, 17, 17, 17, 17, 17, 2, 17, 8, 8, 2, 10, 5, 26, 27, 5, 1, 1, 21, 28, 28, 28, 23, 23, 29, 28, 30, 31, 32, 33, 33, 14, 28, 34, 28, 35, 2, 36, 5, 3, 3, 3, 23, 23, 29, 37, 38, 28, 6, 6, 23, 6, 6, 23, 6, 6, 39, 23, 23, 23, 23, 23, 23, 23, 23, 40, 41, 41, 42, 43, 21, 37, 28, 6, 37, 44, 37, 37, 15, 23, 23, 45, 28, 28, 32, 33, 33, 28, 15, 34, 34, 12, 46, 46, 37, 37, 47, 28, 28, 6, 3, 48, 40, 49, 7, 7, 46, 50, 15, 3, 28, 28, 3, 15, 34, 15, 15, 3, 51, 52, 40, 53, 54, 3, 3, 15, 52, 3, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
