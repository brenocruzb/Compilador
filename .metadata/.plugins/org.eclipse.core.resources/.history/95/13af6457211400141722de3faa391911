/* This file was generated by SableCC (http://www.sablecc.org/). */

package node;

import analysis.*;

@SuppressWarnings("nls")
public final class AVetorVar extends PVar
{
    private TIdentificador _identificador_;
    private TAbrecolchete _abrecolchete_;
    private PExpnum _expnum_;
    private TFecharcolchete _fecharcolchete_;

    public AVetorVar()
    {
        // Constructor
    }

    public AVetorVar(
        @SuppressWarnings("hiding") TIdentificador _identificador_,
        @SuppressWarnings("hiding") TAbrecolchete _abrecolchete_,
        @SuppressWarnings("hiding") PExpnum _expnum_,
        @SuppressWarnings("hiding") TFecharcolchete _fecharcolchete_)
    {
        // Constructor
        setIdentificador(_identificador_);

        setAbrecolchete(_abrecolchete_);

        setExpnum(_expnum_);

        setFecharcolchete(_fecharcolchete_);

    }

    @Override
    public Object clone()
    {
        return new AVetorVar(
            cloneNode(this._identificador_),
            cloneNode(this._abrecolchete_),
            cloneNode(this._expnum_),
            cloneNode(this._fecharcolchete_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAVetorVar(this);
    }

    public TIdentificador getIdentificador()
    {
        return this._identificador_;
    }

    public void setIdentificador(TIdentificador node)
    {
        if(this._identificador_ != null)
        {
            this._identificador_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._identificador_ = node;
    }

    public TAbrecolchete getAbrecolchete()
    {
        return this._abrecolchete_;
    }

    public void setAbrecolchete(TAbrecolchete node)
    {
        if(this._abrecolchete_ != null)
        {
            this._abrecolchete_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._abrecolchete_ = node;
    }

    public PExpnum getExpnum()
    {
        return this._expnum_;
    }

    public void setExpnum(PExpnum node)
    {
        if(this._expnum_ != null)
        {
            this._expnum_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expnum_ = node;
    }

    public TFecharcolchete getFecharcolchete()
    {
        return this._fecharcolchete_;
    }

    public void setFecharcolchete(TFecharcolchete node)
    {
        if(this._fecharcolchete_ != null)
        {
            this._fecharcolchete_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._fecharcolchete_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._identificador_)
            + toString(this._abrecolchete_)
            + toString(this._expnum_)
            + toString(this._fecharcolchete_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._identificador_ == child)
        {
            this._identificador_ = null;
            return;
        }

        if(this._abrecolchete_ == child)
        {
            this._abrecolchete_ = null;
            return;
        }

        if(this._expnum_ == child)
        {
            this._expnum_ = null;
            return;
        }

        if(this._fecharcolchete_ == child)
        {
            this._fecharcolchete_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._identificador_ == oldChild)
        {
            setIdentificador((TIdentificador) newChild);
            return;
        }

        if(this._abrecolchete_ == oldChild)
        {
            setAbrecolchete((TAbrecolchete) newChild);
            return;
        }

        if(this._expnum_ == oldChild)
        {
            setExpnum((PExpnum) newChild);
            return;
        }

        if(this._fecharcolchete_ == oldChild)
        {
            setFecharcolchete((TFecharcolchete) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
