/* This file was generated by SableCC (http://www.sablecc.org/). */

package analysis;

import java.util.*;
import node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPTotal().apply(this);
        outStart(node);
    }

    public void inATotal(ATotal node)
    {
        defaultIn(node);
    }

    public void outATotal(ATotal node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATotal(ATotal node)
    {
        inATotal(node);
        if(node.getPonto() != null)
        {
            node.getPonto().apply(this);
        }
        if(node.getFim() != null)
        {
            node.getFim().apply(this);
        }
        if(node.getCorpoPrograma() != null)
        {
            node.getCorpoPrograma().apply(this);
        }
        if(node.getSuperDeclaracaoVariavel() != null)
        {
            node.getSuperDeclaracaoVariavel().apply(this);
        }
        if(node.getInicio() != null)
        {
            node.getInicio().apply(this);
        }
        if(node.getPontovirgula() != null)
        {
            node.getPontovirgula().apply(this);
        }
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        if(node.getPrograma() != null)
        {
            node.getPrograma().apply(this);
        }
        outATotal(node);
    }

    public void inASuperDeclaracaoVariavel(ASuperDeclaracaoVariavel node)
    {
        defaultIn(node);
    }

    public void outASuperDeclaracaoVariavel(ASuperDeclaracaoVariavel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASuperDeclaracaoVariavel(ASuperDeclaracaoVariavel node)
    {
        inASuperDeclaracaoVariavel(node);
        if(node.getDeclaracaoVariavel() != null)
        {
            node.getDeclaracaoVariavel().apply(this);
        }
        if(node.getSuperDeclaracaoVariavel() != null)
        {
            node.getSuperDeclaracaoVariavel().apply(this);
        }
        outASuperDeclaracaoVariavel(node);
    }

    public void inAVazioSuperDeclaracaoVariavel(AVazioSuperDeclaracaoVariavel node)
    {
        defaultIn(node);
    }

    public void outAVazioSuperDeclaracaoVariavel(AVazioSuperDeclaracaoVariavel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVazioSuperDeclaracaoVariavel(AVazioSuperDeclaracaoVariavel node)
    {
        inAVazioSuperDeclaracaoVariavel(node);
        outAVazioSuperDeclaracaoVariavel(node);
    }

    public void inAConjuntoDeclaracaoVariavel(AConjuntoDeclaracaoVariavel node)
    {
        defaultIn(node);
    }

    public void outAConjuntoDeclaracaoVariavel(AConjuntoDeclaracaoVariavel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConjuntoDeclaracaoVariavel(AConjuntoDeclaracaoVariavel node)
    {
        inAConjuntoDeclaracaoVariavel(node);
        if(node.getPontovirgula() != null)
        {
            node.getPontovirgula().apply(this);
        }
        if(node.getVariaveld() != null)
        {
            node.getVariaveld().apply(this);
        }
        if(node.getDeclaracaoVariavelVirgula() != null)
        {
            node.getDeclaracaoVariavelVirgula().apply(this);
        }
        if(node.getDoispontos() != null)
        {
            node.getDoispontos().apply(this);
        }
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        outAConjuntoDeclaracaoVariavel(node);
    }

    public void inADconstanteDeclaracaoVariavel(ADconstanteDeclaracaoVariavel node)
    {
        defaultIn(node);
    }

    public void outADconstanteDeclaracaoVariavel(ADconstanteDeclaracaoVariavel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADconstanteDeclaracaoVariavel(ADconstanteDeclaracaoVariavel node)
    {
        inADconstanteDeclaracaoVariavel(node);
        if(node.getPontovirgula() != null)
        {
            node.getPontovirgula().apply(this);
        }
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        if(node.getConst() != null)
        {
            node.getConst().apply(this);
        }
        outADconstanteDeclaracaoVariavel(node);
    }

    public void inADeclaracaoVariavel(ADeclaracaoVariavel node)
    {
        defaultIn(node);
    }

    public void outADeclaracaoVariavel(ADeclaracaoVariavel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclaracaoVariavel(ADeclaracaoVariavel node)
    {
        inADeclaracaoVariavel(node);
        if(node.getPontovirgula() != null)
        {
            node.getPontovirgula().apply(this);
        }
        if(node.getVariaveld() != null)
        {
            node.getVariaveld().apply(this);
        }
        if(node.getDoispontos() != null)
        {
            node.getDoispontos().apply(this);
        }
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        outADeclaracaoVariavel(node);
    }

    public void inAEncadeamentoDeclaracaoVariavelVirgula(AEncadeamentoDeclaracaoVariavelVirgula node)
    {
        defaultIn(node);
    }

    public void outAEncadeamentoDeclaracaoVariavelVirgula(AEncadeamentoDeclaracaoVariavelVirgula node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEncadeamentoDeclaracaoVariavelVirgula(AEncadeamentoDeclaracaoVariavelVirgula node)
    {
        inAEncadeamentoDeclaracaoVariavelVirgula(node);
        if(node.getVirgula() != null)
        {
            node.getVirgula().apply(this);
        }
        if(node.getVariaveld() != null)
        {
            node.getVariaveld().apply(this);
        }
        if(node.getDeclaracaoVariavelVirgula() != null)
        {
            node.getDeclaracaoVariavelVirgula().apply(this);
        }
        outAEncadeamentoDeclaracaoVariavelVirgula(node);
    }

    public void inADeclaracaoVariavelVirgula(ADeclaracaoVariavelVirgula node)
    {
        defaultIn(node);
    }

    public void outADeclaracaoVariavelVirgula(ADeclaracaoVariavelVirgula node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclaracaoVariavelVirgula(ADeclaracaoVariavelVirgula node)
    {
        inADeclaracaoVariavelVirgula(node);
        if(node.getVirgula() != null)
        {
            node.getVirgula().apply(this);
        }
        if(node.getVariaveld() != null)
        {
            node.getVariaveld().apply(this);
        }
        outADeclaracaoVariavelVirgula(node);
    }

    public void inAVariaveld(AVariaveld node)
    {
        defaultIn(node);
    }

    public void outAVariaveld(AVariaveld node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariaveld(AVariaveld node)
    {
        inAVariaveld(node);
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        outAVariaveld(node);
    }

    public void inAVetorVariaveld(AVetorVariaveld node)
    {
        defaultIn(node);
    }

    public void outAVetorVariaveld(AVetorVariaveld node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVetorVariaveld(AVetorVariaveld node)
    {
        inAVetorVariaveld(node);
        if(node.getFecharcolchete() != null)
        {
            node.getFecharcolchete().apply(this);
        }
        if(node.getNumero() != null)
        {
            node.getNumero().apply(this);
        }
        if(node.getAbrecolchete() != null)
        {
            node.getAbrecolchete().apply(this);
        }
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        outAVetorVariaveld(node);
    }

    public void inACorpoPrograma(ACorpoPrograma node)
    {
        defaultIn(node);
    }

    public void outACorpoPrograma(ACorpoPrograma node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACorpoPrograma(ACorpoPrograma node)
    {
        inACorpoPrograma(node);
        if(node.getComandos() != null)
        {
            node.getComandos().apply(this);
        }
        outACorpoPrograma(node);
    }

    public void inACTipo(ACTipo node)
    {
        defaultIn(node);
    }

    public void outACTipo(ACTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACTipo(ACTipo node)
    {
        inACTipo(node);
        if(node.getCaractere() != null)
        {
            node.getCaractere().apply(this);
        }
        outACTipo(node);
    }

    public void inAITipo(AITipo node)
    {
        defaultIn(node);
    }

    public void outAITipo(AITipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAITipo(AITipo node)
    {
        inAITipo(node);
        if(node.getInteiro() != null)
        {
            node.getInteiro().apply(this);
        }
        outAITipo(node);
    }

    public void inATipo(ATipo node)
    {
        defaultIn(node);
    }

    public void outATipo(ATipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATipo(ATipo node)
    {
        inATipo(node);
        if(node.getReal() != null)
        {
            node.getReal().apply(this);
        }
        outATipo(node);
    }

    public void inAStrValor(AStrValor node)
    {
        defaultIn(node);
    }

    public void outAStrValor(AStrValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStrValor(AStrValor node)
    {
        inAStrValor(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outAStrValor(node);
    }

    public void inANumValor(ANumValor node)
    {
        defaultIn(node);
    }

    public void outANumValor(ANumValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumValor(ANumValor node)
    {
        inANumValor(node);
        if(node.getNumero() != null)
        {
            node.getNumero().apply(this);
        }
        outANumValor(node);
    }

    public void inAValor(AValor node)
    {
        defaultIn(node);
    }

    public void outAValor(AValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAValor(AValor node)
    {
        inAValor(node);
        if(node.getReal() != null)
        {
            node.getReal().apply(this);
        }
        outAValor(node);
    }

    public void inAExp(AExp node)
    {
        defaultIn(node);
    }

    public void outAExp(AExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExp(AExp node)
    {
        inAExp(node);
        if(node.getTermo() != null)
        {
            node.getTermo().apply(this);
        }
        if(node.getSoma() != null)
        {
            node.getSoma().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAExp(node);
    }

    public void inATermExp(ATermExp node)
    {
        defaultIn(node);
    }

    public void outATermExp(ATermExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermExp(ATermExp node)
    {
        inATermExp(node);
        if(node.getTermo() != null)
        {
            node.getTermo().apply(this);
        }
        outATermExp(node);
    }

    public void inASoma(ASoma node)
    {
        defaultIn(node);
    }

    public void outASoma(ASoma node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASoma(ASoma node)
    {
        inASoma(node);
        if(node.getAdicao() != null)
        {
            node.getAdicao().apply(this);
        }
        outASoma(node);
    }

    public void inASubSoma(ASubSoma node)
    {
        defaultIn(node);
    }

    public void outASubSoma(ASubSoma node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASubSoma(ASubSoma node)
    {
        inASubSoma(node);
        if(node.getSubtracao() != null)
        {
            node.getSubtracao().apply(this);
        }
        outASubSoma(node);
    }

    public void inATermo(ATermo node)
    {
        defaultIn(node);
    }

    public void outATermo(ATermo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermo(ATermo node)
    {
        inATermo(node);
        if(node.getFator() != null)
        {
            node.getFator().apply(this);
        }
        if(node.getMult() != null)
        {
            node.getMult().apply(this);
        }
        if(node.getTermo() != null)
        {
            node.getTermo().apply(this);
        }
        outATermo(node);
    }

    public void inAFatTermo(AFatTermo node)
    {
        defaultIn(node);
    }

    public void outAFatTermo(AFatTermo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFatTermo(AFatTermo node)
    {
        inAFatTermo(node);
        if(node.getFator() != null)
        {
            node.getFator().apply(this);
        }
        outAFatTermo(node);
    }

    public void inAMult(AMult node)
    {
        defaultIn(node);
    }

    public void outAMult(AMult node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMult(AMult node)
    {
        inAMult(node);
        if(node.getMultiplicacao() != null)
        {
            node.getMultiplicacao().apply(this);
        }
        outAMult(node);
    }

    public void inADivMult(ADivMult node)
    {
        defaultIn(node);
    }

    public void outADivMult(ADivMult node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivMult(ADivMult node)
    {
        inADivMult(node);
        if(node.getDivisao() != null)
        {
            node.getDivisao().apply(this);
        }
        outADivMult(node);
    }

    public void inAFator(AFator node)
    {
        defaultIn(node);
    }

    public void outAFator(AFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFator(AFator node)
    {
        inAFator(node);
        if(node.getFechaparenteses() != null)
        {
            node.getFechaparenteses().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getAbreparenteses() != null)
        {
            node.getAbreparenteses().apply(this);
        }
        outAFator(node);
    }

    public void inANumFator(ANumFator node)
    {
        defaultIn(node);
    }

    public void outANumFator(ANumFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumFator(ANumFator node)
    {
        inANumFator(node);
        if(node.getNumero() != null)
        {
            node.getNumero().apply(this);
        }
        outANumFator(node);
    }

    public void inAIndFator(AIndFator node)
    {
        defaultIn(node);
    }

    public void outAIndFator(AIndFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIndFator(AIndFator node)
    {
        inAIndFator(node);
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        outAIndFator(node);
    }

    public void inAExpLogica(AExpLogica node)
    {
        defaultIn(node);
    }

    public void outAExpLogica(AExpLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpLogica(AExpLogica node)
    {
        inAExpLogica(node);
        if(node.getExppLogica() != null)
        {
            node.getExppLogica().apply(this);
        }
        outAExpLogica(node);
    }

    public void inANotExpLogica(ANotExpLogica node)
    {
        defaultIn(node);
    }

    public void outANotExpLogica(ANotExpLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANotExpLogica(ANotExpLogica node)
    {
        inANotExpLogica(node);
        if(node.getExpLogica() != null)
        {
            node.getExpLogica().apply(this);
        }
        if(node.getNao() != null)
        {
            node.getNao().apply(this);
        }
        outANotExpLogica(node);
    }

    public void inAExppLogica(AExppLogica node)
    {
        defaultIn(node);
    }

    public void outAExppLogica(AExppLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExppLogica(AExppLogica node)
    {
        inAExppLogica(node);
        if(node.getTermoLogica() != null)
        {
            node.getTermoLogica().apply(this);
        }
        if(node.getSimboloLogica() != null)
        {
            node.getSimboloLogica().apply(this);
        }
        if(node.getExppLogica() != null)
        {
            node.getExppLogica().apply(this);
        }
        outAExppLogica(node);
    }

    public void inATermoExppLogica(ATermoExppLogica node)
    {
        defaultIn(node);
    }

    public void outATermoExppLogica(ATermoExppLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermoExppLogica(ATermoExppLogica node)
    {
        inATermoExppLogica(node);
        if(node.getTermoLogica() != null)
        {
            node.getTermoLogica().apply(this);
        }
        outATermoExppLogica(node);
    }

    public void inAMaqSimboloLogica(AMaqSimboloLogica node)
    {
        defaultIn(node);
    }

    public void outAMaqSimboloLogica(AMaqSimboloLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaqSimboloLogica(AMaqSimboloLogica node)
    {
        inAMaqSimboloLogica(node);
        if(node.getMaiorque() != null)
        {
            node.getMaiorque().apply(this);
        }
        outAMaqSimboloLogica(node);
    }

    public void inAMeqSimboloLogica(AMeqSimboloLogica node)
    {
        defaultIn(node);
    }

    public void outAMeqSimboloLogica(AMeqSimboloLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMeqSimboloLogica(AMeqSimboloLogica node)
    {
        inAMeqSimboloLogica(node);
        if(node.getMenorque() != null)
        {
            node.getMenorque().apply(this);
        }
        outAMeqSimboloLogica(node);
    }

    public void inAIgSimboloLogica(AIgSimboloLogica node)
    {
        defaultIn(node);
    }

    public void outAIgSimboloLogica(AIgSimboloLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIgSimboloLogica(AIgSimboloLogica node)
    {
        inAIgSimboloLogica(node);
        if(node.getIgual() != null)
        {
            node.getIgual().apply(this);
        }
        outAIgSimboloLogica(node);
    }

    public void inAMaigSimboloLogica(AMaigSimboloLogica node)
    {
        defaultIn(node);
    }

    public void outAMaigSimboloLogica(AMaigSimboloLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaigSimboloLogica(AMaigSimboloLogica node)
    {
        inAMaigSimboloLogica(node);
        if(node.getMaiorigual() != null)
        {
            node.getMaiorigual().apply(this);
        }
        outAMaigSimboloLogica(node);
    }

    public void inAMeigSimboloLogica(AMeigSimboloLogica node)
    {
        defaultIn(node);
    }

    public void outAMeigSimboloLogica(AMeigSimboloLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMeigSimboloLogica(AMeigSimboloLogica node)
    {
        inAMeigSimboloLogica(node);
        if(node.getMenorigual() != null)
        {
            node.getMenorigual().apply(this);
        }
        outAMeigSimboloLogica(node);
    }

    public void inADifSimboloLogica(ADifSimboloLogica node)
    {
        defaultIn(node);
    }

    public void outADifSimboloLogica(ADifSimboloLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADifSimboloLogica(ADifSimboloLogica node)
    {
        inADifSimboloLogica(node);
        if(node.getDiferente() != null)
        {
            node.getDiferente().apply(this);
        }
        outADifSimboloLogica(node);
    }

    public void inAESimboloLogica(AESimboloLogica node)
    {
        defaultIn(node);
    }

    public void outAESimboloLogica(AESimboloLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAESimboloLogica(AESimboloLogica node)
    {
        inAESimboloLogica(node);
        if(node.getE() != null)
        {
            node.getE().apply(this);
        }
        outAESimboloLogica(node);
    }

    public void inAOuSimboloLogica(AOuSimboloLogica node)
    {
        defaultIn(node);
    }

    public void outAOuSimboloLogica(AOuSimboloLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOuSimboloLogica(AOuSimboloLogica node)
    {
        inAOuSimboloLogica(node);
        if(node.getOu() != null)
        {
            node.getOu().apply(this);
        }
        outAOuSimboloLogica(node);
    }

    public void inASimboloLogica(ASimboloLogica node)
    {
        defaultIn(node);
    }

    public void outASimboloLogica(ASimboloLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimboloLogica(ASimboloLogica node)
    {
        inASimboloLogica(node);
        if(node.getXor() != null)
        {
            node.getXor().apply(this);
        }
        outASimboloLogica(node);
    }

    public void inATermoLogica(ATermoLogica node)
    {
        defaultIn(node);
    }

    public void outATermoLogica(ATermoLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermoLogica(ATermoLogica node)
    {
        inATermoLogica(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outATermoLogica(node);
    }

    public void inAComandoSe(AComandoSe node)
    {
        defaultIn(node);
    }

    public void outAComandoSe(AComandoSe node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandoSe(AComandoSe node)
    {
        inAComandoSe(node);
        if(node.getFimse() != null)
        {
            node.getFimse().apply(this);
        }
        if(node.getComandos() != null)
        {
            node.getComandos().apply(this);
        }
        if(node.getEntao() != null)
        {
            node.getEntao().apply(this);
        }
        if(node.getFechaparenteses() != null)
        {
            node.getFechaparenteses().apply(this);
        }
        if(node.getExpLogica() != null)
        {
            node.getExpLogica().apply(this);
        }
        if(node.getAbreparenteses() != null)
        {
            node.getAbreparenteses().apply(this);
        }
        if(node.getSe() != null)
        {
            node.getSe().apply(this);
        }
        outAComandoSe(node);
    }

    public void inASeNaoComandoSe(ASeNaoComandoSe node)
    {
        defaultIn(node);
    }

    public void outASeNaoComandoSe(ASeNaoComandoSe node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASeNaoComandoSe(ASeNaoComandoSe node)
    {
        inASeNaoComandoSe(node);
        if(node.getComandoSenao() != null)
        {
            node.getComandoSenao().apply(this);
        }
        if(node.getComandos() != null)
        {
            node.getComandos().apply(this);
        }
        if(node.getEntao() != null)
        {
            node.getEntao().apply(this);
        }
        if(node.getFechaparenteses() != null)
        {
            node.getFechaparenteses().apply(this);
        }
        if(node.getExpLogica() != null)
        {
            node.getExpLogica().apply(this);
        }
        if(node.getAbreparenteses() != null)
        {
            node.getAbreparenteses().apply(this);
        }
        if(node.getSe() != null)
        {
            node.getSe().apply(this);
        }
        outASeNaoComandoSe(node);
    }

    public void inAComandoSenao(AComandoSenao node)
    {
        defaultIn(node);
    }

    public void outAComandoSenao(AComandoSenao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandoSenao(AComandoSenao node)
    {
        inAComandoSenao(node);
        if(node.getFimse() != null)
        {
            node.getFimse().apply(this);
        }
        if(node.getComandos() != null)
        {
            node.getComandos().apply(this);
        }
        if(node.getSenao() != null)
        {
            node.getSenao().apply(this);
        }
        outAComandoSenao(node);
    }

    public void inAVar(AVar node)
    {
        defaultIn(node);
    }

    public void outAVar(AVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVar(AVar node)
    {
        inAVar(node);
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        outAVar(node);
    }

    public void inAVetorVar(AVetorVar node)
    {
        defaultIn(node);
    }

    public void outAVetorVar(AVetorVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVetorVar(AVetorVar node)
    {
        inAVetorVar(node);
        if(node.getFecharcolchete() != null)
        {
            node.getFecharcolchete().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getAbrecolchete() != null)
        {
            node.getAbrecolchete().apply(this);
        }
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        outAVetorVar(node);
    }

    public void inALeiaComandos(ALeiaComandos node)
    {
        defaultIn(node);
    }

    public void outALeiaComandos(ALeiaComandos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALeiaComandos(ALeiaComandos node)
    {
        inALeiaComandos(node);
        if(node.getPontovirgula() != null)
        {
            node.getPontovirgula().apply(this);
        }
        if(node.getComandoLeia() != null)
        {
            node.getComandoLeia().apply(this);
        }
        if(node.getComandos() != null)
        {
            node.getComandos().apply(this);
        }
        outALeiaComandos(node);
    }

    public void inARepitaComandos(ARepitaComandos node)
    {
        defaultIn(node);
    }

    public void outARepitaComandos(ARepitaComandos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARepitaComandos(ARepitaComandos node)
    {
        inARepitaComandos(node);
        if(node.getPontovirgula() != null)
        {
            node.getPontovirgula().apply(this);
        }
        if(node.getComandoRepita() != null)
        {
            node.getComandoRepita().apply(this);
        }
        if(node.getComandos() != null)
        {
            node.getComandos().apply(this);
        }
        outARepitaComandos(node);
    }

    public void inAEnquantoComandos(AEnquantoComandos node)
    {
        defaultIn(node);
    }

    public void outAEnquantoComandos(AEnquantoComandos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEnquantoComandos(AEnquantoComandos node)
    {
        inAEnquantoComandos(node);
        if(node.getPontovirgula() != null)
        {
            node.getPontovirgula().apply(this);
        }
        if(node.getComandoEnquanto() != null)
        {
            node.getComandoEnquanto().apply(this);
        }
        if(node.getComandos() != null)
        {
            node.getComandos().apply(this);
        }
        outAEnquantoComandos(node);
    }

    public void inAAvaliarComandos(AAvaliarComandos node)
    {
        defaultIn(node);
    }

    public void outAAvaliarComandos(AAvaliarComandos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAvaliarComandos(AAvaliarComandos node)
    {
        inAAvaliarComandos(node);
        if(node.getPontovirgula() != null)
        {
            node.getPontovirgula().apply(this);
        }
        if(node.getComandoAvalie() != null)
        {
            node.getComandoAvalie().apply(this);
        }
        if(node.getComandos() != null)
        {
            node.getComandos().apply(this);
        }
        outAAvaliarComandos(node);
    }

    public void inAEscritaComandos(AEscritaComandos node)
    {
        defaultIn(node);
    }

    public void outAEscritaComandos(AEscritaComandos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEscritaComandos(AEscritaComandos node)
    {
        inAEscritaComandos(node);
        if(node.getPontovirgula() != null)
        {
            node.getPontovirgula().apply(this);
        }
        if(node.getComandoEscrita() != null)
        {
            node.getComandoEscrita().apply(this);
        }
        if(node.getComandos() != null)
        {
            node.getComandos().apply(this);
        }
        outAEscritaComandos(node);
    }

    public void inASeComandos(ASeComandos node)
    {
        defaultIn(node);
    }

    public void outASeComandos(ASeComandos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASeComandos(ASeComandos node)
    {
        inASeComandos(node);
        if(node.getPontovirgula() != null)
        {
            node.getPontovirgula().apply(this);
        }
        if(node.getComandoSe() != null)
        {
            node.getComandoSe().apply(this);
        }
        if(node.getComandos() != null)
        {
            node.getComandos().apply(this);
        }
        outASeComandos(node);
    }

    public void inAAtribuidaComandos(AAtribuidaComandos node)
    {
        defaultIn(node);
    }

    public void outAAtribuidaComandos(AAtribuidaComandos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAtribuidaComandos(AAtribuidaComandos node)
    {
        inAAtribuidaComandos(node);
        if(node.getPontovirgula() != null)
        {
            node.getPontovirgula().apply(this);
        }
        if(node.getComandoAtribuicao() != null)
        {
            node.getComandoAtribuicao().apply(this);
        }
        if(node.getComandos() != null)
        {
            node.getComandos().apply(this);
        }
        outAAtribuidaComandos(node);
    }

    public void inAParaComandos(AParaComandos node)
    {
        defaultIn(node);
    }

    public void outAParaComandos(AParaComandos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParaComandos(AParaComandos node)
    {
        inAParaComandos(node);
        if(node.getPontovirgula() != null)
        {
            node.getPontovirgula().apply(this);
        }
        if(node.getComandoPara() != null)
        {
            node.getComandoPara().apply(this);
        }
        if(node.getComandos() != null)
        {
            node.getComandos().apply(this);
        }
        outAParaComandos(node);
    }

    public void inAVazioComandos(AVazioComandos node)
    {
        defaultIn(node);
    }

    public void outAVazioComandos(AVazioComandos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVazioComandos(AVazioComandos node)
    {
        inAVazioComandos(node);
        outAVazioComandos(node);
    }

    public void inAComandoRepita(AComandoRepita node)
    {
        defaultIn(node);
    }

    public void outAComandoRepita(AComandoRepita node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandoRepita(AComandoRepita node)
    {
        inAComandoRepita(node);
        if(node.getFechaparenteses() != null)
        {
            node.getFechaparenteses().apply(this);
        }
        if(node.getExpLogica() != null)
        {
            node.getExpLogica().apply(this);
        }
        if(node.getAbreparenteses() != null)
        {
            node.getAbreparenteses().apply(this);
        }
        if(node.getAte() != null)
        {
            node.getAte().apply(this);
        }
        if(node.getComandos() != null)
        {
            node.getComandos().apply(this);
        }
        if(node.getRepita() != null)
        {
            node.getRepita().apply(this);
        }
        outAComandoRepita(node);
    }

    public void inAComandoEnquanto(AComandoEnquanto node)
    {
        defaultIn(node);
    }

    public void outAComandoEnquanto(AComandoEnquanto node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandoEnquanto(AComandoEnquanto node)
    {
        inAComandoEnquanto(node);
        if(node.getFimenquanto() != null)
        {
            node.getFimenquanto().apply(this);
        }
        if(node.getComandos() != null)
        {
            node.getComandos().apply(this);
        }
        if(node.getFaca() != null)
        {
            node.getFaca().apply(this);
        }
        if(node.getFechaparenteses() != null)
        {
            node.getFechaparenteses().apply(this);
        }
        if(node.getExpLogica() != null)
        {
            node.getExpLogica().apply(this);
        }
        if(node.getAbreparenteses() != null)
        {
            node.getAbreparenteses().apply(this);
        }
        if(node.getEnquanto() != null)
        {
            node.getEnquanto().apply(this);
        }
        outAComandoEnquanto(node);
    }

    public void inACasos(ACasos node)
    {
        defaultIn(node);
    }

    public void outACasos(ACasos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACasos(ACasos node)
    {
        inACasos(node);
        if(node.getComandos() != null)
        {
            node.getComandos().apply(this);
        }
        if(node.getDoispontos() != null)
        {
            node.getDoispontos().apply(this);
        }
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        if(node.getCaso() != null)
        {
            node.getCaso().apply(this);
        }
        if(node.getCasos() != null)
        {
            node.getCasos().apply(this);
        }
        outACasos(node);
    }

    public void inAVazioCasos(AVazioCasos node)
    {
        defaultIn(node);
    }

    public void outAVazioCasos(AVazioCasos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVazioCasos(AVazioCasos node)
    {
        inAVazioCasos(node);
        outAVazioCasos(node);
    }

    public void inAAvsenao(AAvsenao node)
    {
        defaultIn(node);
    }

    public void outAAvsenao(AAvsenao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAvsenao(AAvsenao node)
    {
        inAAvsenao(node);
        if(node.getComandos() != null)
        {
            node.getComandos().apply(this);
        }
        if(node.getDoispontos() != null)
        {
            node.getDoispontos().apply(this);
        }
        if(node.getSenao() != null)
        {
            node.getSenao().apply(this);
        }
        outAAvsenao(node);
    }

    public void inAVazioAvsenao(AVazioAvsenao node)
    {
        defaultIn(node);
    }

    public void outAVazioAvsenao(AVazioAvsenao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVazioAvsenao(AVazioAvsenao node)
    {
        inAVazioAvsenao(node);
        outAVazioAvsenao(node);
    }

    public void inAComandoAvalie(AComandoAvalie node)
    {
        defaultIn(node);
    }

    public void outAComandoAvalie(AComandoAvalie node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandoAvalie(AComandoAvalie node)
    {
        inAComandoAvalie(node);
        if(node.getFimavalie() != null)
        {
            node.getFimavalie().apply(this);
        }
        if(node.getAvsenao() != null)
        {
            node.getAvsenao().apply(this);
        }
        if(node.getCasos() != null)
        {
            node.getCasos().apply(this);
        }
        if(node.getComandos() != null)
        {
            node.getComandos().apply(this);
        }
        if(node.getDoispontos() != null)
        {
            node.getDoispontos().apply(this);
        }
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        if(node.getCaso() != null)
        {
            node.getCaso().apply(this);
        }
        if(node.getFechaparenteses() != null)
        {
            node.getFechaparenteses().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getAbreparenteses() != null)
        {
            node.getAbreparenteses().apply(this);
        }
        if(node.getAvalie() != null)
        {
            node.getAvalie().apply(this);
        }
        outAComandoAvalie(node);
    }

    public void inAParatipos(AParatipos node)
    {
        defaultIn(node);
    }

    public void outAParatipos(AParatipos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParatipos(AParatipos node)
    {
        inAParatipos(node);
        if(node.getNumero() != null)
        {
            node.getNumero().apply(this);
        }
        outAParatipos(node);
    }

    public void inAVarParatipos(AVarParatipos node)
    {
        defaultIn(node);
    }

    public void outAVarParatipos(AVarParatipos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarParatipos(AVarParatipos node)
    {
        inAVarParatipos(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outAVarParatipos(node);
    }

    public void inAAparatipos(AAparatipos node)
    {
        defaultIn(node);
    }

    public void outAAparatipos(AAparatipos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAparatipos(AAparatipos node)
    {
        inAAparatipos(node);
        if(node.getParatipos() != null)
        {
            node.getParatipos().apply(this);
        }
        outAAparatipos(node);
    }

    public void inABparatipos(ABparatipos node)
    {
        defaultIn(node);
    }

    public void outABparatipos(ABparatipos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABparatipos(ABparatipos node)
    {
        inABparatipos(node);
        if(node.getParatipos() != null)
        {
            node.getParatipos().apply(this);
        }
        outABparatipos(node);
    }

    public void inAComandoPara(AComandoPara node)
    {
        defaultIn(node);
    }

    public void outAComandoPara(AComandoPara node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandoPara(AComandoPara node)
    {
        inAComandoPara(node);
        if(node.getFimpara() != null)
        {
            node.getFimpara().apply(this);
        }
        if(node.getComandos() != null)
        {
            node.getComandos().apply(this);
        }
        if(node.getFaca() != null)
        {
            node.getFaca().apply(this);
        }
        if(node.getAparatipos() != null)
        {
            node.getAparatipos().apply(this);
        }
        if(node.getAte() != null)
        {
            node.getAte().apply(this);
        }
        if(node.getParatipos() != null)
        {
            node.getParatipos().apply(this);
        }
        if(node.getDe() != null)
        {
            node.getDe().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getPara() != null)
        {
            node.getPara().apply(this);
        }
        outAComandoPara(node);
    }

    public void inAPassoComandoPara(APassoComandoPara node)
    {
        defaultIn(node);
    }

    public void outAPassoComandoPara(APassoComandoPara node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPassoComandoPara(APassoComandoPara node)
    {
        inAPassoComandoPara(node);
        if(node.getFimpara() != null)
        {
            node.getFimpara().apply(this);
        }
        if(node.getComandos() != null)
        {
            node.getComandos().apply(this);
        }
        if(node.getFaca() != null)
        {
            node.getFaca().apply(this);
        }
        if(node.getBparatipos() != null)
        {
            node.getBparatipos().apply(this);
        }
        if(node.getAte() != null)
        {
            node.getAte().apply(this);
        }
        if(node.getAparatipos() != null)
        {
            node.getAparatipos().apply(this);
        }
        if(node.getPasso() != null)
        {
            node.getPasso().apply(this);
        }
        if(node.getParatipos() != null)
        {
            node.getParatipos().apply(this);
        }
        if(node.getDe() != null)
        {
            node.getDe().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getPara() != null)
        {
            node.getPara().apply(this);
        }
        outAPassoComandoPara(node);
    }

    public void inAComandoEscrita(AComandoEscrita node)
    {
        defaultIn(node);
    }

    public void outAComandoEscrita(AComandoEscrita node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandoEscrita(AComandoEscrita node)
    {
        inAComandoEscrita(node);
        if(node.getFechaparenteses() != null)
        {
            node.getFechaparenteses().apply(this);
        }
        if(node.getExpLogica() != null)
        {
            node.getExpLogica().apply(this);
        }
        if(node.getAbreparenteses() != null)
        {
            node.getAbreparenteses().apply(this);
        }
        if(node.getEscreva() != null)
        {
            node.getEscreva().apply(this);
        }
        outAComandoEscrita(node);
    }

    public void inAStrComandoEscrita(AStrComandoEscrita node)
    {
        defaultIn(node);
    }

    public void outAStrComandoEscrita(AStrComandoEscrita node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStrComandoEscrita(AStrComandoEscrita node)
    {
        inAStrComandoEscrita(node);
        if(node.getFechaparenteses() != null)
        {
            node.getFechaparenteses().apply(this);
        }
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        if(node.getAbreparenteses() != null)
        {
            node.getAbreparenteses().apply(this);
        }
        if(node.getEscreva() != null)
        {
            node.getEscreva().apply(this);
        }
        outAStrComandoEscrita(node);
    }

    public void inAComandoLeia(AComandoLeia node)
    {
        defaultIn(node);
    }

    public void outAComandoLeia(AComandoLeia node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandoLeia(AComandoLeia node)
    {
        inAComandoLeia(node);
        if(node.getFechaparenteses() != null)
        {
            node.getFechaparenteses().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getAbreparenteses() != null)
        {
            node.getAbreparenteses().apply(this);
        }
        if(node.getLeia() != null)
        {
            node.getLeia().apply(this);
        }
        outAComandoLeia(node);
    }

    public void inAComandoAtribuicao(AComandoAtribuicao node)
    {
        defaultIn(node);
    }

    public void outAComandoAtribuicao(AComandoAtribuicao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandoAtribuicao(AComandoAtribuicao node)
    {
        inAComandoAtribuicao(node);
        if(node.getExpLogica() != null)
        {
            node.getExpLogica().apply(this);
        }
        if(node.getAtribuicao() != null)
        {
            node.getAtribuicao().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outAComandoAtribuicao(node);
    }
}
