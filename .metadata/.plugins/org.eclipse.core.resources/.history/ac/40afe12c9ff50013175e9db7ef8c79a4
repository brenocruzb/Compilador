/* This file was generated by SableCC (http://www.sablecc.org/). */

package parser;

import lexer.*;
import node.*;
import analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList<Object> listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PTotal node1 = (PTotal) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce ATotal */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list, false);
            }
            break;
            case 1: /* reduce ASuperDeclaracaoVariavel */
            {
                ArrayList<Object> list = new1();
                push(goTo(1), list, false);
            }
            break;
            case 2: /* reduce AVazioSuperDeclaracaoVariavel */
            {
                ArrayList<Object> list = new2();
                push(goTo(1), list, false);
            }
            break;
            case 3: /* reduce AConjuntoDeclaracaoVariavel */
            {
                ArrayList<Object> list = new3();
                push(goTo(2), list, false);
            }
            break;
            case 4: /* reduce ADconstanteDeclaracaoVariavel */
            {
                ArrayList<Object> list = new4();
                push(goTo(2), list, false);
            }
            break;
            case 5: /* reduce ADeclaracaoVariavel */
            {
                ArrayList<Object> list = new5();
                push(goTo(2), list, false);
            }
            break;
            case 6: /* reduce AEncadeamentoDeclaracaoVariavelVirgula */
            {
                ArrayList<Object> list = new6();
                push(goTo(3), list, false);
            }
            break;
            case 7: /* reduce ADeclaracaoVariavelVirgula */
            {
                ArrayList<Object> list = new7();
                push(goTo(3), list, false);
            }
            break;
            case 8: /* reduce AVariavel */
            {
                ArrayList<Object> list = new8();
                push(goTo(4), list, false);
            }
            break;
            case 9: /* reduce AVetorVariavel */
            {
                ArrayList<Object> list = new9();
                push(goTo(4), list, false);
            }
            break;
            case 10: /* reduce ACorpoPrograma */
            {
                ArrayList<Object> list = new10();
                push(goTo(5), list, false);
            }
            break;
            case 11: /* reduce AExpCorpoPrograma */
            {
                ArrayList<Object> list = new11();
                push(goTo(5), list, false);
            }
            break;
            case 12: /* reduce AVazioCorpoPrograma */
            {
                ArrayList<Object> list = new12();
                push(goTo(5), list, false);
            }
            break;
            case 13: /* reduce ACTipo */
            {
                ArrayList<Object> list = new13();
                push(goTo(6), list, false);
            }
            break;
            case 14: /* reduce AITipo */
            {
                ArrayList<Object> list = new14();
                push(goTo(6), list, false);
            }
            break;
            case 15: /* reduce ATipo */
            {
                ArrayList<Object> list = new15();
                push(goTo(6), list, false);
            }
            break;
            case 16: /* reduce AStrValor */
            {
                ArrayList<Object> list = new16();
                push(goTo(7), list, false);
            }
            break;
            case 17: /* reduce ANumValor */
            {
                ArrayList<Object> list = new17();
                push(goTo(7), list, false);
            }
            break;
            case 18: /* reduce AValor */
            {
                ArrayList<Object> list = new18();
                push(goTo(7), list, false);
            }
            break;
            case 19: /* reduce AExp */
            {
                ArrayList<Object> list = new19();
                push(goTo(8), list, false);
            }
            break;
            case 20: /* reduce ATermExp */
            {
                ArrayList<Object> list = new20();
                push(goTo(8), list, false);
            }
            break;
            case 21: /* reduce ASoma */
            {
                ArrayList<Object> list = new21();
                push(goTo(9), list, false);
            }
            break;
            case 22: /* reduce ASubSoma */
            {
                ArrayList<Object> list = new22();
                push(goTo(9), list, false);
            }
            break;
            case 23: /* reduce ATermo */
            {
                ArrayList<Object> list = new23();
                push(goTo(10), list, false);
            }
            break;
            case 24: /* reduce AFatTermo */
            {
                ArrayList<Object> list = new24();
                push(goTo(10), list, false);
            }
            break;
            case 25: /* reduce AMult */
            {
                ArrayList<Object> list = new25();
                push(goTo(11), list, false);
            }
            break;
            case 26: /* reduce ADivMult */
            {
                ArrayList<Object> list = new26();
                push(goTo(11), list, false);
            }
            break;
            case 27: /* reduce AFator */
            {
                ArrayList<Object> list = new27();
                push(goTo(12), list, false);
            }
            break;
            case 28: /* reduce ANumFator */
            {
                ArrayList<Object> list = new28();
                push(goTo(12), list, false);
            }
            break;
            case 29: /* reduce AIndFator */
            {
                ArrayList<Object> list = new29();
                push(goTo(12), list, false);
            }
            break;
            case 30: /* reduce AExpLogica */
            {
                ArrayList<Object> list = new30();
                push(goTo(13), list, false);
            }
            break;
            case 31: /* reduce ANotExpLogica */
            {
                ArrayList<Object> list = new31();
                push(goTo(13), list, false);
            }
            break;
            case 32: /* reduce AExppLogica */
            {
                ArrayList<Object> list = new32();
                push(goTo(14), list, false);
            }
            break;
            case 33: /* reduce ATermExppLogica */
            {
                ArrayList<Object> list = new33();
                push(goTo(14), list, false);
            }
            break;
            case 34: /* reduce AMaqSimboloLogica */
            {
                ArrayList<Object> list = new34();
                push(goTo(15), list, false);
            }
            break;
            case 35: /* reduce AMeqSimboloLogica */
            {
                ArrayList<Object> list = new35();
                push(goTo(15), list, false);
            }
            break;
            case 36: /* reduce AIgSimboloLogica */
            {
                ArrayList<Object> list = new36();
                push(goTo(15), list, false);
            }
            break;
            case 37: /* reduce AMaigSimboloLogica */
            {
                ArrayList<Object> list = new37();
                push(goTo(15), list, false);
            }
            break;
            case 38: /* reduce AMeigSimboloLogica */
            {
                ArrayList<Object> list = new38();
                push(goTo(15), list, false);
            }
            break;
            case 39: /* reduce ADifSimboloLogica */
            {
                ArrayList<Object> list = new39();
                push(goTo(15), list, false);
            }
            break;
            case 40: /* reduce AESimboloLogica */
            {
                ArrayList<Object> list = new40();
                push(goTo(15), list, false);
            }
            break;
            case 41: /* reduce AOuSimboloLogica */
            {
                ArrayList<Object> list = new41();
                push(goTo(15), list, false);
            }
            break;
            case 42: /* reduce ASimboloLogica */
            {
                ArrayList<Object> list = new42();
                push(goTo(15), list, false);
            }
            break;
            case 43: /* reduce ATermoLogica */
            {
                ArrayList<Object> list = new43();
                push(goTo(16), list, false);
            }
            break;
            case 44: /* reduce AComandoSe */
            {
                ArrayList<Object> list = new44();
                push(goTo(17), list, false);
            }
            break;
            case 45: /* reduce ASeNaoComandoSe */
            {
                ArrayList<Object> list = new45();
                push(goTo(17), list, false);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce ATotal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTotal ptotalNode1;
        {
            // Block
        TPrograma tprogramaNode2;
        TIdentificador tidentificadorNode3;
        TPontovirgula tpontovirgulaNode4;
        TInicio tinicioNode5;
        PSuperDeclaracaoVariavel psuperdeclaracaovariavelNode6;
        PCorpoPrograma pcorpoprogramaNode7;
        TFim tfimNode8;
        TPonto tpontoNode9;
        tprogramaNode2 = (TPrograma)nodeArrayList1.get(0);
        tidentificadorNode3 = (TIdentificador)nodeArrayList2.get(0);
        tpontovirgulaNode4 = (TPontovirgula)nodeArrayList3.get(0);
        tinicioNode5 = (TInicio)nodeArrayList4.get(0);
        psuperdeclaracaovariavelNode6 = (PSuperDeclaracaoVariavel)nodeArrayList5.get(0);
        pcorpoprogramaNode7 = (PCorpoPrograma)nodeArrayList6.get(0);
        tfimNode8 = (TFim)nodeArrayList7.get(0);
        tpontoNode9 = (TPonto)nodeArrayList8.get(0);

        ptotalNode1 = new ATotal(tprogramaNode2, tidentificadorNode3, tpontovirgulaNode4, tinicioNode5, psuperdeclaracaovariavelNode6, pcorpoprogramaNode7, tfimNode8, tpontoNode9);
        }
	nodeList.add(ptotalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce ASuperDeclaracaoVariavel */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSuperDeclaracaoVariavel psuperdeclaracaovariavelNode1;
        {
            // Block
        PSuperDeclaracaoVariavel psuperdeclaracaovariavelNode2;
        PDeclaracaoVariavel pdeclaracaovariavelNode3;
        psuperdeclaracaovariavelNode2 = (PSuperDeclaracaoVariavel)nodeArrayList1.get(0);
        pdeclaracaovariavelNode3 = (PDeclaracaoVariavel)nodeArrayList2.get(0);

        psuperdeclaracaovariavelNode1 = new ASuperDeclaracaoVariavel(psuperdeclaracaovariavelNode2, pdeclaracaovariavelNode3);
        }
	nodeList.add(psuperdeclaracaovariavelNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AVazioSuperDeclaracaoVariavel */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PSuperDeclaracaoVariavel psuperdeclaracaovariavelNode1;
        {
            // Block

        psuperdeclaracaovariavelNode1 = new AVazioSuperDeclaracaoVariavel();
        }
	nodeList.add(psuperdeclaracaovariavelNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AConjuntoDeclaracaoVariavel */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaracaoVariavel pdeclaracaovariavelNode1;
        {
            // Block
        PTipo ptipoNode2;
        TDoispontos tdoispontosNode3;
        PDeclaracaoVariavelVirgula pdeclaracaovariavelvirgulaNode4;
        PVariavel pvariavelNode5;
        TPontovirgula tpontovirgulaNode6;
        ptipoNode2 = (PTipo)nodeArrayList1.get(0);
        tdoispontosNode3 = (TDoispontos)nodeArrayList2.get(0);
        pdeclaracaovariavelvirgulaNode4 = (PDeclaracaoVariavelVirgula)nodeArrayList3.get(0);
        pvariavelNode5 = (PVariavel)nodeArrayList4.get(0);
        tpontovirgulaNode6 = (TPontovirgula)nodeArrayList5.get(0);

        pdeclaracaovariavelNode1 = new AConjuntoDeclaracaoVariavel(ptipoNode2, tdoispontosNode3, pdeclaracaovariavelvirgulaNode4, pvariavelNode5, tpontovirgulaNode6);
        }
	nodeList.add(pdeclaracaovariavelNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce ADconstanteDeclaracaoVariavel */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaracaoVariavel pdeclaracaovariavelNode1;
        {
            // Block
        TConst tconstNode2;
        TIdentificador tidentificadorNode3;
        PValor pvalorNode4;
        TPontovirgula tpontovirgulaNode5;
        tconstNode2 = (TConst)nodeArrayList1.get(0);
        tidentificadorNode3 = (TIdentificador)nodeArrayList2.get(0);
        pvalorNode4 = (PValor)nodeArrayList3.get(0);
        tpontovirgulaNode5 = (TPontovirgula)nodeArrayList4.get(0);

        pdeclaracaovariavelNode1 = new ADconstanteDeclaracaoVariavel(tconstNode2, tidentificadorNode3, pvalorNode4, tpontovirgulaNode5);
        }
	nodeList.add(pdeclaracaovariavelNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce ADeclaracaoVariavel */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaracaoVariavel pdeclaracaovariavelNode1;
        {
            // Block
        PTipo ptipoNode2;
        TDoispontos tdoispontosNode3;
        PVariavel pvariavelNode4;
        TPontovirgula tpontovirgulaNode5;
        ptipoNode2 = (PTipo)nodeArrayList1.get(0);
        tdoispontosNode3 = (TDoispontos)nodeArrayList2.get(0);
        pvariavelNode4 = (PVariavel)nodeArrayList3.get(0);
        tpontovirgulaNode5 = (TPontovirgula)nodeArrayList4.get(0);

        pdeclaracaovariavelNode1 = new ADeclaracaoVariavel(ptipoNode2, tdoispontosNode3, pvariavelNode4, tpontovirgulaNode5);
        }
	nodeList.add(pdeclaracaovariavelNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AEncadeamentoDeclaracaoVariavelVirgula */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaracaoVariavelVirgula pdeclaracaovariavelvirgulaNode1;
        {
            // Block
        PDeclaracaoVariavelVirgula pdeclaracaovariavelvirgulaNode2;
        PVariavel pvariavelNode3;
        TVirgula tvirgulaNode4;
        pdeclaracaovariavelvirgulaNode2 = (PDeclaracaoVariavelVirgula)nodeArrayList1.get(0);
        pvariavelNode3 = (PVariavel)nodeArrayList2.get(0);
        tvirgulaNode4 = (TVirgula)nodeArrayList3.get(0);

        pdeclaracaovariavelvirgulaNode1 = new AEncadeamentoDeclaracaoVariavelVirgula(pdeclaracaovariavelvirgulaNode2, pvariavelNode3, tvirgulaNode4);
        }
	nodeList.add(pdeclaracaovariavelvirgulaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce ADeclaracaoVariavelVirgula */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaracaoVariavelVirgula pdeclaracaovariavelvirgulaNode1;
        {
            // Block
        PVariavel pvariavelNode2;
        TVirgula tvirgulaNode3;
        pvariavelNode2 = (PVariavel)nodeArrayList1.get(0);
        tvirgulaNode3 = (TVirgula)nodeArrayList2.get(0);

        pdeclaracaovariavelvirgulaNode1 = new ADeclaracaoVariavelVirgula(pvariavelNode2, tvirgulaNode3);
        }
	nodeList.add(pdeclaracaovariavelvirgulaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce AVariavel */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVariavel pvariavelNode1;
        {
            // Block
        TIdentificador tidentificadorNode2;
        tidentificadorNode2 = (TIdentificador)nodeArrayList1.get(0);

        pvariavelNode1 = new AVariavel(tidentificadorNode2);
        }
	nodeList.add(pvariavelNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AVetorVariavel */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVariavel pvariavelNode1;
        {
            // Block
        TIdentificador tidentificadorNode2;
        TAbrecolchete tabrecolcheteNode3;
        TNumero tnumeroNode4;
        TFecharcolchete tfecharcolcheteNode5;
        tidentificadorNode2 = (TIdentificador)nodeArrayList1.get(0);
        tabrecolcheteNode3 = (TAbrecolchete)nodeArrayList2.get(0);
        tnumeroNode4 = (TNumero)nodeArrayList3.get(0);
        tfecharcolcheteNode5 = (TFecharcolchete)nodeArrayList4.get(0);

        pvariavelNode1 = new AVetorVariavel(tidentificadorNode2, tabrecolcheteNode3, tnumeroNode4, tfecharcolcheteNode5);
        }
	nodeList.add(pvariavelNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce ACorpoPrograma */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCorpoPrograma pcorpoprogramaNode1;
        {
            // Block
        PComandoSe pcomandoseNode2;
        pcomandoseNode2 = (PComandoSe)nodeArrayList1.get(0);

        pcorpoprogramaNode1 = new ACorpoPrograma(pcomandoseNode2);
        }
	nodeList.add(pcorpoprogramaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce AExpCorpoPrograma */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCorpoPrograma pcorpoprogramaNode1;
        {
            // Block
        PExpLogica pexplogicaNode2;
        TPontovirgula tpontovirgulaNode3;
        pexplogicaNode2 = (PExpLogica)nodeArrayList1.get(0);
        tpontovirgulaNode3 = (TPontovirgula)nodeArrayList2.get(0);

        pcorpoprogramaNode1 = new AExpCorpoPrograma(pexplogicaNode2, tpontovirgulaNode3);
        }
	nodeList.add(pcorpoprogramaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce AVazioCorpoPrograma */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PCorpoPrograma pcorpoprogramaNode1;
        {
            // Block

        pcorpoprogramaNode1 = new AVazioCorpoPrograma();
        }
	nodeList.add(pcorpoprogramaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce ACTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipo ptipoNode1;
        {
            // Block
        TCaractere tcaractereNode2;
        tcaractereNode2 = (TCaractere)nodeArrayList1.get(0);

        ptipoNode1 = new ACTipo(tcaractereNode2);
        }
	nodeList.add(ptipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce AITipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipo ptipoNode1;
        {
            // Block
        TInteiro tinteiroNode2;
        tinteiroNode2 = (TInteiro)nodeArrayList1.get(0);

        ptipoNode1 = new AITipo(tinteiroNode2);
        }
	nodeList.add(ptipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce ATipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipo ptipoNode1;
        {
            // Block
        TReal trealNode2;
        trealNode2 = (TReal)nodeArrayList1.get(0);

        ptipoNode1 = new ATipo(trealNode2);
        }
	nodeList.add(ptipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce AStrValor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValor pvalorNode1;
        {
            // Block
        TString tstringNode2;
        tstringNode2 = (TString)nodeArrayList1.get(0);

        pvalorNode1 = new AStrValor(tstringNode2);
        }
	nodeList.add(pvalorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce ANumValor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValor pvalorNode1;
        {
            // Block
        TNumero tnumeroNode2;
        tnumeroNode2 = (TNumero)nodeArrayList1.get(0);

        pvalorNode1 = new ANumValor(tnumeroNode2);
        }
	nodeList.add(pvalorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce AValor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValor pvalorNode1;
        {
            // Block
        TReal trealNode2;
        trealNode2 = (TReal)nodeArrayList1.get(0);

        pvalorNode1 = new AValor(trealNode2);
        }
	nodeList.add(pvalorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce AExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PSoma psomaNode3;
        PTermo ptermoNode4;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        psomaNode3 = (PSoma)nodeArrayList2.get(0);
        ptermoNode4 = (PTermo)nodeArrayList3.get(0);

        pexpNode1 = new AExp(pexpNode2, psomaNode3, ptermoNode4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce ATermExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PTermo ptermoNode2;
        ptermoNode2 = (PTermo)nodeArrayList1.get(0);

        pexpNode1 = new ATermExp(ptermoNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce ASoma */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSoma psomaNode1;
        {
            // Block
        TAdicao tadicaoNode2;
        tadicaoNode2 = (TAdicao)nodeArrayList1.get(0);

        psomaNode1 = new ASoma(tadicaoNode2);
        }
	nodeList.add(psomaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce ASubSoma */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSoma psomaNode1;
        {
            // Block
        TSubtracao tsubtracaoNode2;
        tsubtracaoNode2 = (TSubtracao)nodeArrayList1.get(0);

        psomaNode1 = new ASubSoma(tsubtracaoNode2);
        }
	nodeList.add(psomaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce ATermo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTermo ptermoNode1;
        {
            // Block
        PTermo ptermoNode2;
        PMult pmultNode3;
        PFator pfatorNode4;
        ptermoNode2 = (PTermo)nodeArrayList1.get(0);
        pmultNode3 = (PMult)nodeArrayList2.get(0);
        pfatorNode4 = (PFator)nodeArrayList3.get(0);

        ptermoNode1 = new ATermo(ptermoNode2, pmultNode3, pfatorNode4);
        }
	nodeList.add(ptermoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce AFatTermo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTermo ptermoNode1;
        {
            // Block
        PFator pfatorNode2;
        pfatorNode2 = (PFator)nodeArrayList1.get(0);

        ptermoNode1 = new AFatTermo(pfatorNode2);
        }
	nodeList.add(ptermoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce AMult */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMult pmultNode1;
        {
            // Block
        TMultiplicacao tmultiplicacaoNode2;
        tmultiplicacaoNode2 = (TMultiplicacao)nodeArrayList1.get(0);

        pmultNode1 = new AMult(tmultiplicacaoNode2);
        }
	nodeList.add(pmultNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce ADivMult */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMult pmultNode1;
        {
            // Block
        TDivisao tdivisaoNode2;
        tdivisaoNode2 = (TDivisao)nodeArrayList1.get(0);

        pmultNode1 = new ADivMult(tdivisaoNode2);
        }
	nodeList.add(pmultNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce AFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFator pfatorNode1;
        {
            // Block
        TAbreparenteses tabreparentesesNode2;
        PExp pexpNode3;
        TFechaparenteses tfechaparentesesNode4;
        tabreparentesesNode2 = (TAbreparenteses)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList2.get(0);
        tfechaparentesesNode4 = (TFechaparenteses)nodeArrayList3.get(0);

        pfatorNode1 = new AFator(tabreparentesesNode2, pexpNode3, tfechaparentesesNode4);
        }
	nodeList.add(pfatorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce ANumFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFator pfatorNode1;
        {
            // Block
        TNumero tnumeroNode2;
        tnumeroNode2 = (TNumero)nodeArrayList1.get(0);

        pfatorNode1 = new ANumFator(tnumeroNode2);
        }
	nodeList.add(pfatorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce AIndFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFator pfatorNode1;
        {
            // Block
        TIdentificador tidentificadorNode2;
        tidentificadorNode2 = (TIdentificador)nodeArrayList1.get(0);

        pfatorNode1 = new AIndFator(tidentificadorNode2);
        }
	nodeList.add(pfatorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce AExpLogica */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica pexplogicaNode1;
        {
            // Block
        PExppLogica pexpplogicaNode2;
        pexpplogicaNode2 = (PExppLogica)nodeArrayList1.get(0);

        pexplogicaNode1 = new AExpLogica(pexpplogicaNode2);
        }
	nodeList.add(pexplogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce ANotExpLogica */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica pexplogicaNode1;
        {
            // Block
        TNao tnaoNode2;
        PExpLogica pexplogicaNode3;
        tnaoNode2 = (TNao)nodeArrayList1.get(0);
        pexplogicaNode3 = (PExpLogica)nodeArrayList2.get(0);

        pexplogicaNode1 = new ANotExpLogica(tnaoNode2, pexplogicaNode3);
        }
	nodeList.add(pexplogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce AExppLogica */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExppLogica pexpplogicaNode1;
        {
            // Block
        PExppLogica pexpplogicaNode2;
        PSimboloLogica psimbolologicaNode3;
        PTermoLogica ptermologicaNode4;
        pexpplogicaNode2 = (PExppLogica)nodeArrayList1.get(0);
        psimbolologicaNode3 = (PSimboloLogica)nodeArrayList2.get(0);
        ptermologicaNode4 = (PTermoLogica)nodeArrayList3.get(0);

        pexpplogicaNode1 = new AExppLogica(pexpplogicaNode2, psimbolologicaNode3, ptermologicaNode4);
        }
	nodeList.add(pexpplogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce ATermExppLogica */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExppLogica pexpplogicaNode1;
        {
            // Block
        PTermoLogica ptermologicaNode2;
        ptermologicaNode2 = (PTermoLogica)nodeArrayList1.get(0);

        pexpplogicaNode1 = new ATermExppLogica(ptermologicaNode2);
        }
	nodeList.add(pexpplogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce AMaqSimboloLogica */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSimboloLogica psimbolologicaNode1;
        {
            // Block
        TMaiorque tmaiorqueNode2;
        tmaiorqueNode2 = (TMaiorque)nodeArrayList1.get(0);

        psimbolologicaNode1 = new AMaqSimboloLogica(tmaiorqueNode2);
        }
	nodeList.add(psimbolologicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce AMeqSimboloLogica */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSimboloLogica psimbolologicaNode1;
        {
            // Block
        TMenorque tmenorqueNode2;
        tmenorqueNode2 = (TMenorque)nodeArrayList1.get(0);

        psimbolologicaNode1 = new AMeqSimboloLogica(tmenorqueNode2);
        }
	nodeList.add(psimbolologicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce AIgSimboloLogica */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSimboloLogica psimbolologicaNode1;
        {
            // Block
        TIgual tigualNode2;
        tigualNode2 = (TIgual)nodeArrayList1.get(0);

        psimbolologicaNode1 = new AIgSimboloLogica(tigualNode2);
        }
	nodeList.add(psimbolologicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce AMaigSimboloLogica */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSimboloLogica psimbolologicaNode1;
        {
            // Block
        TMaiorigual tmaiorigualNode2;
        tmaiorigualNode2 = (TMaiorigual)nodeArrayList1.get(0);

        psimbolologicaNode1 = new AMaigSimboloLogica(tmaiorigualNode2);
        }
	nodeList.add(psimbolologicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce AMeigSimboloLogica */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSimboloLogica psimbolologicaNode1;
        {
            // Block
        TMenorigual tmenorigualNode2;
        tmenorigualNode2 = (TMenorigual)nodeArrayList1.get(0);

        psimbolologicaNode1 = new AMeigSimboloLogica(tmenorigualNode2);
        }
	nodeList.add(psimbolologicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce ADifSimboloLogica */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSimboloLogica psimbolologicaNode1;
        {
            // Block
        TDiferente tdiferenteNode2;
        tdiferenteNode2 = (TDiferente)nodeArrayList1.get(0);

        psimbolologicaNode1 = new ADifSimboloLogica(tdiferenteNode2);
        }
	nodeList.add(psimbolologicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce AESimboloLogica */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSimboloLogica psimbolologicaNode1;
        {
            // Block
        TE teNode2;
        teNode2 = (TE)nodeArrayList1.get(0);

        psimbolologicaNode1 = new AESimboloLogica(teNode2);
        }
	nodeList.add(psimbolologicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce AOuSimboloLogica */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSimboloLogica psimbolologicaNode1;
        {
            // Block
        TOu touNode2;
        touNode2 = (TOu)nodeArrayList1.get(0);

        psimbolologicaNode1 = new AOuSimboloLogica(touNode2);
        }
	nodeList.add(psimbolologicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce ASimboloLogica */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSimboloLogica psimbolologicaNode1;
        {
            // Block
        TXor txorNode2;
        txorNode2 = (TXor)nodeArrayList1.get(0);

        psimbolologicaNode1 = new ASimboloLogica(txorNode2);
        }
	nodeList.add(psimbolologicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce ATermoLogica */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTermoLogica ptermologicaNode1;
        {
            // Block
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList1.get(0);

        ptermologicaNode1 = new ATermoLogica(pexpNode2);
        }
	nodeList.add(ptermologicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce AComandoSe */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComandoSe pcomandoseNode1;
        {
            // Block
        TSe tseNode2;
        TAbreparenteses tabreparentesesNode3;
        PExpLogica pexplogicaNode4;
        TFechaparenteses tfechaparentesesNode5;
        TEntao tentaoNode6;
        PCorpoPrograma pcorpoprogramaNode7;
        TFimse tfimseNode8;
        TPontovirgula tpontovirgulaNode9;
        tseNode2 = (TSe)nodeArrayList1.get(0);
        tabreparentesesNode3 = (TAbreparenteses)nodeArrayList2.get(0);
        pexplogicaNode4 = (PExpLogica)nodeArrayList3.get(0);
        tfechaparentesesNode5 = (TFechaparenteses)nodeArrayList4.get(0);
        tentaoNode6 = (TEntao)nodeArrayList5.get(0);
        pcorpoprogramaNode7 = (PCorpoPrograma)nodeArrayList6.get(0);
        tfimseNode8 = (TFimse)nodeArrayList7.get(0);
        tpontovirgulaNode9 = (TPontovirgula)nodeArrayList8.get(0);

        pcomandoseNode1 = new AComandoSe(tseNode2, tabreparentesesNode3, pexplogicaNode4, tfechaparentesesNode5, tentaoNode6, pcorpoprogramaNode7, tfimseNode8, tpontovirgulaNode9);
        }
	nodeList.add(pcomandoseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce ASeNaoComandoSe */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComandoSe pcomandoseNode1;
        {
            // Block
        TSe tseNode2;
        TAbreparenteses tabreparentesesNode3;
        PExpLogica pexplogicaNode4;
        TFechaparenteses tfechaparentesesNode5;
        TEntao tentaoNode6;
        PCorpoPrograma pcorpoprogramaNode7;
        TSenao tsenaoNode8;
        TFimse tfimseNode9;
        TPontovirgula tpontovirgulaNode10;
        tseNode2 = (TSe)nodeArrayList1.get(0);
        tabreparentesesNode3 = (TAbreparenteses)nodeArrayList2.get(0);
        pexplogicaNode4 = (PExpLogica)nodeArrayList3.get(0);
        tfechaparentesesNode5 = (TFechaparenteses)nodeArrayList4.get(0);
        tentaoNode6 = (TEntao)nodeArrayList5.get(0);
        pcorpoprogramaNode7 = (PCorpoPrograma)nodeArrayList6.get(0);
        tsenaoNode8 = (TSenao)nodeArrayList7.get(0);
        tfimseNode9 = (TFimse)nodeArrayList8.get(0);
        tpontovirgulaNode10 = (TPontovirgula)nodeArrayList9.get(0);

        pcomandoseNode1 = new ASeNaoComandoSe(tseNode2, tabreparentesesNode3, pexplogicaNode4, tfechaparentesesNode5, tentaoNode6, pcorpoprogramaNode7, tsenaoNode8, tfimseNode9, tpontovirgulaNode10);
        }
	nodeList.add(pcomandoseNode1);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {18, SHIFT, 1}, },
			{{-1, ERROR, 1}, {51, SHIFT, 3}, },
			{{-1, ERROR, 2}, {56, ACCEPT, -1}, },
			{{-1, ERROR, 3}, {8, SHIFT, 4}, },
			{{-1, ERROR, 4}, {19, SHIFT, 5}, },
			{{-1, REDUCE, 2}, },
			{{-1, REDUCE, 12}, {4, SHIFT, 7}, {5, SHIFT, 8}, {6, SHIFT, 9}, {17, SHIFT, 10}, {25, SHIFT, 11}, {45, SHIFT, 12}, {47, SHIFT, 13}, {49, SHIFT, 14}, {51, SHIFT, 15}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 15}, },
			{{-1, REDUCE, 14}, },
			{{-1, ERROR, 10}, {51, SHIFT, 26}, },
			{{-1, ERROR, 11}, {47, SHIFT, 27}, },
			{{-1, ERROR, 12}, {45, SHIFT, 12}, {47, SHIFT, 13}, {49, SHIFT, 14}, {51, SHIFT, 15}, },
			{{-1, ERROR, 13}, {47, SHIFT, 13}, {49, SHIFT, 14}, {51, SHIFT, 15}, },
			{{-1, REDUCE, 28}, },
			{{-1, REDUCE, 29}, },
			{{-1, REDUCE, 1}, },
			{{-1, ERROR, 17}, {20, SHIFT, 30}, },
			{{-1, ERROR, 18}, {9, SHIFT, 31}, },
			{{-1, REDUCE, 43}, {0, SHIFT, 32}, {1, SHIFT, 33}, },
			{{-1, REDUCE, 20}, {2, SHIFT, 35}, {3, SHIFT, 36}, },
			{{-1, REDUCE, 24}, },
			{{-1, ERROR, 22}, {8, SHIFT, 38}, },
			{{-1, REDUCE, 30}, {10, SHIFT, 39}, {11, SHIFT, 40}, {12, SHIFT, 41}, {13, SHIFT, 42}, {14, SHIFT, 43}, {15, SHIFT, 44}, {42, SHIFT, 45}, {43, SHIFT, 46}, {44, SHIFT, 47}, },
			{{-1, REDUCE, 33}, },
			{{-1, REDUCE, 10}, },
			{{-1, ERROR, 26}, {5, SHIFT, 49}, {7, SHIFT, 50}, {49, SHIFT, 51}, },
			{{-1, ERROR, 27}, {45, SHIFT, 12}, {47, SHIFT, 13}, {49, SHIFT, 14}, {51, SHIFT, 15}, },
			{{-1, REDUCE, 31}, },
			{{-1, ERROR, 29}, {0, SHIFT, 32}, {1, SHIFT, 33}, {48, SHIFT, 54}, },
			{{-1, ERROR, 30}, {21, SHIFT, 55}, },
			{{-1, ERROR, 31}, {51, SHIFT, 56}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 22}, },
			{{-1, ERROR, 34}, {47, SHIFT, 13}, {49, SHIFT, 14}, {51, SHIFT, 15}, },
			{{-1, REDUCE, 25}, },
			{{-1, REDUCE, 26}, },
			{{-1, ERROR, 37}, {47, SHIFT, 13}, {49, SHIFT, 14}, {51, SHIFT, 15}, },
			{{-1, REDUCE, 11}, },
			{{-1, REDUCE, 34}, },
			{{-1, REDUCE, 35}, },
			{{-1, REDUCE, 36}, },
			{{-1, REDUCE, 37}, },
			{{-1, REDUCE, 38}, },
			{{-1, REDUCE, 39}, },
			{{-1, REDUCE, 40}, },
			{{-1, REDUCE, 41}, },
			{{-1, REDUCE, 42}, },
			{{-1, ERROR, 48}, {47, SHIFT, 13}, {49, SHIFT, 14}, {51, SHIFT, 15}, },
			{{-1, REDUCE, 18}, },
			{{-1, REDUCE, 16}, },
			{{-1, REDUCE, 17}, },
			{{-1, ERROR, 52}, {8, SHIFT, 62}, },
			{{-1, ERROR, 53}, {48, SHIFT, 63}, },
			{{-1, REDUCE, 27}, },
			{{-1, REDUCE, 0}, },
			{{-1, REDUCE, 8}, {40, SHIFT, 64}, },
			{{-1, ERROR, 57}, {51, SHIFT, 56}, },
			{{-1, ERROR, 58}, {8, SHIFT, 66}, {46, SHIFT, 67}, },
			{{-1, REDUCE, 19}, {2, SHIFT, 35}, {3, SHIFT, 36}, },
			{{-1, REDUCE, 23}, },
			{{-1, REDUCE, 32}, },
			{{-1, REDUCE, 4}, },
			{{-1, ERROR, 63}, {26, SHIFT, 68}, },
			{{-1, ERROR, 64}, {49, SHIFT, 69}, },
			{{-1, ERROR, 65}, {8, SHIFT, 70}, {46, SHIFT, 71}, },
			{{-1, REDUCE, 5}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 12}, {25, SHIFT, 11}, {45, SHIFT, 12}, {47, SHIFT, 13}, {49, SHIFT, 14}, {51, SHIFT, 15}, },
			{{-1, ERROR, 69}, {41, SHIFT, 73}, },
			{{-1, REDUCE, 3}, },
			{{-1, REDUCE, 6}, },
			{{-1, ERROR, 72}, {27, SHIFT, 74}, {28, SHIFT, 75}, },
			{{-1, REDUCE, 9}, },
			{{-1, ERROR, 74}, {28, SHIFT, 76}, },
			{{-1, ERROR, 75}, {8, SHIFT, 77}, },
			{{-1, ERROR, 76}, {8, SHIFT, 78}, },
			{{-1, REDUCE, 44}, },
			{{-1, REDUCE, 45}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 6}, },
			{{-1, 16}, },
			{{-1, 57}, },
			{{-1, 58}, {57, 65}, },
			{{-1, 17}, {68, 72}, },
			{{-1, 18}, },
			{{-1, 52}, },
			{{-1, 19}, {13, 29}, },
			{{-1, 34}, },
			{{-1, 20}, {34, 59}, },
			{{-1, 37}, },
			{{-1, 21}, {37, 60}, },
			{{-1, 22}, {12, 28}, {27, 53}, },
			{{-1, 23}, },
			{{-1, 48}, },
			{{-1, 24}, {48, 61}, },
			{{-1, 25}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'programa'",
			"expecting: identificador",
			"expecting: EOF",
			"expecting: ';'",
			"expecting: 'inicio'",
			"expecting: 'caractere', 'real', 'inteiro', 'const', 'fim', 'se', 'nao', '(', numero, identificador",
			"expecting: ':'",
			"expecting: '('",
			"expecting: 'nao', '(', numero, identificador",
			"expecting: '(', numero, identificador",
			"expecting: '+', '-', '*', '/', ';', '>', '<', '=', '>=', '<=', '<>', 'e', 'ou', 'xor', ')'",
			"expecting: 'fim'",
			"expecting: '+', '-', ';', '>', '<', '=', '>=', '<=', '<>', 'e', 'ou', 'xor', ')'",
			"expecting: ';', '>', '<', '=', '>=', '<=', '<>', 'e', 'ou', 'xor', ')'",
			"expecting: 'fim', 'senao', 'fim se'",
			"expecting: 'real', string, numero",
			"expecting: ';', ')'",
			"expecting: '+', '-', ')'",
			"expecting: '.'",
			"expecting: ')'",
			"expecting: ';', '[', ','",
			"expecting: ';', ','",
			"expecting: 'entao'",
			"expecting: numero",
			"expecting: 'se', 'senao', 'fim se', 'nao', '(', numero, identificador",
			"expecting: ']'",
			"expecting: 'senao', 'fim se'",
			"expecting: 'fim se'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 4, 5, 5, 6, 6, 6, 1, 7, 8, 9, 10, 10, 5, 11, 6, 12, 10, 10, 3, 13, 13, 14, 15, 8, 16, 17, 18, 1, 9, 9, 9, 9, 9, 9, 14, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 3, 3, 3, 3, 19, 10, 2, 20, 1, 21, 10, 10, 13, 5, 22, 23, 21, 5, 1, 24, 25, 5, 1, 26, 21, 27, 3, 3, 14, 14, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
