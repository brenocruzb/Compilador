/* This file was generated by SableCC (http://www.sablecc.org/). */

package node;

import analysis.*;

@SuppressWarnings("nls")
public final class AExpr extends PExpr
{
    private PExpnum _expnum_;

    public AExpr()
    {
        // Constructor
    }

    public AExpr(
        @SuppressWarnings("hiding") PExpnum _expnum_)
    {
        // Constructor
        setExpnum(_expnum_);

    }

    @Override
    public Object clone()
    {
        return new AExpr(
            cloneNode(this._expnum_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAExpr(this);
    }

    public PExpnum getExpnum()
    {
        return this._expnum_;
    }

    public void setExpnum(PExpnum node)
    {
        if(this._expnum_ != null)
        {
            this._expnum_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expnum_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._expnum_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._expnum_ == child)
        {
            this._expnum_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._expnum_ == oldChild)
        {
            setExpnum((PExpnum) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
