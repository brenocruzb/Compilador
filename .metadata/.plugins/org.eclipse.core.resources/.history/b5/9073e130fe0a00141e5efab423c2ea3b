/* This file was generated by SableCC (http://www.sablecc.org/). */

package analysis;

import java.util.*;
import node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPInidocAst().apply(this);
        outStart(node);
    }

    public void inAInidocAst(AInidocAst node)
    {
        defaultIn(node);
    }

    public void outAInidocAst(AInidocAst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInidocAst(AInidocAst node)
    {
        inAInidocAst(node);
        {
            List<PAstSection> copy = new ArrayList<PAstSection>(node.getAstSection());
            Collections.reverse(copy);
            for(PAstSection e : copy)
            {
                e.apply(this);
            }
        }
        outAInidocAst(node);
    }

    public void inAAstSection(AAstSection node)
    {
        defaultIn(node);
    }

    public void outAAstSection(AAstSection node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAstSection(AAstSection node)
    {
        inAAstSection(node);
        {
            List<PAstData> copy = new ArrayList<PAstData>(node.getAstData());
            Collections.reverse(copy);
            for(PAstData e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outAAstSection(node);
    }

    public void inAAstData(AAstData node)
    {
        defaultIn(node);
    }

    public void outAAstData(AAstData node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAstData(AAstData node)
    {
        inAAstData(node);
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        if(node.getKey() != null)
        {
            node.getKey().apply(this);
        }
        outAAstData(node);
    }
}
