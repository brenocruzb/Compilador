/* This file was generated by SableCC (http://www.sablecc.org/). */

package analysis;

import java.util.*;
import node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPTotal().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inATotal(ATotal node)
    {
        defaultIn(node);
    }

    public void outATotal(ATotal node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATotal(ATotal node)
    {
        inATotal(node);
        if(node.getPrograma() != null)
        {
            node.getPrograma().apply(this);
        }
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        if(node.getPontovirgula() != null)
        {
            node.getPontovirgula().apply(this);
        }
        if(node.getInicio() != null)
        {
            node.getInicio().apply(this);
        }
        {
            List<PDeclaracaoVariavel> copy = new ArrayList<PDeclaracaoVariavel>(node.getDeclaracaoVariavel());
            for(PDeclaracaoVariavel e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PComando> copy = new ArrayList<PComando>(node.getComando());
            for(PComando e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getFimponto() != null)
        {
            node.getFimponto().apply(this);
        }
        outATotal(node);
    }

    public void inAVariavelDeclaracaoVariavel(AVariavelDeclaracaoVariavel node)
    {
        defaultIn(node);
    }

    public void outAVariavelDeclaracaoVariavel(AVariavelDeclaracaoVariavel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariavelDeclaracaoVariavel(AVariavelDeclaracaoVariavel node)
    {
        inAVariavelDeclaracaoVariavel(node);
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        if(node.getDoispontos() != null)
        {
            node.getDoispontos().apply(this);
        }
        {
            List<PDeclaracaoVariavelVirgula> copy = new ArrayList<PDeclaracaoVariavelVirgula>(node.getDeclaracaoVariavelVirgula());
            for(PDeclaracaoVariavelVirgula e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getVariaveld() != null)
        {
            node.getVariaveld().apply(this);
        }
        if(node.getPontovirgula() != null)
        {
            node.getPontovirgula().apply(this);
        }
        outAVariavelDeclaracaoVariavel(node);
    }

    public void inADconstanteDeclaracaoVariavel(ADconstanteDeclaracaoVariavel node)
    {
        defaultIn(node);
    }

    public void outADconstanteDeclaracaoVariavel(ADconstanteDeclaracaoVariavel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADconstanteDeclaracaoVariavel(ADconstanteDeclaracaoVariavel node)
    {
        inADconstanteDeclaracaoVariavel(node);
        if(node.getConst() != null)
        {
            node.getConst().apply(this);
        }
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        if(node.getPontovirgula() != null)
        {
            node.getPontovirgula().apply(this);
        }
        outADconstanteDeclaracaoVariavel(node);
    }

    public void inADeclaracaoVariavelVirgula(ADeclaracaoVariavelVirgula node)
    {
        defaultIn(node);
    }

    public void outADeclaracaoVariavelVirgula(ADeclaracaoVariavelVirgula node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclaracaoVariavelVirgula(ADeclaracaoVariavelVirgula node)
    {
        inADeclaracaoVariavelVirgula(node);
        if(node.getVariaveld() != null)
        {
            node.getVariaveld().apply(this);
        }
        if(node.getVirgula() != null)
        {
            node.getVirgula().apply(this);
        }
        outADeclaracaoVariavelVirgula(node);
    }

    public void inASimplesVariaveld(ASimplesVariaveld node)
    {
        defaultIn(node);
    }

    public void outASimplesVariaveld(ASimplesVariaveld node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimplesVariaveld(ASimplesVariaveld node)
    {
        inASimplesVariaveld(node);
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        outASimplesVariaveld(node);
    }

    public void inAVetorVariaveld(AVetorVariaveld node)
    {
        defaultIn(node);
    }

    public void outAVetorVariaveld(AVetorVariaveld node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVetorVariaveld(AVetorVariaveld node)
    {
        inAVetorVariaveld(node);
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        if(node.getAbrecolchete() != null)
        {
            node.getAbrecolchete().apply(this);
        }
        if(node.getNumero() != null)
        {
            node.getNumero().apply(this);
        }
        if(node.getFecharcolchete() != null)
        {
            node.getFecharcolchete().apply(this);
        }
        outAVetorVariaveld(node);
    }

    public void inACaractereTipo(ACaractereTipo node)
    {
        defaultIn(node);
    }

    public void outACaractereTipo(ACaractereTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACaractereTipo(ACaractereTipo node)
    {
        inACaractereTipo(node);
        if(node.getCaractere() != null)
        {
            node.getCaractere().apply(this);
        }
        outACaractereTipo(node);
    }

    public void inAInteiroTipo(AInteiroTipo node)
    {
        defaultIn(node);
    }

    public void outAInteiroTipo(AInteiroTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInteiroTipo(AInteiroTipo node)
    {
        inAInteiroTipo(node);
        if(node.getInteiro() != null)
        {
            node.getInteiro().apply(this);
        }
        outAInteiroTipo(node);
    }

    public void inARealTipo(ARealTipo node)
    {
        defaultIn(node);
    }

    public void outARealTipo(ARealTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARealTipo(ARealTipo node)
    {
        inARealTipo(node);
        if(node.getReal() != null)
        {
            node.getReal().apply(this);
        }
        outARealTipo(node);
    }

    public void inAStringValor(AStringValor node)
    {
        defaultIn(node);
    }

    public void outAStringValor(AStringValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringValor(AStringValor node)
    {
        inAStringValor(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outAStringValor(node);
    }

    public void inANumeroValor(ANumeroValor node)
    {
        defaultIn(node);
    }

    public void outANumeroValor(ANumeroValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumeroValor(ANumeroValor node)
    {
        inANumeroValor(node);
        if(node.getNumero() != null)
        {
            node.getNumero().apply(this);
        }
        outANumeroValor(node);
    }

    public void inARealValor(ARealValor node)
    {
        defaultIn(node);
    }

    public void outARealValor(ARealValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARealValor(ARealValor node)
    {
        inARealValor(node);
        if(node.getNumeroReal() != null)
        {
            node.getNumeroReal().apply(this);
        }
        outARealValor(node);
    }

    public void inANumericoExpr(ANumericoExpr node)
    {
        defaultIn(node);
    }

    public void outANumericoExpr(ANumericoExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumericoExpr(ANumericoExpr node)
    {
        inANumericoExpr(node);
        if(node.getExpnum() != null)
        {
            node.getExpnum().apply(this);
        }
        outANumericoExpr(node);
    }

    public void inALogicaExpr(ALogicaExpr node)
    {
        defaultIn(node);
    }

    public void outALogicaExpr(ALogicaExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALogicaExpr(ALogicaExpr node)
    {
        inALogicaExpr(node);
        if(node.getExpLogica() != null)
        {
            node.getExpLogica().apply(this);
        }
        outALogicaExpr(node);
    }

    public void inABaixaExpnum(ABaixaExpnum node)
    {
        defaultIn(node);
    }

    public void outABaixaExpnum(ABaixaExpnum node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABaixaExpnum(ABaixaExpnum node)
    {
        inABaixaExpnum(node);
        if(node.getExpnum() != null)
        {
            node.getExpnum().apply(this);
        }
        if(node.getSoma() != null)
        {
            node.getSoma().apply(this);
        }
        if(node.getTermo() != null)
        {
            node.getTermo().apply(this);
        }
        outABaixaExpnum(node);
    }

    public void inATermExpnum(ATermExpnum node)
    {
        defaultIn(node);
    }

    public void outATermExpnum(ATermExpnum node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermExpnum(ATermExpnum node)
    {
        inATermExpnum(node);
        if(node.getTermo() != null)
        {
            node.getTermo().apply(this);
        }
        outATermExpnum(node);
    }

    public void inAAddSoma(AAddSoma node)
    {
        defaultIn(node);
    }

    public void outAAddSoma(AAddSoma node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAddSoma(AAddSoma node)
    {
        inAAddSoma(node);
        if(node.getAdicao() != null)
        {
            node.getAdicao().apply(this);
        }
        outAAddSoma(node);
    }

    public void inASubSoma(ASubSoma node)
    {
        defaultIn(node);
    }

    public void outASubSoma(ASubSoma node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASubSoma(ASubSoma node)
    {
        inASubSoma(node);
        if(node.getSubtracao() != null)
        {
            node.getSubtracao().apply(this);
        }
        outASubSoma(node);
    }

    public void inAAltaTermo(AAltaTermo node)
    {
        defaultIn(node);
    }

    public void outAAltaTermo(AAltaTermo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAltaTermo(AAltaTermo node)
    {
        inAAltaTermo(node);
        if(node.getTermo() != null)
        {
            node.getTermo().apply(this);
        }
        if(node.getMult() != null)
        {
            node.getMult().apply(this);
        }
        if(node.getFator() != null)
        {
            node.getFator().apply(this);
        }
        outAAltaTermo(node);
    }

    public void inAFatTermo(AFatTermo node)
    {
        defaultIn(node);
    }

    public void outAFatTermo(AFatTermo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFatTermo(AFatTermo node)
    {
        inAFatTermo(node);
        if(node.getFator() != null)
        {
            node.getFator().apply(this);
        }
        outAFatTermo(node);
    }

    public void inAMultMult(AMultMult node)
    {
        defaultIn(node);
    }

    public void outAMultMult(AMultMult node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultMult(AMultMult node)
    {
        inAMultMult(node);
        if(node.getMultiplicacao() != null)
        {
            node.getMultiplicacao().apply(this);
        }
        outAMultMult(node);
    }

    public void inADivMult(ADivMult node)
    {
        defaultIn(node);
    }

    public void outADivMult(ADivMult node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivMult(ADivMult node)
    {
        inADivMult(node);
        if(node.getDivisao() != null)
        {
            node.getDivisao().apply(this);
        }
        outADivMult(node);
    }

    public void inAInternoFator(AInternoFator node)
    {
        defaultIn(node);
    }

    public void outAInternoFator(AInternoFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInternoFator(AInternoFator node)
    {
        inAInternoFator(node);
        if(node.getAbreparenteses() != null)
        {
            node.getAbreparenteses().apply(this);
        }
        if(node.getExpnum() != null)
        {
            node.getExpnum().apply(this);
        }
        if(node.getFechaparenteses() != null)
        {
            node.getFechaparenteses().apply(this);
        }
        outAInternoFator(node);
    }

    public void inANegativoFator(ANegativoFator node)
    {
        defaultIn(node);
    }

    public void outANegativoFator(ANegativoFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANegativoFator(ANegativoFator node)
    {
        inANegativoFator(node);
        if(node.getSubtracao() != null)
        {
            node.getSubtracao().apply(this);
        }
        if(node.getFator() != null)
        {
            node.getFator().apply(this);
        }
        outANegativoFator(node);
    }

    public void inANumFator(ANumFator node)
    {
        defaultIn(node);
    }

    public void outANumFator(ANumFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumFator(ANumFator node)
    {
        inANumFator(node);
        if(node.getNumero() != null)
        {
            node.getNumero().apply(this);
        }
        outANumFator(node);
    }

    public void inARealFator(ARealFator node)
    {
        defaultIn(node);
    }

    public void outARealFator(ARealFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARealFator(ARealFator node)
    {
        inARealFator(node);
        if(node.getNumeroReal() != null)
        {
            node.getNumeroReal().apply(this);
        }
        outARealFator(node);
    }

    public void inAVariavelFator(AVariavelFator node)
    {
        defaultIn(node);
    }

    public void outAVariavelFator(AVariavelFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariavelFator(AVariavelFator node)
    {
        inAVariavelFator(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outAVariavelFator(node);
    }

    public void inAMenorigParabool(AMenorigParabool node)
    {
        defaultIn(node);
    }

    public void outAMenorigParabool(AMenorigParabool node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenorigParabool(AMenorigParabool node)
    {
        inAMenorigParabool(node);
        if(node.getMenorigual() != null)
        {
            node.getMenorigual().apply(this);
        }
        outAMenorigParabool(node);
    }

    public void inAMaiorigParabool(AMaiorigParabool node)
    {
        defaultIn(node);
    }

    public void outAMaiorigParabool(AMaiorigParabool node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaiorigParabool(AMaiorigParabool node)
    {
        inAMaiorigParabool(node);
        if(node.getMaiorigual() != null)
        {
            node.getMaiorigual().apply(this);
        }
        outAMaiorigParabool(node);
    }

    public void inAMenorParabool(AMenorParabool node)
    {
        defaultIn(node);
    }

    public void outAMenorParabool(AMenorParabool node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenorParabool(AMenorParabool node)
    {
        inAMenorParabool(node);
        if(node.getMenorque() != null)
        {
            node.getMenorque().apply(this);
        }
        outAMenorParabool(node);
    }

    public void inAMaiorParabool(AMaiorParabool node)
    {
        defaultIn(node);
    }

    public void outAMaiorParabool(AMaiorParabool node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaiorParabool(AMaiorParabool node)
    {
        inAMaiorParabool(node);
        if(node.getMaiorque() != null)
        {
            node.getMaiorque().apply(this);
        }
        outAMaiorParabool(node);
    }

    public void inAIgualLcomp(AIgualLcomp node)
    {
        defaultIn(node);
    }

    public void outAIgualLcomp(AIgualLcomp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIgualLcomp(AIgualLcomp node)
    {
        inAIgualLcomp(node);
        if(node.getIgual() != null)
        {
            node.getIgual().apply(this);
        }
        outAIgualLcomp(node);
    }

    public void inADiffLcomp(ADiffLcomp node)
    {
        defaultIn(node);
    }

    public void outADiffLcomp(ADiffLcomp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADiffLcomp(ADiffLcomp node)
    {
        inADiffLcomp(node);
        if(node.getDiferente() != null)
        {
            node.getDiferente().apply(this);
        }
        outADiffLcomp(node);
    }

    public void inALsoma(ALsoma node)
    {
        defaultIn(node);
    }

    public void outALsoma(ALsoma node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALsoma(ALsoma node)
    {
        inALsoma(node);
        if(node.getOu() != null)
        {
            node.getOu().apply(this);
        }
        outALsoma(node);
    }

    public void inALmult(ALmult node)
    {
        defaultIn(node);
    }

    public void outALmult(ALmult node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALmult(ALmult node)
    {
        inALmult(node);
        if(node.getE() != null)
        {
            node.getE().apply(this);
        }
        outALmult(node);
    }

    public void inALxor(ALxor node)
    {
        defaultIn(node);
    }

    public void outALxor(ALxor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALxor(ALxor node)
    {
        inALxor(node);
        if(node.getXor() != null)
        {
            node.getXor().apply(this);
        }
        outALxor(node);
    }

    public void inAConjuntoExpLogica(AConjuntoExpLogica node)
    {
        defaultIn(node);
    }

    public void outAConjuntoExpLogica(AConjuntoExpLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConjuntoExpLogica(AConjuntoExpLogica node)
    {
        inAConjuntoExpLogica(node);
        if(node.getNaoigualfator() != null)
        {
            node.getNaoigualfator().apply(this);
        }
        if(node.getLcomp() != null)
        {
            node.getLcomp().apply(this);
        }
        if(node.getRnaoigualfator() != null)
        {
            node.getRnaoigualfator().apply(this);
        }
        outAConjuntoExpLogica(node);
    }

    public void inADiretoExpLogica(ADiretoExpLogica node)
    {
        defaultIn(node);
    }

    public void outADiretoExpLogica(ADiretoExpLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADiretoExpLogica(ADiretoExpLogica node)
    {
        inADiretoExpLogica(node);
        if(node.getLinicio() != null)
        {
            node.getLinicio().apply(this);
        }
        outADiretoExpLogica(node);
    }

    public void inARnaoigualfator(ARnaoigualfator node)
    {
        defaultIn(node);
    }

    public void outARnaoigualfator(ARnaoigualfator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARnaoigualfator(ARnaoigualfator node)
    {
        inARnaoigualfator(node);
        if(node.getNaoigualfator() != null)
        {
            node.getNaoigualfator().apply(this);
        }
        outARnaoigualfator(node);
    }

    public void inAParentesesNaoigualfator(AParentesesNaoigualfator node)
    {
        defaultIn(node);
    }

    public void outAParentesesNaoigualfator(AParentesesNaoigualfator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParentesesNaoigualfator(AParentesesNaoigualfator node)
    {
        inAParentesesNaoigualfator(node);
        if(node.getAbreparenteses() != null)
        {
            node.getAbreparenteses().apply(this);
        }
        if(node.getExpLogica() != null)
        {
            node.getExpLogica().apply(this);
        }
        if(node.getFechaparenteses() != null)
        {
            node.getFechaparenteses().apply(this);
        }
        outAParentesesNaoigualfator(node);
    }

    public void inAExpNaoigualfator(AExpNaoigualfator node)
    {
        defaultIn(node);
    }

    public void outAExpNaoigualfator(AExpNaoigualfator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpNaoigualfator(AExpNaoigualfator node)
    {
        inAExpNaoigualfator(node);
        if(node.getExpnum() != null)
        {
            node.getExpnum().apply(this);
        }
        if(node.getParabool() != null)
        {
            node.getParabool().apply(this);
        }
        if(node.getOutraexp() != null)
        {
            node.getOutraexp().apply(this);
        }
        outAExpNaoigualfator(node);
    }

    public void inANaoNaoigualfator(ANaoNaoigualfator node)
    {
        defaultIn(node);
    }

    public void outANaoNaoigualfator(ANaoNaoigualfator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANaoNaoigualfator(ANaoNaoigualfator node)
    {
        inANaoNaoigualfator(node);
        if(node.getNao() != null)
        {
            node.getNao().apply(this);
        }
        if(node.getLfator() != null)
        {
            node.getLfator().apply(this);
        }
        outANaoNaoigualfator(node);
    }

    public void inACadeiaLinicio(ACadeiaLinicio node)
    {
        defaultIn(node);
    }

    public void outACadeiaLinicio(ACadeiaLinicio node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACadeiaLinicio(ACadeiaLinicio node)
    {
        inACadeiaLinicio(node);
        if(node.getLinicio() != null)
        {
            node.getLinicio().apply(this);
        }
        if(node.getLsoma() != null)
        {
            node.getLsoma().apply(this);
        }
        if(node.getLmeio() != null)
        {
            node.getLmeio().apply(this);
        }
        outACadeiaLinicio(node);
    }

    public void inASimplesLinicio(ASimplesLinicio node)
    {
        defaultIn(node);
    }

    public void outASimplesLinicio(ASimplesLinicio node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimplesLinicio(ASimplesLinicio node)
    {
        inASimplesLinicio(node);
        if(node.getLmeio() != null)
        {
            node.getLmeio().apply(this);
        }
        outASimplesLinicio(node);
    }

    public void inACadeiaLmeio(ACadeiaLmeio node)
    {
        defaultIn(node);
    }

    public void outACadeiaLmeio(ACadeiaLmeio node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACadeiaLmeio(ACadeiaLmeio node)
    {
        inACadeiaLmeio(node);
        if(node.getLmeio() != null)
        {
            node.getLmeio().apply(this);
        }
        if(node.getLxor() != null)
        {
            node.getLxor().apply(this);
        }
        if(node.getLtermo() != null)
        {
            node.getLtermo().apply(this);
        }
        outACadeiaLmeio(node);
    }

    public void inASimplesLmeio(ASimplesLmeio node)
    {
        defaultIn(node);
    }

    public void outASimplesLmeio(ASimplesLmeio node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimplesLmeio(ASimplesLmeio node)
    {
        inASimplesLmeio(node);
        if(node.getLtermo() != null)
        {
            node.getLtermo().apply(this);
        }
        outASimplesLmeio(node);
    }

    public void inACadeiaLtermo(ACadeiaLtermo node)
    {
        defaultIn(node);
    }

    public void outACadeiaLtermo(ACadeiaLtermo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACadeiaLtermo(ACadeiaLtermo node)
    {
        inACadeiaLtermo(node);
        if(node.getLtermo() != null)
        {
            node.getLtermo().apply(this);
        }
        if(node.getLmult() != null)
        {
            node.getLmult().apply(this);
        }
        if(node.getLfator() != null)
        {
            node.getLfator().apply(this);
        }
        outACadeiaLtermo(node);
    }

    public void inASimplesLtermo(ASimplesLtermo node)
    {
        defaultIn(node);
    }

    public void outASimplesLtermo(ASimplesLtermo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimplesLtermo(ASimplesLtermo node)
    {
        inASimplesLtermo(node);
        if(node.getLfator() != null)
        {
            node.getLfator().apply(this);
        }
        outASimplesLtermo(node);
    }

    public void inAParentesesLfator(AParentesesLfator node)
    {
        defaultIn(node);
    }

    public void outAParentesesLfator(AParentesesLfator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParentesesLfator(AParentesesLfator node)
    {
        inAParentesesLfator(node);
        if(node.getAbreparenteses() != null)
        {
            node.getAbreparenteses().apply(this);
        }
        if(node.getExpLogica() != null)
        {
            node.getExpLogica().apply(this);
        }
        if(node.getFechaparenteses() != null)
        {
            node.getFechaparenteses().apply(this);
        }
        outAParentesesLfator(node);
    }

    public void inAExpLfator(AExpLfator node)
    {
        defaultIn(node);
    }

    public void outAExpLfator(AExpLfator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpLfator(AExpLfator node)
    {
        inAExpLfator(node);
        if(node.getExpnum() != null)
        {
            node.getExpnum().apply(this);
        }
        if(node.getParabool() != null)
        {
            node.getParabool().apply(this);
        }
        if(node.getOutraexp() != null)
        {
            node.getOutraexp().apply(this);
        }
        outAExpLfator(node);
    }

    public void inAExpigLfator(AExpigLfator node)
    {
        defaultIn(node);
    }

    public void outAExpigLfator(AExpigLfator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpigLfator(AExpigLfator node)
    {
        inAExpigLfator(node);
        if(node.getExpnum() != null)
        {
            node.getExpnum().apply(this);
        }
        if(node.getLcomp() != null)
        {
            node.getLcomp().apply(this);
        }
        if(node.getOutraexp() != null)
        {
            node.getOutraexp().apply(this);
        }
        outAExpigLfator(node);
    }

    public void inANaoLfator(ANaoLfator node)
    {
        defaultIn(node);
    }

    public void outANaoLfator(ANaoLfator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANaoLfator(ANaoLfator node)
    {
        inANaoLfator(node);
        if(node.getNao() != null)
        {
            node.getNao().apply(this);
        }
        if(node.getLfator() != null)
        {
            node.getLfator().apply(this);
        }
        outANaoLfator(node);
    }

    public void inAOutraexp(AOutraexp node)
    {
        defaultIn(node);
    }

    public void outAOutraexp(AOutraexp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOutraexp(AOutraexp node)
    {
        inAOutraexp(node);
        if(node.getExpnum() != null)
        {
            node.getExpnum().apply(this);
        }
        outAOutraexp(node);
    }

    public void inAComandoSe(AComandoSe node)
    {
        defaultIn(node);
    }

    public void outAComandoSe(AComandoSe node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandoSe(AComandoSe node)
    {
        inAComandoSe(node);
        if(node.getSe() != null)
        {
            node.getSe().apply(this);
        }
        if(node.getAbreparenteses() != null)
        {
            node.getAbreparenteses().apply(this);
        }
        if(node.getExpLogica() != null)
        {
            node.getExpLogica().apply(this);
        }
        if(node.getFechaparenteses() != null)
        {
            node.getFechaparenteses().apply(this);
        }
        if(node.getEntao() != null)
        {
            node.getEntao().apply(this);
        }
        {
            List<PComando> copy = new ArrayList<PComando>(node.getComando());
            for(PComando e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getFimse() != null)
        {
            node.getFimse().apply(this);
        }
        outAComandoSe(node);
    }

    public void inASeNaoComandoSe(ASeNaoComandoSe node)
    {
        defaultIn(node);
    }

    public void outASeNaoComandoSe(ASeNaoComandoSe node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASeNaoComandoSe(ASeNaoComandoSe node)
    {
        inASeNaoComandoSe(node);
        if(node.getSe() != null)
        {
            node.getSe().apply(this);
        }
        if(node.getAbreparenteses() != null)
        {
            node.getAbreparenteses().apply(this);
        }
        if(node.getExpLogica() != null)
        {
            node.getExpLogica().apply(this);
        }
        if(node.getFechaparenteses() != null)
        {
            node.getFechaparenteses().apply(this);
        }
        if(node.getEntao() != null)
        {
            node.getEntao().apply(this);
        }
        {
            List<PComando> copy = new ArrayList<PComando>(node.getComando());
            for(PComando e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getSenao() != null)
        {
            node.getSenao().apply(this);
        }
        {
            List<PComando> copy = new ArrayList<PComando>(node.getSegundo());
            for(PComando e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getFimse() != null)
        {
            node.getFimse().apply(this);
        }
        outASeNaoComandoSe(node);
    }

    public void inAVar(AVar node)
    {
        defaultIn(node);
    }

    public void outAVar(AVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVar(AVar node)
    {
        inAVar(node);
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        outAVar(node);
    }

    public void inAVetorVar(AVetorVar node)
    {
        defaultIn(node);
    }

    public void outAVetorVar(AVetorVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVetorVar(AVetorVar node)
    {
        inAVetorVar(node);
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        if(node.getAbrecolchete() != null)
        {
            node.getAbrecolchete().apply(this);
        }
        if(node.getExpnum() != null)
        {
            node.getExpnum().apply(this);
        }
        if(node.getFecharcolchete() != null)
        {
            node.getFecharcolchete().apply(this);
        }
        outAVetorVar(node);
    }

    public void inALeiaComando(ALeiaComando node)
    {
        defaultIn(node);
    }

    public void outALeiaComando(ALeiaComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALeiaComando(ALeiaComando node)
    {
        inALeiaComando(node);
        if(node.getComandoLeia() != null)
        {
            node.getComandoLeia().apply(this);
        }
        if(node.getPontovirgula() != null)
        {
            node.getPontovirgula().apply(this);
        }
        outALeiaComando(node);
    }

    public void inARepitaComando(ARepitaComando node)
    {
        defaultIn(node);
    }

    public void outARepitaComando(ARepitaComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARepitaComando(ARepitaComando node)
    {
        inARepitaComando(node);
        if(node.getComandoRepita() != null)
        {
            node.getComandoRepita().apply(this);
        }
        if(node.getPontovirgula() != null)
        {
            node.getPontovirgula().apply(this);
        }
        outARepitaComando(node);
    }

    public void inAEnquantoComando(AEnquantoComando node)
    {
        defaultIn(node);
    }

    public void outAEnquantoComando(AEnquantoComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEnquantoComando(AEnquantoComando node)
    {
        inAEnquantoComando(node);
        if(node.getComandoEnquanto() != null)
        {
            node.getComandoEnquanto().apply(this);
        }
        if(node.getPontovirgula() != null)
        {
            node.getPontovirgula().apply(this);
        }
        outAEnquantoComando(node);
    }

    public void inAAvaliarComando(AAvaliarComando node)
    {
        defaultIn(node);
    }

    public void outAAvaliarComando(AAvaliarComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAvaliarComando(AAvaliarComando node)
    {
        inAAvaliarComando(node);
        if(node.getComandoAvalie() != null)
        {
            node.getComandoAvalie().apply(this);
        }
        if(node.getPontovirgula() != null)
        {
            node.getPontovirgula().apply(this);
        }
        outAAvaliarComando(node);
    }

    public void inAEscritaComando(AEscritaComando node)
    {
        defaultIn(node);
    }

    public void outAEscritaComando(AEscritaComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEscritaComando(AEscritaComando node)
    {
        inAEscritaComando(node);
        if(node.getComandoEscrita() != null)
        {
            node.getComandoEscrita().apply(this);
        }
        if(node.getPontovirgula() != null)
        {
            node.getPontovirgula().apply(this);
        }
        outAEscritaComando(node);
    }

    public void inASeComando(ASeComando node)
    {
        defaultIn(node);
    }

    public void outASeComando(ASeComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASeComando(ASeComando node)
    {
        inASeComando(node);
        if(node.getComandoSe() != null)
        {
            node.getComandoSe().apply(this);
        }
        if(node.getPontovirgula() != null)
        {
            node.getPontovirgula().apply(this);
        }
        outASeComando(node);
    }

    public void inAAtribuicaoComando(AAtribuicaoComando node)
    {
        defaultIn(node);
    }

    public void outAAtribuicaoComando(AAtribuicaoComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAtribuicaoComando(AAtribuicaoComando node)
    {
        inAAtribuicaoComando(node);
        if(node.getComandoAtribuicao() != null)
        {
            node.getComandoAtribuicao().apply(this);
        }
        if(node.getPontovirgula() != null)
        {
            node.getPontovirgula().apply(this);
        }
        outAAtribuicaoComando(node);
    }

    public void inAParaComando(AParaComando node)
    {
        defaultIn(node);
    }

    public void outAParaComando(AParaComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParaComando(AParaComando node)
    {
        inAParaComando(node);
        if(node.getComandoPara() != null)
        {
            node.getComandoPara().apply(this);
        }
        if(node.getPontovirgula() != null)
        {
            node.getPontovirgula().apply(this);
        }
        outAParaComando(node);
    }

    public void inAComandoRepita(AComandoRepita node)
    {
        defaultIn(node);
    }

    public void outAComandoRepita(AComandoRepita node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandoRepita(AComandoRepita node)
    {
        inAComandoRepita(node);
        if(node.getRepita() != null)
        {
            node.getRepita().apply(this);
        }
        {
            List<PComando> copy = new ArrayList<PComando>(node.getComando());
            for(PComando e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getAte() != null)
        {
            node.getAte().apply(this);
        }
        if(node.getAbreparenteses() != null)
        {
            node.getAbreparenteses().apply(this);
        }
        if(node.getExpLogica() != null)
        {
            node.getExpLogica().apply(this);
        }
        if(node.getFechaparenteses() != null)
        {
            node.getFechaparenteses().apply(this);
        }
        outAComandoRepita(node);
    }

    public void inAComandoEnquanto(AComandoEnquanto node)
    {
        defaultIn(node);
    }

    public void outAComandoEnquanto(AComandoEnquanto node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandoEnquanto(AComandoEnquanto node)
    {
        inAComandoEnquanto(node);
        if(node.getEnquanto() != null)
        {
            node.getEnquanto().apply(this);
        }
        if(node.getAbreparenteses() != null)
        {
            node.getAbreparenteses().apply(this);
        }
        if(node.getExpLogica() != null)
        {
            node.getExpLogica().apply(this);
        }
        if(node.getFechaparenteses() != null)
        {
            node.getFechaparenteses().apply(this);
        }
        if(node.getFaca() != null)
        {
            node.getFaca().apply(this);
        }
        {
            List<PComando> copy = new ArrayList<PComando>(node.getComando());
            for(PComando e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getFimenquanto() != null)
        {
            node.getFimenquanto().apply(this);
        }
        outAComandoEnquanto(node);
    }

    public void inACasos(ACasos node)
    {
        defaultIn(node);
    }

    public void outACasos(ACasos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACasos(ACasos node)
    {
        inACasos(node);
        if(node.getCaso() != null)
        {
            node.getCaso().apply(this);
        }
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        if(node.getDoispontos() != null)
        {
            node.getDoispontos().apply(this);
        }
        {
            List<PComando> copy = new ArrayList<PComando>(node.getComando());
            for(PComando e : copy)
            {
                e.apply(this);
            }
        }
        outACasos(node);
    }

    public void inASenaoAvsenao(ASenaoAvsenao node)
    {
        defaultIn(node);
    }

    public void outASenaoAvsenao(ASenaoAvsenao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASenaoAvsenao(ASenaoAvsenao node)
    {
        inASenaoAvsenao(node);
        if(node.getSenao() != null)
        {
            node.getSenao().apply(this);
        }
        if(node.getDoispontos() != null)
        {
            node.getDoispontos().apply(this);
        }
        {
            List<PComando> copy = new ArrayList<PComando>(node.getComando());
            for(PComando e : copy)
            {
                e.apply(this);
            }
        }
        outASenaoAvsenao(node);
    }

    public void inAVazioAvsenao(AVazioAvsenao node)
    {
        defaultIn(node);
    }

    public void outAVazioAvsenao(AVazioAvsenao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVazioAvsenao(AVazioAvsenao node)
    {
        inAVazioAvsenao(node);
        outAVazioAvsenao(node);
    }

    public void inAComandoAvalie(AComandoAvalie node)
    {
        defaultIn(node);
    }

    public void outAComandoAvalie(AComandoAvalie node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandoAvalie(AComandoAvalie node)
    {
        inAComandoAvalie(node);
        if(node.getAvalie() != null)
        {
            node.getAvalie().apply(this);
        }
        if(node.getAbreparenteses() != null)
        {
            node.getAbreparenteses().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getFechaparenteses() != null)
        {
            node.getFechaparenteses().apply(this);
        }
        {
            List<PCasos> copy = new ArrayList<PCasos>(node.getCasos());
            for(PCasos e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getAvsenao() != null)
        {
            node.getAvsenao().apply(this);
        }
        if(node.getFimavalie() != null)
        {
            node.getFimavalie().apply(this);
        }
        outAComandoAvalie(node);
    }

    public void inANumParatipos(ANumParatipos node)
    {
        defaultIn(node);
    }

    public void outANumParatipos(ANumParatipos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumParatipos(ANumParatipos node)
    {
        inANumParatipos(node);
        if(node.getNumero() != null)
        {
            node.getNumero().apply(this);
        }
        outANumParatipos(node);
    }

    public void inAVarParatipos(AVarParatipos node)
    {
        defaultIn(node);
    }

    public void outAVarParatipos(AVarParatipos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarParatipos(AVarParatipos node)
    {
        inAVarParatipos(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outAVarParatipos(node);
    }

    public void inASempassoComandoPara(ASempassoComandoPara node)
    {
        defaultIn(node);
    }

    public void outASempassoComandoPara(ASempassoComandoPara node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASempassoComandoPara(ASempassoComandoPara node)
    {
        inASempassoComandoPara(node);
        if(node.getPara() != null)
        {
            node.getPara().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getDe() != null)
        {
            node.getDe().apply(this);
        }
        if(node.getParatipos() != null)
        {
            node.getParatipos().apply(this);
        }
        if(node.getAte() != null)
        {
            node.getAte().apply(this);
        }
        if(node.getSegundo() != null)
        {
            node.getSegundo().apply(this);
        }
        if(node.getFaca() != null)
        {
            node.getFaca().apply(this);
        }
        {
            List<PComando> copy = new ArrayList<PComando>(node.getComando());
            for(PComando e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getFimpara() != null)
        {
            node.getFimpara().apply(this);
        }
        outASempassoComandoPara(node);
    }

    public void inACompassoComandoPara(ACompassoComandoPara node)
    {
        defaultIn(node);
    }

    public void outACompassoComandoPara(ACompassoComandoPara node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACompassoComandoPara(ACompassoComandoPara node)
    {
        inACompassoComandoPara(node);
        if(node.getPara() != null)
        {
            node.getPara().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getDe() != null)
        {
            node.getDe().apply(this);
        }
        if(node.getParatipos() != null)
        {
            node.getParatipos().apply(this);
        }
        if(node.getPasso() != null)
        {
            node.getPasso().apply(this);
        }
        if(node.getSegundo() != null)
        {
            node.getSegundo().apply(this);
        }
        if(node.getAte() != null)
        {
            node.getAte().apply(this);
        }
        if(node.getTerceiro() != null)
        {
            node.getTerceiro().apply(this);
        }
        if(node.getFaca() != null)
        {
            node.getFaca().apply(this);
        }
        {
            List<PComando> copy = new ArrayList<PComando>(node.getComando());
            for(PComando e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getFimpara() != null)
        {
            node.getFimpara().apply(this);
        }
        outACompassoComandoPara(node);
    }

    public void inANormalComandoEscrita(ANormalComandoEscrita node)
    {
        defaultIn(node);
    }

    public void outANormalComandoEscrita(ANormalComandoEscrita node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANormalComandoEscrita(ANormalComandoEscrita node)
    {
        inANormalComandoEscrita(node);
        if(node.getEscreva() != null)
        {
            node.getEscreva().apply(this);
        }
        if(node.getAbreparenteses() != null)
        {
            node.getAbreparenteses().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getFechaparenteses() != null)
        {
            node.getFechaparenteses().apply(this);
        }
        outANormalComandoEscrita(node);
    }

    public void inAStrComandoEscrita(AStrComandoEscrita node)
    {
        defaultIn(node);
    }

    public void outAStrComandoEscrita(AStrComandoEscrita node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStrComandoEscrita(AStrComandoEscrita node)
    {
        inAStrComandoEscrita(node);
        if(node.getEscreva() != null)
        {
            node.getEscreva().apply(this);
        }
        if(node.getAbreparenteses() != null)
        {
            node.getAbreparenteses().apply(this);
        }
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        if(node.getFechaparenteses() != null)
        {
            node.getFechaparenteses().apply(this);
        }
        outAStrComandoEscrita(node);
    }

    public void inAComandoLeia(AComandoLeia node)
    {
        defaultIn(node);
    }

    public void outAComandoLeia(AComandoLeia node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandoLeia(AComandoLeia node)
    {
        inAComandoLeia(node);
        if(node.getLeia() != null)
        {
            node.getLeia().apply(this);
        }
        if(node.getAbreparenteses() != null)
        {
            node.getAbreparenteses().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getFechaparenteses() != null)
        {
            node.getFechaparenteses().apply(this);
        }
        outAComandoLeia(node);
    }

    public void inAComandoAtribuicao(AComandoAtribuicao node)
    {
        defaultIn(node);
    }

    public void outAComandoAtribuicao(AComandoAtribuicao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandoAtribuicao(AComandoAtribuicao node)
    {
        inAComandoAtribuicao(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getAtribuicao() != null)
        {
            node.getAtribuicao().apply(this);
        }
        if(node.getExpnum() != null)
        {
            node.getExpnum().apply(this);
        }
        outAComandoAtribuicao(node);
    }
}
