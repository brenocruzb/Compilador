/* This file was generated by SableCC (http://www.sablecc.org/). */

package node;

import analysis.*;

@SuppressWarnings("nls")
public final class AExp extends PExp
{
    private PTermo _termo_;
    private PExpp _expp_;

    public AExp()
    {
        // Constructor
    }

    public AExp(
        @SuppressWarnings("hiding") PTermo _termo_,
        @SuppressWarnings("hiding") PExpp _expp_)
    {
        // Constructor
        setTermo(_termo_);

        setExpp(_expp_);

    }

    @Override
    public Object clone()
    {
        return new AExp(
            cloneNode(this._termo_),
            cloneNode(this._expp_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAExp(this);
    }

    public PTermo getTermo()
    {
        return this._termo_;
    }

    public void setTermo(PTermo node)
    {
        if(this._termo_ != null)
        {
            this._termo_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._termo_ = node;
    }

    public PExpp getExpp()
    {
        return this._expp_;
    }

    public void setExpp(PExpp node)
    {
        if(this._expp_ != null)
        {
            this._expp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expp_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._termo_)
            + toString(this._expp_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._termo_ == child)
        {
            this._termo_ = null;
            return;
        }

        if(this._expp_ == child)
        {
            this._expp_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._termo_ == oldChild)
        {
            setTermo((PTermo) newChild);
            return;
        }

        if(this._expp_ == oldChild)
        {
            setExpp((PExpp) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
