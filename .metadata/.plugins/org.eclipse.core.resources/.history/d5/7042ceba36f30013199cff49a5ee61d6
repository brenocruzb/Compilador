/* This file was generated by SableCC (http://www.sablecc.org/). */

package parser;

import lexer.*;
import node.*;
import analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList<Object> listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PTotal node1 = (PTotal) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce ATotal */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list, false);
            }
            break;
            case 1: /* reduce ANormalVariabilidade */
            {
                ArrayList<Object> list = new1();
                push(goTo(1), list, false);
            }
            break;
            case 2: /* reduce AVariabilidade */
            {
                ArrayList<Object> list = new2();
                push(goTo(1), list, false);
            }
            break;
            case 3: /* reduce ASuperDeclaracaoVariavel */
            {
                ArrayList<Object> list = new3();
                push(goTo(2), list, false);
            }
            break;
            case 4: /* reduce AVazioSuperDeclaracaoVariavel */
            {
                ArrayList<Object> list = new4();
                push(goTo(2), list, false);
            }
            break;
            case 5: /* reduce AConjuntoDeclaracaoVariavel */
            {
                ArrayList<Object> list = new5();
                push(goTo(3), list, false);
            }
            break;
            case 6: /* reduce ADeclaracaoVariavel */
            {
                ArrayList<Object> list = new6();
                push(goTo(3), list, false);
            }
            break;
            case 7: /* reduce AEncadeamentoDeclaracaoVariavelVirgula */
            {
                ArrayList<Object> list = new7();
                push(goTo(4), list, false);
            }
            break;
            case 8: /* reduce ADeclaracaoVariavelVirgula */
            {
                ArrayList<Object> list = new8();
                push(goTo(4), list, false);
            }
            break;
            case 9: /* reduce AVariavel */
            {
                ArrayList<Object> list = new9();
                push(goTo(5), list, false);
            }
            break;
            case 10: /* reduce AVetorVariavel */
            {
                ArrayList<Object> list = new10();
                push(goTo(5), list, false);
            }
            break;
            case 11: /* reduce ACorpoPrograma */
            {
                ArrayList<Object> list = new11();
                push(goTo(6), list, false);
            }
            break;
            case 12: /* reduce AVazioCorpoPrograma */
            {
                ArrayList<Object> list = new12();
                push(goTo(6), list, false);
            }
            break;
            case 13: /* reduce ACTipo */
            {
                ArrayList<Object> list = new13();
                push(goTo(7), list, false);
            }
            break;
            case 14: /* reduce AITipo */
            {
                ArrayList<Object> list = new14();
                push(goTo(7), list, false);
            }
            break;
            case 15: /* reduce ATipo */
            {
                ArrayList<Object> list = new15();
                push(goTo(7), list, false);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce ATotal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTotal ptotalNode1;
        {
            // Block
        TPrograma tprogramaNode2;
        TIdentificador tidentificadorNode3;
        TPontovirgula tpontovirgulaNode4;
        TInicio tinicioNode5;
        PSuperDeclaracaoVariavel psuperdeclaracaovariavelNode6;
        PCorpoPrograma pcorpoprogramaNode7;
        TFim tfimNode8;
        TPonto tpontoNode9;
        tprogramaNode2 = (TPrograma)nodeArrayList1.get(0);
        tidentificadorNode3 = (TIdentificador)nodeArrayList2.get(0);
        tpontovirgulaNode4 = (TPontovirgula)nodeArrayList3.get(0);
        tinicioNode5 = (TInicio)nodeArrayList4.get(0);
        psuperdeclaracaovariavelNode6 = (PSuperDeclaracaoVariavel)nodeArrayList5.get(0);
        pcorpoprogramaNode7 = (PCorpoPrograma)nodeArrayList6.get(0);
        tfimNode8 = (TFim)nodeArrayList7.get(0);
        tpontoNode9 = (TPonto)nodeArrayList8.get(0);

        ptotalNode1 = new ATotal(tprogramaNode2, tidentificadorNode3, tpontovirgulaNode4, tinicioNode5, psuperdeclaracaovariavelNode6, pcorpoprogramaNode7, tfimNode8, tpontoNode9);
        }
	nodeList.add(ptotalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce ANormalVariabilidade */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PVariabilidade pvariabilidadeNode1;
        {
            // Block

        pvariabilidadeNode1 = new ANormalVariabilidade();
        }
	nodeList.add(pvariabilidadeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AVariabilidade */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVariabilidade pvariabilidadeNode1;
        {
            // Block
        TConst tconstNode2;
        tconstNode2 = (TConst)nodeArrayList1.get(0);

        pvariabilidadeNode1 = new AVariabilidade(tconstNode2);
        }
	nodeList.add(pvariabilidadeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce ASuperDeclaracaoVariavel */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSuperDeclaracaoVariavel psuperdeclaracaovariavelNode1;
        {
            // Block
        PSuperDeclaracaoVariavel psuperdeclaracaovariavelNode2;
        PDeclaracaoVariavel pdeclaracaovariavelNode3;
        psuperdeclaracaovariavelNode2 = (PSuperDeclaracaoVariavel)nodeArrayList1.get(0);
        pdeclaracaovariavelNode3 = (PDeclaracaoVariavel)nodeArrayList2.get(0);

        psuperdeclaracaovariavelNode1 = new ASuperDeclaracaoVariavel(psuperdeclaracaovariavelNode2, pdeclaracaovariavelNode3);
        }
	nodeList.add(psuperdeclaracaovariavelNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AVazioSuperDeclaracaoVariavel */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PSuperDeclaracaoVariavel psuperdeclaracaovariavelNode1;
        {
            // Block

        psuperdeclaracaovariavelNode1 = new AVazioSuperDeclaracaoVariavel();
        }
	nodeList.add(psuperdeclaracaovariavelNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AConjuntoDeclaracaoVariavel */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaracaoVariavel pdeclaracaovariavelNode1;
        {
            // Block
        PTipo ptipoNode2;
        TDoispontos tdoispontosNode3;
        PDeclaracaoVariavelVirgula pdeclaracaovariavelvirgulaNode4;
        PVariabilidade pvariabilidadeNode5;
        PVariavel pvariavelNode6;
        TPontovirgula tpontovirgulaNode7;
        ptipoNode2 = (PTipo)nodeArrayList1.get(0);
        tdoispontosNode3 = (TDoispontos)nodeArrayList2.get(0);
        pdeclaracaovariavelvirgulaNode4 = (PDeclaracaoVariavelVirgula)nodeArrayList3.get(0);
        pvariabilidadeNode5 = (PVariabilidade)nodeArrayList4.get(0);
        pvariavelNode6 = (PVariavel)nodeArrayList5.get(0);
        tpontovirgulaNode7 = (TPontovirgula)nodeArrayList6.get(0);

        pdeclaracaovariavelNode1 = new AConjuntoDeclaracaoVariavel(ptipoNode2, tdoispontosNode3, pdeclaracaovariavelvirgulaNode4, pvariabilidadeNode5, pvariavelNode6, tpontovirgulaNode7);
        }
	nodeList.add(pdeclaracaovariavelNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce ADeclaracaoVariavel */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaracaoVariavel pdeclaracaovariavelNode1;
        {
            // Block
        PTipo ptipoNode2;
        TDoispontos tdoispontosNode3;
        PVariabilidade pvariabilidadeNode4;
        PVariavel pvariavelNode5;
        TPontovirgula tpontovirgulaNode6;
        ptipoNode2 = (PTipo)nodeArrayList1.get(0);
        tdoispontosNode3 = (TDoispontos)nodeArrayList2.get(0);
        pvariabilidadeNode4 = (PVariabilidade)nodeArrayList3.get(0);
        pvariavelNode5 = (PVariavel)nodeArrayList4.get(0);
        tpontovirgulaNode6 = (TPontovirgula)nodeArrayList5.get(0);

        pdeclaracaovariavelNode1 = new ADeclaracaoVariavel(ptipoNode2, tdoispontosNode3, pvariabilidadeNode4, pvariavelNode5, tpontovirgulaNode6);
        }
	nodeList.add(pdeclaracaovariavelNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce AEncadeamentoDeclaracaoVariavelVirgula */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaracaoVariavelVirgula pdeclaracaovariavelvirgulaNode1;
        {
            // Block
        PDeclaracaoVariavelVirgula pdeclaracaovariavelvirgulaNode2;
        PVariabilidade pvariabilidadeNode3;
        PVariavel pvariavelNode4;
        TVirgula tvirgulaNode5;
        pdeclaracaovariavelvirgulaNode2 = (PDeclaracaoVariavelVirgula)nodeArrayList1.get(0);
        pvariabilidadeNode3 = (PVariabilidade)nodeArrayList2.get(0);
        pvariavelNode4 = (PVariavel)nodeArrayList3.get(0);
        tvirgulaNode5 = (TVirgula)nodeArrayList4.get(0);

        pdeclaracaovariavelvirgulaNode1 = new AEncadeamentoDeclaracaoVariavelVirgula(pdeclaracaovariavelvirgulaNode2, pvariabilidadeNode3, pvariavelNode4, tvirgulaNode5);
        }
	nodeList.add(pdeclaracaovariavelvirgulaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce ADeclaracaoVariavelVirgula */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaracaoVariavelVirgula pdeclaracaovariavelvirgulaNode1;
        {
            // Block
        PVariabilidade pvariabilidadeNode2;
        PVariavel pvariavelNode3;
        TVirgula tvirgulaNode4;
        pvariabilidadeNode2 = (PVariabilidade)nodeArrayList1.get(0);
        pvariavelNode3 = (PVariavel)nodeArrayList2.get(0);
        tvirgulaNode4 = (TVirgula)nodeArrayList3.get(0);

        pdeclaracaovariavelvirgulaNode1 = new ADeclaracaoVariavelVirgula(pvariabilidadeNode2, pvariavelNode3, tvirgulaNode4);
        }
	nodeList.add(pdeclaracaovariavelvirgulaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AVariavel */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVariavel pvariavelNode1;
        {
            // Block
        TIdentificador tidentificadorNode2;
        tidentificadorNode2 = (TIdentificador)nodeArrayList1.get(0);

        pvariavelNode1 = new AVariavel(tidentificadorNode2);
        }
	nodeList.add(pvariavelNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce AVetorVariavel */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVariavel pvariavelNode1;
        {
            // Block
        TIdentificador tidentificadorNode2;
        TAbrecolchete tabrecolcheteNode3;
        TNumero tnumeroNode4;
        TFecharcolchete tfecharcolcheteNode5;
        tidentificadorNode2 = (TIdentificador)nodeArrayList1.get(0);
        tabrecolcheteNode3 = (TAbrecolchete)nodeArrayList2.get(0);
        tnumeroNode4 = (TNumero)nodeArrayList3.get(0);
        tfecharcolcheteNode5 = (TFecharcolchete)nodeArrayList4.get(0);

        pvariavelNode1 = new AVetorVariavel(tidentificadorNode2, tabrecolcheteNode3, tnumeroNode4, tfecharcolcheteNode5);
        }
	nodeList.add(pvariavelNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce ACorpoPrograma */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCorpoPrograma pcorpoprogramaNode1;
        {
            // Block
        PCorpoPrograma pcorpoprogramaNode2;
        TIdentificador tidentificadorNode3;
        pcorpoprogramaNode2 = (PCorpoPrograma)nodeArrayList1.get(0);
        tidentificadorNode3 = (TIdentificador)nodeArrayList2.get(0);

        pcorpoprogramaNode1 = new ACorpoPrograma(pcorpoprogramaNode2, tidentificadorNode3);
        }
	nodeList.add(pcorpoprogramaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce AVazioCorpoPrograma */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PCorpoPrograma pcorpoprogramaNode1;
        {
            // Block

        pcorpoprogramaNode1 = new AVazioCorpoPrograma();
        }
	nodeList.add(pcorpoprogramaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce ACTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipo ptipoNode1;
        {
            // Block
        TCaractere tcaractereNode2;
        tcaractereNode2 = (TCaractere)nodeArrayList1.get(0);

        ptipoNode1 = new ACTipo(tcaractereNode2);
        }
	nodeList.add(ptipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce AITipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipo ptipoNode1;
        {
            // Block
        TInteiro tinteiroNode2;
        tinteiroNode2 = (TInteiro)nodeArrayList1.get(0);

        ptipoNode1 = new AITipo(tinteiroNode2);
        }
	nodeList.add(ptipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce ATipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipo ptipoNode1;
        {
            // Block
        TReal trealNode2;
        trealNode2 = (TReal)nodeArrayList1.get(0);

        ptipoNode1 = new ATipo(trealNode2);
        }
	nodeList.add(ptipoNode1);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {18, SHIFT, 1}, },
			{{-1, ERROR, 1}, {50, SHIFT, 3}, },
			{{-1, ERROR, 2}, {56, ACCEPT, -1}, },
			{{-1, ERROR, 3}, {8, SHIFT, 4}, },
			{{-1, ERROR, 4}, {19, SHIFT, 5}, },
			{{-1, REDUCE, 4}, },
			{{-1, REDUCE, 12}, {4, SHIFT, 7}, {5, SHIFT, 8}, {6, SHIFT, 9}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 15}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 3}, },
			{{-1, ERROR, 11}, {20, SHIFT, 13}, {50, SHIFT, 14}, },
			{{-1, ERROR, 12}, {9, SHIFT, 15}, },
			{{-1, ERROR, 13}, {21, SHIFT, 16}, },
			{{-1, REDUCE, 11}, },
			{{-1, REDUCE, 1}, {17, SHIFT, 17}, },
			{{-1, REDUCE, 0}, },
			{{-1, REDUCE, 2}, },
			{{-1, ERROR, 18}, {50, SHIFT, 20}, },
			{{-1, REDUCE, 1}, {17, SHIFT, 17}, },
			{{-1, REDUCE, 9}, {40, SHIFT, 23}, },
			{{-1, ERROR, 21}, {8, SHIFT, 24}, {46, SHIFT, 25}, },
			{{-1, ERROR, 22}, {50, SHIFT, 20}, },
			{{-1, ERROR, 23}, {49, SHIFT, 27}, },
			{{-1, REDUCE, 6}, },
			{{-1, REDUCE, 8}, },
			{{-1, ERROR, 26}, {8, SHIFT, 28}, {46, SHIFT, 29}, },
			{{-1, ERROR, 27}, {41, SHIFT, 30}, },
			{{-1, REDUCE, 5}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 10}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 18}, {19, 22}, },
			{{-1, 6}, },
			{{-1, 10}, },
			{{-1, 19}, },
			{{-1, 21}, {22, 26}, },
			{{-1, 11}, },
			{{-1, 12}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'programa'",
			"expecting: identificador",
			"expecting: EOF",
			"expecting: ';'",
			"expecting: 'inicio'",
			"expecting: 'caractere', 'real', 'inteiro', 'fim', identificador",
			"expecting: ':'",
			"expecting: 'fim', identificador",
			"expecting: '.'",
			"expecting: 'const', identificador",
			"expecting: ';', '[', ','",
			"expecting: ';', ','",
			"expecting: numero",
			"expecting: ']'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 4, 5, 5, 6, 6, 6, 5, 7, 6, 8, 7, 9, 2, 1, 1, 9, 10, 11, 1, 12, 5, 9, 11, 13, 5, 9, 11, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
