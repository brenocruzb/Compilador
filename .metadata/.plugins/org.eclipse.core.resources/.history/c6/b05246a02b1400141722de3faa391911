/* This file was generated by SableCC (http://www.sablecc.org/). */

package parser;

import lexer.*;
import node.*;
import analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    @SuppressWarnings({"unchecked","unused"})
    private void push(int numstate, ArrayList<Object> listNode) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PTotal node1 = (PTotal) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AAtotal1Total */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list);
            }
            break;
            case 1: /* reduce AAtotal2Total */
            {
                ArrayList<Object> list = new1();
                push(goTo(0), list);
            }
            break;
            case 2: /* reduce AAtotal3Total */
            {
                ArrayList<Object> list = new2();
                push(goTo(0), list);
            }
            break;
            case 3: /* reduce AAtotal4Total */
            {
                ArrayList<Object> list = new3();
                push(goTo(0), list);
            }
            break;
            case 4: /* reduce AAvariaveldeclaracaovariavel1DeclaracaoVariavel */
            {
                ArrayList<Object> list = new4();
                push(goTo(1), list);
            }
            break;
            case 5: /* reduce AAvariaveldeclaracaovariavel2DeclaracaoVariavel */
            {
                ArrayList<Object> list = new5();
                push(goTo(1), list);
            }
            break;
            case 6: /* reduce ADconstanteDeclaracaoVariavel */
            {
                ArrayList<Object> list = new6();
                push(goTo(1), list);
            }
            break;
            case 7: /* reduce ADeclaracaoVariavelVirgula */
            {
                ArrayList<Object> list = new7();
                push(goTo(2), list);
            }
            break;
            case 8: /* reduce ASimplesVariaveld */
            {
                ArrayList<Object> list = new8();
                push(goTo(3), list);
            }
            break;
            case 9: /* reduce AVetorVariaveld */
            {
                ArrayList<Object> list = new9();
                push(goTo(3), list);
            }
            break;
            case 10: /* reduce ACaractereTipo */
            {
                ArrayList<Object> list = new10();
                push(goTo(4), list);
            }
            break;
            case 11: /* reduce AInteiroTipo */
            {
                ArrayList<Object> list = new11();
                push(goTo(4), list);
            }
            break;
            case 12: /* reduce ARealTipo */
            {
                ArrayList<Object> list = new12();
                push(goTo(4), list);
            }
            break;
            case 13: /* reduce AStringValor */
            {
                ArrayList<Object> list = new13();
                push(goTo(5), list);
            }
            break;
            case 14: /* reduce ANumeroValor */
            {
                ArrayList<Object> list = new14();
                push(goTo(5), list);
            }
            break;
            case 15: /* reduce ARealValor */
            {
                ArrayList<Object> list = new15();
                push(goTo(5), list);
            }
            break;
            case 16: /* reduce ANumericoExpr */
            {
                ArrayList<Object> list = new16();
                push(goTo(6), list);
            }
            break;
            case 17: /* reduce ALogicaExpr */
            {
                ArrayList<Object> list = new17();
                push(goTo(6), list);
            }
            break;
            case 18: /* reduce ABaixaExpnum */
            {
                ArrayList<Object> list = new18();
                push(goTo(7), list);
            }
            break;
            case 19: /* reduce ATermExpnum */
            {
                ArrayList<Object> list = new19();
                push(goTo(7), list);
            }
            break;
            case 20: /* reduce AAddSoma */
            {
                ArrayList<Object> list = new20();
                push(goTo(8), list);
            }
            break;
            case 21: /* reduce ASubSoma */
            {
                ArrayList<Object> list = new21();
                push(goTo(8), list);
            }
            break;
            case 22: /* reduce AAltaTermo */
            {
                ArrayList<Object> list = new22();
                push(goTo(9), list);
            }
            break;
            case 23: /* reduce AFatTermo */
            {
                ArrayList<Object> list = new23();
                push(goTo(9), list);
            }
            break;
            case 24: /* reduce AMultMult */
            {
                ArrayList<Object> list = new24();
                push(goTo(10), list);
            }
            break;
            case 25: /* reduce ADivMult */
            {
                ArrayList<Object> list = new25();
                push(goTo(10), list);
            }
            break;
            case 26: /* reduce AInternoFator */
            {
                ArrayList<Object> list = new26();
                push(goTo(11), list);
            }
            break;
            case 27: /* reduce ANegativoFator */
            {
                ArrayList<Object> list = new27();
                push(goTo(11), list);
            }
            break;
            case 28: /* reduce ANumFator */
            {
                ArrayList<Object> list = new28();
                push(goTo(11), list);
            }
            break;
            case 29: /* reduce ARealFator */
            {
                ArrayList<Object> list = new29();
                push(goTo(11), list);
            }
            break;
            case 30: /* reduce AVariavelFator */
            {
                ArrayList<Object> list = new30();
                push(goTo(11), list);
            }
            break;
            case 31: /* reduce AMenorigParabool */
            {
                ArrayList<Object> list = new31();
                push(goTo(12), list);
            }
            break;
            case 32: /* reduce AMaiorigParabool */
            {
                ArrayList<Object> list = new32();
                push(goTo(12), list);
            }
            break;
            case 33: /* reduce AMenorParabool */
            {
                ArrayList<Object> list = new33();
                push(goTo(12), list);
            }
            break;
            case 34: /* reduce AMaiorParabool */
            {
                ArrayList<Object> list = new34();
                push(goTo(12), list);
            }
            break;
            case 35: /* reduce AIgualLcomp */
            {
                ArrayList<Object> list = new35();
                push(goTo(13), list);
            }
            break;
            case 36: /* reduce ADiffLcomp */
            {
                ArrayList<Object> list = new36();
                push(goTo(13), list);
            }
            break;
            case 37: /* reduce ALsoma */
            {
                ArrayList<Object> list = new37();
                push(goTo(14), list);
            }
            break;
            case 38: /* reduce ALmult */
            {
                ArrayList<Object> list = new38();
                push(goTo(15), list);
            }
            break;
            case 39: /* reduce ALxor */
            {
                ArrayList<Object> list = new39();
                push(goTo(16), list);
            }
            break;
            case 40: /* reduce AConjuntoExpLogica */
            {
                ArrayList<Object> list = new40();
                push(goTo(17), list);
            }
            break;
            case 41: /* reduce ADiretoExpLogica */
            {
                ArrayList<Object> list = new41();
                push(goTo(17), list);
            }
            break;
            case 42: /* reduce ARnaoigualfator */
            {
                ArrayList<Object> list = new42();
                push(goTo(18), list);
            }
            break;
            case 43: /* reduce AParentesesNaoigualfator */
            {
                ArrayList<Object> list = new43();
                push(goTo(19), list);
            }
            break;
            case 44: /* reduce AExpNaoigualfator */
            {
                ArrayList<Object> list = new44();
                push(goTo(19), list);
            }
            break;
            case 45: /* reduce ANaoNaoigualfator */
            {
                ArrayList<Object> list = new45();
                push(goTo(19), list);
            }
            break;
            case 46: /* reduce ACadeiaLinicio */
            {
                ArrayList<Object> list = new46();
                push(goTo(20), list);
            }
            break;
            case 47: /* reduce ASimplesLinicio */
            {
                ArrayList<Object> list = new47();
                push(goTo(20), list);
            }
            break;
            case 48: /* reduce ACadeiaLmeio */
            {
                ArrayList<Object> list = new48();
                push(goTo(21), list);
            }
            break;
            case 49: /* reduce ASimplesLmeio */
            {
                ArrayList<Object> list = new49();
                push(goTo(21), list);
            }
            break;
            case 50: /* reduce ACadeiaLtermo */
            {
                ArrayList<Object> list = new50();
                push(goTo(22), list);
            }
            break;
            case 51: /* reduce ASimplesLtermo */
            {
                ArrayList<Object> list = new51();
                push(goTo(22), list);
            }
            break;
            case 52: /* reduce AParentesesLfator */
            {
                ArrayList<Object> list = new52();
                push(goTo(23), list);
            }
            break;
            case 53: /* reduce AExpLfator */
            {
                ArrayList<Object> list = new53();
                push(goTo(23), list);
            }
            break;
            case 54: /* reduce AExpigLfator */
            {
                ArrayList<Object> list = new54();
                push(goTo(23), list);
            }
            break;
            case 55: /* reduce ANaoLfator */
            {
                ArrayList<Object> list = new55();
                push(goTo(23), list);
            }
            break;
            case 56: /* reduce AOutraexp */
            {
                ArrayList<Object> list = new56();
                push(goTo(24), list);
            }
            break;
            case 57: /* reduce AComandoSe */
            {
                ArrayList<Object> list = new57();
                push(goTo(25), list);
            }
            break;
            case 58: /* reduce ASeNaoComandoSe */
            {
                ArrayList<Object> list = new58();
                push(goTo(25), list);
            }
            break;
            case 59: /* reduce AVar */
            {
                ArrayList<Object> list = new59();
                push(goTo(26), list);
            }
            break;
            case 60: /* reduce AVetorVar */
            {
                ArrayList<Object> list = new60();
                push(goTo(26), list);
            }
            break;
            case 61: /* reduce ALeiaComando */
            {
                ArrayList<Object> list = new61();
                push(goTo(27), list);
            }
            break;
            case 62: /* reduce ARepitaComando */
            {
                ArrayList<Object> list = new62();
                push(goTo(27), list);
            }
            break;
            case 63: /* reduce AEnquantoComando */
            {
                ArrayList<Object> list = new63();
                push(goTo(27), list);
            }
            break;
            case 64: /* reduce AAvaliarComando */
            {
                ArrayList<Object> list = new64();
                push(goTo(27), list);
            }
            break;
            case 65: /* reduce AEscritaComando */
            {
                ArrayList<Object> list = new65();
                push(goTo(27), list);
            }
            break;
            case 66: /* reduce ASeComando */
            {
                ArrayList<Object> list = new66();
                push(goTo(27), list);
            }
            break;
            case 67: /* reduce AAtribuicaoComando */
            {
                ArrayList<Object> list = new67();
                push(goTo(27), list);
            }
            break;
            case 68: /* reduce AParaComando */
            {
                ArrayList<Object> list = new68();
                push(goTo(27), list);
            }
            break;
            case 69: /* reduce AComandoRepita */
            {
                ArrayList<Object> list = new69();
                push(goTo(28), list);
            }
            break;
            case 70: /* reduce AComandoEnquanto */
            {
                ArrayList<Object> list = new70();
                push(goTo(29), list);
            }
            break;
            case 71: /* reduce ACasos */
            {
                ArrayList<Object> list = new71();
                push(goTo(30), list);
            }
            break;
            case 72: /* reduce ASenaoAvsenao */
            {
                ArrayList<Object> list = new72();
                push(goTo(31), list);
            }
            break;
            case 73: /* reduce AVazioAvsenao */
            {
                ArrayList<Object> list = new73();
                push(goTo(31), list);
            }
            break;
            case 74: /* reduce AComandoAvalie */
            {
                ArrayList<Object> list = new74();
                push(goTo(32), list);
            }
            break;
            case 75: /* reduce ANumParatipos */
            {
                ArrayList<Object> list = new75();
                push(goTo(33), list);
            }
            break;
            case 76: /* reduce AVarParatipos */
            {
                ArrayList<Object> list = new76();
                push(goTo(33), list);
            }
            break;
            case 77: /* reduce ASempassoComandoPara */
            {
                ArrayList<Object> list = new77();
                push(goTo(34), list);
            }
            break;
            case 78: /* reduce ACompassoComandoPara */
            {
                ArrayList<Object> list = new78();
                push(goTo(34), list);
            }
            break;
            case 79: /* reduce ANormalComandoEscrita */
            {
                ArrayList<Object> list = new79();
                push(goTo(35), list);
            }
            break;
            case 80: /* reduce AStrComandoEscrita */
            {
                ArrayList<Object> list = new80();
                push(goTo(35), list);
            }
            break;
            case 81: /* reduce AComandoLeia */
            {
                ArrayList<Object> list = new81();
                push(goTo(36), list);
            }
            break;
            case 82: /* reduce AComandoAtribuicao */
            {
                ArrayList<Object> list = new82();
                push(goTo(37), list);
            }
            break;
            case 83: /* reduce ATerminal$DeclaracaoVariavel */
            {
                ArrayList<Object> list = new83();
                push(goTo(38), list);
            }
            break;
            case 84: /* reduce ANonTerminal$DeclaracaoVariavel */
            {
                ArrayList<Object> list = new84();
                push(goTo(38), list);
            }
            break;
            case 85: /* reduce ATerminal$Comando */
            {
                ArrayList<Object> list = new85();
                push(goTo(39), list);
            }
            break;
            case 86: /* reduce ANonTerminal$Comando */
            {
                ArrayList<Object> list = new86();
                push(goTo(39), list);
            }
            break;
            case 87: /* reduce ATerminal$DeclaracaoVariavelVirgula */
            {
                ArrayList<Object> list = new87();
                push(goTo(40), list);
            }
            break;
            case 88: /* reduce ANonTerminal$DeclaracaoVariavelVirgula */
            {
                ArrayList<Object> list = new88();
                push(goTo(40), list);
            }
            break;
            case 89: /* reduce ATerminal$Casos */
            {
                ArrayList<Object> list = new89();
                push(goTo(41), list);
            }
            break;
            case 90: /* reduce ANonTerminal$Casos */
            {
                ArrayList<Object> list = new90();
                push(goTo(41), list);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AAtotal1Total */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTotal ptotalNode1;
        {
            // Block
        TIdentificador tidentificadorNode2;
        tidentificadorNode2 = (TIdentificador)nodeArrayList2.get(0);

        ptotalNode1 = new ATotal(tidentificadorNode2);
        }
	nodeList.add(ptotalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AAtotal2Total */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTotal ptotalNode1;
        {
            // Block
        TIdentificador tidentificadorNode2;
        tidentificadorNode2 = (TIdentificador)nodeArrayList2.get(0);

        ptotalNode1 = new ATotal(tidentificadorNode2);
        }
	nodeList.add(ptotalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AAtotal3Total */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTotal ptotalNode1;
        {
            // Block
        TIdentificador tidentificadorNode2;
        tidentificadorNode2 = (TIdentificador)nodeArrayList2.get(0);

        ptotalNode1 = new ATotal(tidentificadorNode2);
        }
	nodeList.add(ptotalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AAtotal4Total */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTotal ptotalNode1;
        {
            // Block
        TIdentificador tidentificadorNode2;
        tidentificadorNode2 = (TIdentificador)nodeArrayList2.get(0);

        ptotalNode1 = new ATotal(tidentificadorNode2);
        }
	nodeList.add(ptotalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AAvariaveldeclaracaovariavel1DeclaracaoVariavel */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AAvariaveldeclaracaovariavel2DeclaracaoVariavel */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce ADconstanteDeclaracaoVariavel */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce ADeclaracaoVariavelVirgula */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce ASimplesVariaveld */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AVetorVariaveld */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce ACaractereTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce AInteiroTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce ARealTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce AStringValor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce ANumeroValor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce ARealValor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce ANumericoExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce ALogicaExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce ABaixaExpnum */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce ATermExpnum */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AAddSoma */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce ASubSoma */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce AAltaTermo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce AFatTermo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce AMultMult */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce ADivMult */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce AInternoFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce ANegativoFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce ANumFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce ARealFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce AVariavelFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce AMenorigParabool */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce AMaiorigParabool */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce AMenorParabool */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce AMaiorParabool */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce AIgualLcomp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce ADiffLcomp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce ALsoma */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce ALmult */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce ALxor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce AConjuntoExpLogica */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce ADiretoExpLogica */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce ARnaoigualfator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce AParentesesNaoigualfator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce AExpNaoigualfator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce ANaoNaoigualfator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce ACadeiaLinicio */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce ASimplesLinicio */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce ACadeiaLmeio */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce ASimplesLmeio */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce ACadeiaLtermo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce ASimplesLtermo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce AParentesesLfator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce AExpLfator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce AExpigLfator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce ANaoLfator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce AOutraexp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce AComandoSe */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new58() /* reduce ASeNaoComandoSe */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new59() /* reduce AVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new60() /* reduce AVetorVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new61() /* reduce ALeiaComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new62() /* reduce ARepitaComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new63() /* reduce AEnquantoComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new64() /* reduce AAvaliarComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new65() /* reduce AEscritaComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new66() /* reduce ASeComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new67() /* reduce AAtribuicaoComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new68() /* reduce AParaComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new69() /* reduce AComandoRepita */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new70() /* reduce AComandoEnquanto */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new71() /* reduce ACasos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new72() /* reduce ASenaoAvsenao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new73() /* reduce AVazioAvsenao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new74() /* reduce AComandoAvalie */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new75() /* reduce ANumParatipos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new76() /* reduce AVarParatipos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new77() /* reduce ASempassoComandoPara */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new78() /* reduce ACompassoComandoPara */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new79() /* reduce ANormalComandoEscrita */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new80() /* reduce AStrComandoEscrita */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new81() /* reduce AComandoLeia */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new82() /* reduce AComandoAtribuicao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new83() /* reduce ATerminal$DeclaracaoVariavel */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new84() /* reduce ANonTerminal$DeclaracaoVariavel */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new85() /* reduce ATerminal$Comando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new86() /* reduce ANonTerminal$Comando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new87() /* reduce ATerminal$DeclaracaoVariavelVirgula */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new88() /* reduce ANonTerminal$DeclaracaoVariavelVirgula */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new89() /* reduce ATerminal$Casos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new90() /* reduce ANonTerminal$Casos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {18, SHIFT, 1}, },
			{{-1, ERROR, 1}, {52, SHIFT, 3}, },
			{{-1, ERROR, 2}, {57, ACCEPT, -1}, },
			{{-1, ERROR, 3}, {8, SHIFT, 4}, },
			{{-1, ERROR, 4}, {19, SHIFT, 5}, },
			{{-1, ERROR, 5}, {4, SHIFT, 6}, {5, SHIFT, 7}, {6, SHIFT, 8}, {17, SHIFT, 9}, {20, SHIFT, 10}, {22, SHIFT, 11}, {23, SHIFT, 12}, {24, SHIFT, 13}, {29, SHIFT, 14}, {30, SHIFT, 15}, {32, SHIFT, 16}, {38, SHIFT, 17}, {52, SHIFT, 18}, },
			{{-1, REDUCE, 10}, },
			{{-1, REDUCE, 12}, },
			{{-1, REDUCE, 11}, },
			{{-1, ERROR, 9}, {52, SHIFT, 33}, },
			{{-1, REDUCE, 0}, },
			{{-1, ERROR, 11}, {48, SHIFT, 34}, },
			{{-1, ERROR, 12}, {48, SHIFT, 35}, },
			{{-1, ERROR, 13}, {48, SHIFT, 36}, },
			{{-1, ERROR, 14}, {22, SHIFT, 11}, {23, SHIFT, 12}, {24, SHIFT, 13}, {29, SHIFT, 14}, {30, SHIFT, 15}, {32, SHIFT, 16}, {38, SHIFT, 17}, {52, SHIFT, 18}, },
			{{-1, ERROR, 15}, {48, SHIFT, 38}, },
			{{-1, ERROR, 16}, {52, SHIFT, 18}, },
			{{-1, ERROR, 17}, {48, SHIFT, 40}, },
			{{-1, REDUCE, 59}, {41, SHIFT, 41}, },
			{{-1, REDUCE, 83}, },
			{{-1, ERROR, 20}, {9, SHIFT, 42}, },
			{{-1, ERROR, 21}, {8, SHIFT, 43}, },
			{{-1, ERROR, 22}, {16, SHIFT, 44}, },
			{{-1, REDUCE, 85}, },
			{{-1, ERROR, 24}, {8, SHIFT, 45}, },
			{{-1, ERROR, 25}, {8, SHIFT, 46}, },
			{{-1, ERROR, 26}, {8, SHIFT, 47}, },
			{{-1, ERROR, 27}, {8, SHIFT, 48}, },
			{{-1, ERROR, 28}, {8, SHIFT, 49}, },
			{{-1, ERROR, 29}, {8, SHIFT, 50}, },
			{{-1, ERROR, 30}, {8, SHIFT, 51}, },
			{{-1, ERROR, 31}, {4, SHIFT, 6}, {5, SHIFT, 7}, {6, SHIFT, 8}, {17, SHIFT, 9}, {20, SHIFT, 52}, {22, SHIFT, 11}, {23, SHIFT, 12}, {24, SHIFT, 13}, {29, SHIFT, 14}, {30, SHIFT, 15}, {32, SHIFT, 16}, {38, SHIFT, 17}, {52, SHIFT, 18}, },
			{{-1, ERROR, 32}, {20, SHIFT, 55}, {22, SHIFT, 11}, {23, SHIFT, 12}, {24, SHIFT, 13}, {29, SHIFT, 14}, {30, SHIFT, 15}, {32, SHIFT, 16}, {38, SHIFT, 17}, {52, SHIFT, 18}, },
			{{-1, ERROR, 33}, {7, SHIFT, 57}, {50, SHIFT, 58}, {51, SHIFT, 59}, },
			{{-1, ERROR, 34}, {1, SHIFT, 61}, {7, SHIFT, 62}, {46, SHIFT, 63}, {48, SHIFT, 64}, {50, SHIFT, 65}, {51, SHIFT, 66}, {52, SHIFT, 18}, },
			{{-1, ERROR, 35}, {52, SHIFT, 18}, },
			{{-1, ERROR, 36}, {1, SHIFT, 61}, {46, SHIFT, 63}, {48, SHIFT, 64}, {50, SHIFT, 65}, {51, SHIFT, 66}, {52, SHIFT, 18}, },
			{{-1, ERROR, 37}, {22, SHIFT, 11}, {23, SHIFT, 12}, {24, SHIFT, 13}, {29, SHIFT, 14}, {30, SHIFT, 15}, {32, SHIFT, 16}, {34, SHIFT, 81}, {38, SHIFT, 17}, {52, SHIFT, 18}, },
			{{-1, ERROR, 38}, {1, SHIFT, 61}, {46, SHIFT, 63}, {48, SHIFT, 64}, {50, SHIFT, 65}, {51, SHIFT, 66}, {52, SHIFT, 18}, },
			{{-1, ERROR, 39}, {33, SHIFT, 83}, },
			{{-1, ERROR, 40}, {1, SHIFT, 61}, {46, SHIFT, 63}, {48, SHIFT, 64}, {50, SHIFT, 65}, {51, SHIFT, 66}, {52, SHIFT, 18}, },
			{{-1, ERROR, 41}, {1, SHIFT, 61}, {48, SHIFT, 85}, {50, SHIFT, 65}, {51, SHIFT, 66}, {52, SHIFT, 18}, },
			{{-1, ERROR, 42}, {52, SHIFT, 87}, },
			{{-1, REDUCE, 66}, },
			{{-1, ERROR, 44}, {1, SHIFT, 61}, {48, SHIFT, 85}, {50, SHIFT, 65}, {51, SHIFT, 66}, {52, SHIFT, 18}, },
			{{-1, REDUCE, 62}, },
			{{-1, REDUCE, 63}, },
			{{-1, REDUCE, 64}, },
			{{-1, REDUCE, 68}, },
			{{-1, REDUCE, 65}, },
			{{-1, REDUCE, 61}, },
			{{-1, REDUCE, 67}, },
			{{-1, REDUCE, 1}, },
			{{-1, REDUCE, 84}, },
			{{-1, ERROR, 54}, {20, SHIFT, 92}, {22, SHIFT, 11}, {23, SHIFT, 12}, {24, SHIFT, 13}, {29, SHIFT, 14}, {30, SHIFT, 15}, {32, SHIFT, 16}, {38, SHIFT, 17}, {52, SHIFT, 18}, },
			{{-1, REDUCE, 2}, },
			{{-1, REDUCE, 86}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 15}, },
			{{-1, ERROR, 60}, {8, SHIFT, 93}, },
			{{-1, ERROR, 61}, {1, SHIFT, 61}, {48, SHIFT, 85}, {50, SHIFT, 65}, {51, SHIFT, 66}, {52, SHIFT, 18}, },
			{{-1, ERROR, 62}, {49, SHIFT, 95}, },
			{{-1, ERROR, 63}, {1, SHIFT, 61}, {46, SHIFT, 96}, {48, SHIFT, 97}, {50, SHIFT, 65}, {51, SHIFT, 66}, {52, SHIFT, 18}, },
			{{-1, ERROR, 64}, {1, SHIFT, 61}, {46, SHIFT, 63}, {48, SHIFT, 64}, {50, SHIFT, 65}, {51, SHIFT, 66}, {52, SHIFT, 18}, },
			{{-1, REDUCE, 28}, },
			{{-1, REDUCE, 29}, },
			{{-1, ERROR, 67}, {49, SHIFT, 102}, },
			{{-1, REDUCE, 16}, {0, SHIFT, 103}, {1, SHIFT, 104}, {10, SHIFT, 105}, {11, SHIFT, 106}, {12, SHIFT, 107}, {13, SHIFT, 108}, {14, SHIFT, 109}, {15, SHIFT, 110}, },
			{{-1, REDUCE, 19}, {2, SHIFT, 114}, {3, SHIFT, 115}, },
			{{-1, REDUCE, 23}, },
			{{-1, REDUCE, 17}, },
			{{-1, ERROR, 72}, {12, SHIFT, 107}, {15, SHIFT, 110}, },
			{{-1, REDUCE, 41}, {44, SHIFT, 118}, },
			{{-1, REDUCE, 47}, {45, SHIFT, 120}, },
			{{-1, REDUCE, 49}, {43, SHIFT, 122}, },
			{{-1, REDUCE, 51}, },
			{{-1, REDUCE, 30}, },
			{{-1, ERROR, 78}, {49, SHIFT, 124}, },
			{{-1, ERROR, 79}, {0, SHIFT, 103}, {1, SHIFT, 104}, {10, SHIFT, 105}, {11, SHIFT, 106}, {12, SHIFT, 107}, {13, SHIFT, 108}, {14, SHIFT, 109}, {15, SHIFT, 110}, },
			{{-1, ERROR, 80}, {49, SHIFT, 125}, },
			{{-1, ERROR, 81}, {48, SHIFT, 126}, },
			{{-1, ERROR, 82}, {49, SHIFT, 127}, },
			{{-1, ERROR, 83}, {50, SHIFT, 128}, {52, SHIFT, 18}, },
			{{-1, ERROR, 84}, {49, SHIFT, 131}, },
			{{-1, ERROR, 85}, {1, SHIFT, 61}, {48, SHIFT, 85}, {50, SHIFT, 65}, {51, SHIFT, 66}, {52, SHIFT, 18}, },
			{{-1, ERROR, 86}, {0, SHIFT, 103}, {1, SHIFT, 104}, {42, SHIFT, 133}, },
			{{-1, REDUCE, 8}, {41, SHIFT, 134}, },
			{{-1, REDUCE, 87}, },
			{{-1, ERROR, 89}, {8, SHIFT, 135}, {47, SHIFT, 136}, },
			{{-1, ERROR, 90}, {52, SHIFT, 87}, },
			{{-1, REDUCE, 82}, {0, SHIFT, 103}, {1, SHIFT, 104}, },
			{{-1, REDUCE, 3}, },
			{{-1, REDUCE, 6}, },
			{{-1, REDUCE, 27}, },
			{{-1, REDUCE, 80}, },
			{{-1, ERROR, 96}, {1, SHIFT, 61}, {46, SHIFT, 96}, {48, SHIFT, 97}, {50, SHIFT, 65}, {51, SHIFT, 66}, {52, SHIFT, 18}, },
			{{-1, ERROR, 97}, {1, SHIFT, 61}, {46, SHIFT, 63}, {48, SHIFT, 64}, {50, SHIFT, 65}, {51, SHIFT, 66}, {52, SHIFT, 18}, },
			{{-1, ERROR, 98}, {0, SHIFT, 103}, {1, SHIFT, 104}, {10, SHIFT, 105}, {11, SHIFT, 106}, {12, SHIFT, 107}, {13, SHIFT, 108}, {14, SHIFT, 109}, {15, SHIFT, 110}, },
			{{-1, REDUCE, 55}, {12, REDUCE, 45}, {15, REDUCE, 45}, },
			{{-1, ERROR, 100}, {0, SHIFT, 103}, {1, SHIFT, 104}, {10, SHIFT, 105}, {11, SHIFT, 106}, {12, SHIFT, 107}, {13, SHIFT, 108}, {14, SHIFT, 109}, {15, SHIFT, 110}, {49, SHIFT, 142}, },
			{{-1, ERROR, 101}, {49, SHIFT, 143}, },
			{{-1, REDUCE, 79}, },
			{{-1, REDUCE, 20}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 34}, },
			{{-1, REDUCE, 33}, },
			{{-1, REDUCE, 35}, },
			{{-1, REDUCE, 32}, },
			{{-1, REDUCE, 31}, },
			{{-1, REDUCE, 36}, },
			{{-1, ERROR, 111}, {1, SHIFT, 61}, {48, SHIFT, 85}, {50, SHIFT, 65}, {51, SHIFT, 66}, {52, SHIFT, 18}, },
			{{-1, ERROR, 112}, {1, SHIFT, 61}, {48, SHIFT, 85}, {50, SHIFT, 65}, {51, SHIFT, 66}, {52, SHIFT, 18}, },
			{{-1, ERROR, 113}, {1, SHIFT, 61}, {48, SHIFT, 85}, {50, SHIFT, 65}, {51, SHIFT, 66}, {52, SHIFT, 18}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 25}, },
			{{-1, ERROR, 116}, {1, SHIFT, 61}, {48, SHIFT, 85}, {50, SHIFT, 65}, {51, SHIFT, 66}, {52, SHIFT, 18}, },
			{{-1, ERROR, 117}, {1, SHIFT, 61}, {46, SHIFT, 149}, {48, SHIFT, 150}, {50, SHIFT, 65}, {51, SHIFT, 66}, {52, SHIFT, 18}, },
			{{-1, REDUCE, 37}, },
			{{-1, ERROR, 119}, {1, SHIFT, 61}, {46, SHIFT, 96}, {48, SHIFT, 97}, {50, SHIFT, 65}, {51, SHIFT, 66}, {52, SHIFT, 18}, },
			{{-1, REDUCE, 39}, },
			{{-1, ERROR, 121}, {1, SHIFT, 61}, {46, SHIFT, 96}, {48, SHIFT, 97}, {50, SHIFT, 65}, {51, SHIFT, 66}, {52, SHIFT, 18}, },
			{{-1, REDUCE, 38}, },
			{{-1, ERROR, 123}, {1, SHIFT, 61}, {46, SHIFT, 96}, {48, SHIFT, 97}, {50, SHIFT, 65}, {51, SHIFT, 66}, {52, SHIFT, 18}, },
			{{-1, REDUCE, 81}, },
			{{-1, ERROR, 125}, {25, SHIFT, 157}, },
			{{-1, ERROR, 126}, {1, SHIFT, 61}, {46, SHIFT, 63}, {48, SHIFT, 64}, {50, SHIFT, 65}, {51, SHIFT, 66}, {52, SHIFT, 18}, },
			{{-1, ERROR, 127}, {35, SHIFT, 159}, },
			{{-1, REDUCE, 75}, },
			{{-1, REDUCE, 76}, },
			{{-1, ERROR, 130}, {34, SHIFT, 160}, {37, SHIFT, 161}, },
			{{-1, ERROR, 131}, {39, SHIFT, 162}, },
			{{-1, ERROR, 132}, {0, SHIFT, 103}, {1, SHIFT, 104}, {49, SHIFT, 142}, },
			{{-1, REDUCE, 60}, },
			{{-1, ERROR, 134}, {50, SHIFT, 165}, },
			{{-1, REDUCE, 4}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 88}, },
			{{-1, ERROR, 138}, {8, SHIFT, 166}, {47, SHIFT, 136}, },
			{{-1, REDUCE, 55}, },
			{{-1, ERROR, 140}, {49, SHIFT, 167}, },
			{{-1, ERROR, 141}, {1, SHIFT, 61}, {48, SHIFT, 85}, {50, SHIFT, 65}, {51, SHIFT, 66}, {52, SHIFT, 18}, },
			{{-1, REDUCE, 26}, },
			{{-1, REDUCE, 52}, {12, REDUCE, 43}, {15, REDUCE, 43}, },
			{{-1, REDUCE, 18}, {2, SHIFT, 114}, {3, SHIFT, 115}, },
			{{-1, REDUCE, 56}, {0, SHIFT, 103}, {1, SHIFT, 104}, },
			{{-1, REDUCE, 53}, {12, REDUCE, 44}, {15, REDUCE, 44}, },
			{{-1, REDUCE, 54}, },
			{{-1, REDUCE, 22}, },
			{{-1, ERROR, 149}, {1, SHIFT, 61}, {46, SHIFT, 96}, {48, SHIFT, 97}, {50, SHIFT, 65}, {51, SHIFT, 66}, {52, SHIFT, 18}, },
			{{-1, ERROR, 150}, {1, SHIFT, 61}, {46, SHIFT, 63}, {48, SHIFT, 64}, {50, SHIFT, 65}, {51, SHIFT, 66}, {52, SHIFT, 18}, },
			{{-1, ERROR, 151}, {0, SHIFT, 103}, {1, SHIFT, 104}, {10, SHIFT, 105}, {11, SHIFT, 106}, {13, SHIFT, 108}, {14, SHIFT, 109}, },
			{{-1, REDUCE, 40}, },
			{{-1, REDUCE, 42}, },
			{{-1, REDUCE, 46}, {45, SHIFT, 120}, },
			{{-1, REDUCE, 48}, {43, SHIFT, 122}, },
			{{-1, REDUCE, 50}, },
			{{-1, ERROR, 157}, {22, SHIFT, 11}, {23, SHIFT, 12}, {24, SHIFT, 13}, {29, SHIFT, 14}, {30, SHIFT, 15}, {32, SHIFT, 16}, {38, SHIFT, 17}, {52, SHIFT, 18}, },
			{{-1, ERROR, 158}, {49, SHIFT, 173}, },
			{{-1, ERROR, 159}, {22, SHIFT, 11}, {23, SHIFT, 12}, {24, SHIFT, 13}, {29, SHIFT, 14}, {30, SHIFT, 15}, {32, SHIFT, 16}, {38, SHIFT, 17}, {52, SHIFT, 18}, },
			{{-1, ERROR, 160}, {50, SHIFT, 128}, {52, SHIFT, 18}, },
			{{-1, ERROR, 161}, {50, SHIFT, 128}, {52, SHIFT, 18}, },
			{{-1, ERROR, 162}, {7, SHIFT, 57}, {50, SHIFT, 58}, {51, SHIFT, 59}, },
			{{-1, REDUCE, 89}, },
			{{-1, REDUCE, 73}, {26, SHIFT, 178}, {39, SHIFT, 162}, },
			{{-1, ERROR, 165}, {42, SHIFT, 181}, },
			{{-1, REDUCE, 5}, },
			{{-1, REDUCE, 52}, },
			{{-1, REDUCE, 53}, },
			{{-1, REDUCE, 45}, },
			{{-1, ERROR, 170}, {49, SHIFT, 182}, },
			{{-1, ERROR, 171}, {1, SHIFT, 61}, {48, SHIFT, 85}, {50, SHIFT, 65}, {51, SHIFT, 66}, {52, SHIFT, 18}, },
			{{-1, ERROR, 172}, {22, SHIFT, 11}, {23, SHIFT, 12}, {24, SHIFT, 13}, {26, SHIFT, 184}, {27, SHIFT, 185}, {29, SHIFT, 14}, {30, SHIFT, 15}, {32, SHIFT, 16}, {38, SHIFT, 17}, {52, SHIFT, 18}, },
			{{-1, REDUCE, 69}, },
			{{-1, ERROR, 174}, {22, SHIFT, 11}, {23, SHIFT, 12}, {24, SHIFT, 13}, {29, SHIFT, 14}, {30, SHIFT, 15}, {31, SHIFT, 186}, {32, SHIFT, 16}, {38, SHIFT, 17}, {52, SHIFT, 18}, },
			{{-1, ERROR, 175}, {35, SHIFT, 187}, },
			{{-1, ERROR, 176}, {34, SHIFT, 188}, },
			{{-1, ERROR, 177}, {9, SHIFT, 189}, },
			{{-1, ERROR, 178}, {9, SHIFT, 190}, },
			{{-1, REDUCE, 90}, },
			{{-1, ERROR, 180}, {40, SHIFT, 191}, },
			{{-1, REDUCE, 9}, },
			{{-1, REDUCE, 43}, },
			{{-1, REDUCE, 44}, },
			{{-1, ERROR, 184}, {22, SHIFT, 11}, {23, SHIFT, 12}, {24, SHIFT, 13}, {29, SHIFT, 14}, {30, SHIFT, 15}, {32, SHIFT, 16}, {38, SHIFT, 17}, {52, SHIFT, 18}, },
			{{-1, REDUCE, 57}, },
			{{-1, REDUCE, 70}, },
			{{-1, ERROR, 187}, {22, SHIFT, 11}, {23, SHIFT, 12}, {24, SHIFT, 13}, {29, SHIFT, 14}, {30, SHIFT, 15}, {32, SHIFT, 16}, {38, SHIFT, 17}, {52, SHIFT, 18}, },
			{{-1, ERROR, 188}, {50, SHIFT, 128}, {52, SHIFT, 18}, },
			{{-1, ERROR, 189}, {22, SHIFT, 11}, {23, SHIFT, 12}, {24, SHIFT, 13}, {29, SHIFT, 14}, {30, SHIFT, 15}, {32, SHIFT, 16}, {38, SHIFT, 17}, {52, SHIFT, 18}, },
			{{-1, ERROR, 190}, {22, SHIFT, 11}, {23, SHIFT, 12}, {24, SHIFT, 13}, {29, SHIFT, 14}, {30, SHIFT, 15}, {32, SHIFT, 16}, {38, SHIFT, 17}, {52, SHIFT, 18}, },
			{{-1, REDUCE, 74}, },
			{{-1, ERROR, 192}, {22, SHIFT, 11}, {23, SHIFT, 12}, {24, SHIFT, 13}, {27, SHIFT, 197}, {29, SHIFT, 14}, {30, SHIFT, 15}, {32, SHIFT, 16}, {38, SHIFT, 17}, {52, SHIFT, 18}, },
			{{-1, ERROR, 193}, {22, SHIFT, 11}, {23, SHIFT, 12}, {24, SHIFT, 13}, {29, SHIFT, 14}, {30, SHIFT, 15}, {32, SHIFT, 16}, {36, SHIFT, 198}, {38, SHIFT, 17}, {52, SHIFT, 18}, },
			{{-1, ERROR, 194}, {35, SHIFT, 199}, },
			{{-1, REDUCE, 71}, {22, SHIFT, 11}, {23, SHIFT, 12}, {24, SHIFT, 13}, {29, SHIFT, 14}, {30, SHIFT, 15}, {32, SHIFT, 16}, {38, SHIFT, 17}, {52, SHIFT, 18}, },
			{{-1, REDUCE, 72}, {22, SHIFT, 11}, {23, SHIFT, 12}, {24, SHIFT, 13}, {29, SHIFT, 14}, {30, SHIFT, 15}, {32, SHIFT, 16}, {38, SHIFT, 17}, {52, SHIFT, 18}, },
			{{-1, REDUCE, 58}, },
			{{-1, REDUCE, 77}, },
			{{-1, ERROR, 199}, {22, SHIFT, 11}, {23, SHIFT, 12}, {24, SHIFT, 13}, {29, SHIFT, 14}, {30, SHIFT, 15}, {32, SHIFT, 16}, {38, SHIFT, 17}, {52, SHIFT, 18}, },
			{{-1, ERROR, 200}, {22, SHIFT, 11}, {23, SHIFT, 12}, {24, SHIFT, 13}, {29, SHIFT, 14}, {30, SHIFT, 15}, {32, SHIFT, 16}, {36, SHIFT, 201}, {38, SHIFT, 17}, {52, SHIFT, 18}, },
			{{-1, REDUCE, 78}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 19}, {31, 53}, },
			{{-1, 88}, {90, 137}, },
			{{-1, 89}, {90, 138}, },
			{{-1, 20}, },
			{{-1, 60}, {162, 177}, },
			{{-1, 67}, {40, 84}, },
			{{-1, 98}, {34, 68}, {36, 79}, {38, 79}, {40, 68}, {41, 86}, {44, 91}, {64, 100}, {85, 132}, {97, 100}, {112, 145}, {113, 145}, {117, 151}, {126, 79}, {141, 145}, {150, 100}, {171, 145}, },
			{{-1, 111}, },
			{{-1, 69}, {111, 144}, },
			{{-1, 116}, },
			{{-1, 70}, {61, 94}, {116, 148}, },
			{{-1, 112}, {98, 141}, {151, 171}, },
			{{-1, 113}, {72, 117}, },
			{{-1, 119}, },
			{{-1, 123}, },
			{{-1, 121}, },
			{{-1, 71}, {36, 80}, {38, 82}, {64, 101}, {97, 140}, {126, 158}, {150, 170}, },
			{{-1, 152}, },
			{{-1, 72}, {117, 153}, },
			{{-1, 73}, },
			{{-1, 74}, {119, 154}, },
			{{-1, 75}, {121, 155}, },
			{{-1, 76}, {63, 99}, {96, 139}, {123, 156}, {149, 169}, },
			{{-1, 146}, {113, 147}, {141, 168}, {171, 183}, },
			{{-1, 21}, },
			{{-1, 77}, {5, 22}, {14, 22}, {16, 39}, {31, 22}, {32, 22}, {35, 78}, {37, 22}, {54, 22}, {83, 129}, {157, 22}, {159, 22}, {160, 129}, {161, 129}, {172, 22}, {174, 22}, {184, 22}, {187, 22}, {188, 129}, {189, 22}, {190, 22}, {192, 22}, {193, 22}, {195, 22}, {196, 22}, {199, 22}, {200, 22}, },
			{{-1, 23}, {32, 56}, {37, 56}, {54, 56}, {172, 56}, {174, 56}, {192, 56}, {193, 56}, {195, 56}, {196, 56}, {200, 56}, },
			{{-1, 24}, },
			{{-1, 25}, },
			{{-1, 163}, {164, 179}, },
			{{-1, 180}, },
			{{-1, 26}, },
			{{-1, 130}, {160, 175}, {161, 176}, {188, 194}, },
			{{-1, 27}, },
			{{-1, 28}, },
			{{-1, 29}, },
			{{-1, 30}, },
			{{-1, 31}, },
			{{-1, 32}, {14, 37}, {31, 54}, {157, 172}, {159, 174}, {184, 192}, {187, 193}, {189, 195}, {190, 196}, {199, 200}, },
			{{-1, 90}, },
			{{-1, 164}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'programa'",
			"expecting: identificador",
			"expecting: EOF",
			"expecting: ';'",
			"expecting: 'inicio'",
			"expecting: 'caractere', 'real', 'inteiro', 'const', 'fim.', 'escreva', 'leia', 'se', 'repita', 'enquanto', 'para', 'avalie', identificador",
			"expecting: ':'",
			"expecting: '('",
			"expecting: 'escreva', 'leia', 'se', 'repita', 'enquanto', 'para', 'avalie', identificador",
			"expecting: '+', '-', '*', '/', ';', '>', '<', '=', '>=', '<=', '<>', '<-', 'de', 'ate', 'faca', 'passo', '[', ']', 'e', 'ou', 'xor', ')'",
			"expecting: '<-'",
			"expecting: 'fim.', 'escreva', 'leia', 'se', 'senao', 'fim se', 'repita', 'enquanto', 'fim enquanto', 'para', 'ate', 'fim para', 'avalie', 'caso', 'fim avalie', identificador",
			"expecting: 'fim.', 'escreva', 'leia', 'se', 'repita', 'enquanto', 'para', 'avalie', identificador",
			"expecting: string, numero, numero real",
			"expecting: '-', string, 'nao', '(', numero, numero real, identificador",
			"expecting: '-', 'nao', '(', numero, numero real, identificador",
			"expecting: 'escreva', 'leia', 'se', 'repita', 'enquanto', 'para', 'ate', 'avalie', identificador",
			"expecting: 'de'",
			"expecting: '-', '(', numero, numero real, identificador",
			"expecting: ';', ':'",
			"expecting: ')'",
			"expecting: '+', '-', '*', '/', ';', '>', '<', '=', '>=', '<=', '<>', ']', 'e', 'ou', 'xor', ')'",
			"expecting: '+', '-', '>', '<', '=', '>=', '<=', '<>', ')'",
			"expecting: '=', '<>'",
			"expecting: 'ou', ')'",
			"expecting: 'ou', 'xor', ')'",
			"expecting: 'e', 'ou', 'xor', ')'",
			"expecting: '+', '-', '>', '<', '=', '>=', '<=', '<>'",
			"expecting: numero, identificador",
			"expecting: '+', '-', ']'",
			"expecting: ';', '[', ','",
			"expecting: ';', ','",
			"expecting: '+', '-', ';'",
			"expecting: '=', '<>', 'e', 'ou', 'xor', ')'",
			"expecting: 'entao'",
			"expecting: 'faca'",
			"expecting: 'ate', 'faca', 'passo'",
			"expecting: 'ate', 'passo'",
			"expecting: 'caso'",
			"expecting: '+', '-', ')'",
			"expecting: '+', '-', '*', '/', ';', '>', '<', '=', '>=', '<=', '<>', '<-', 'de', 'ate', 'faca', 'passo', ']', 'e', 'ou', 'xor', ')'",
			"expecting: numero",
			"expecting: '+', '-', '=', '<>', 'e', 'ou', 'xor', ')'",
			"expecting: '+', '-', '>', '<', '>=', '<='",
			"expecting: 'senao', 'caso', 'fim avalie'",
			"expecting: ']'",
			"expecting: 'escreva', 'leia', 'se', 'senao', 'fim se', 'repita', 'enquanto', 'para', 'avalie', identificador",
			"expecting: 'escreva', 'leia', 'se', 'repita', 'enquanto', 'fim enquanto', 'para', 'avalie', identificador",
			"expecting: 'ate'",
			"expecting: 'fim avalie'",
			"expecting: 'escreva', 'leia', 'se', 'fim se', 'repita', 'enquanto', 'para', 'avalie', identificador",
			"expecting: 'escreva', 'leia', 'se', 'repita', 'enquanto', 'para', 'fim para', 'avalie', identificador",
			"expecting: 'escreva', 'leia', 'se', 'senao', 'repita', 'enquanto', 'para', 'avalie', 'caso', 'fim avalie', identificador",
			"expecting: 'escreva', 'leia', 'se', 'repita', 'enquanto', 'para', 'avalie', 'fim avalie', identificador",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 4, 5, 6, 6, 6, 1, 2, 7, 7, 7, 8, 7, 1, 7, 9, 5, 6, 3, 10, 11, 3, 3, 3, 3, 3, 3, 3, 5, 12, 13, 14, 1, 15, 16, 15, 17, 15, 18, 1, 11, 18, 11, 11, 11, 11, 11, 11, 11, 2, 5, 12, 2, 11, 19, 19, 19, 3, 18, 20, 15, 15, 21, 21, 20, 22, 21, 21, 20, 23, 24, 25, 26, 26, 21, 20, 27, 20, 7, 20, 28, 20, 18, 29, 30, 1, 31, 1, 32, 2, 5, 21, 3, 15, 15, 27, 33, 22, 20, 3, 18, 18, 18, 18, 15, 18, 18, 15, 18, 18, 18, 18, 18, 18, 15, 15, 15, 15, 15, 15, 15, 3, 34, 15, 35, 36, 36, 37, 38, 39, 40, 41, 5, 1, 1, 31, 33, 20, 18, 21, 33, 21, 42, 33, 33, 21, 15, 15, 43, 20, 20, 25, 26, 26, 8, 20, 8, 28, 28, 13, 44, 44, 45, 5, 33, 33, 20, 20, 18, 46, 3, 47, 35, 48, 6, 6, 44, 49, 31, 20, 20, 8, 3, 3, 8, 28, 8, 8, 3, 50, 51, 35, 52, 53, 3, 3, 8, 51, 3, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
