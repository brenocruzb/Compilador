/* This file was generated by SableCC (http://www.sablecc.org/). */

package analysis;

import java.util.*;
import node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPTotal().apply(this);
        outStart(node);
    }

    public void inATotal(ATotal node)
    {
        defaultIn(node);
    }

    public void outATotal(ATotal node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATotal(ATotal node)
    {
        inATotal(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        {
            List<PDeclaracaoVariavel> copy = new ArrayList<PDeclaracaoVariavel>(node.getDeclaracaoVariavel());
            Collections.reverse(copy);
            for(PDeclaracaoVariavel e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        outATotal(node);
    }

    public void inAVariavelDeclaracaoVariavel(AVariavelDeclaracaoVariavel node)
    {
        defaultIn(node);
    }

    public void outAVariavelDeclaracaoVariavel(AVariavelDeclaracaoVariavel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariavelDeclaracaoVariavel(AVariavelDeclaracaoVariavel node)
    {
        inAVariavelDeclaracaoVariavel(node);
        if(node.getSegundo() != null)
        {
            node.getSegundo().apply(this);
        }
        {
            List<PVariaveld> copy = new ArrayList<PVariaveld>(node.getPrimeiro());
            Collections.reverse(copy);
            for(PVariaveld e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        outAVariavelDeclaracaoVariavel(node);
    }

    public void inADconstanteDeclaracaoVariavel(ADconstanteDeclaracaoVariavel node)
    {
        defaultIn(node);
    }

    public void outADconstanteDeclaracaoVariavel(ADconstanteDeclaracaoVariavel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADconstanteDeclaracaoVariavel(ADconstanteDeclaracaoVariavel node)
    {
        inADconstanteDeclaracaoVariavel(node);
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        outADconstanteDeclaracaoVariavel(node);
    }

    public void inASimplesVariaveld(ASimplesVariaveld node)
    {
        defaultIn(node);
    }

    public void outASimplesVariaveld(ASimplesVariaveld node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimplesVariaveld(ASimplesVariaveld node)
    {
        inASimplesVariaveld(node);
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        outASimplesVariaveld(node);
    }

    public void inAVetorVariaveld(AVetorVariaveld node)
    {
        defaultIn(node);
    }

    public void outAVetorVariaveld(AVetorVariaveld node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVetorVariaveld(AVetorVariaveld node)
    {
        inAVetorVariaveld(node);
        if(node.getNumero() != null)
        {
            node.getNumero().apply(this);
        }
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        outAVetorVariaveld(node);
    }

    public void inACaractereTipo(ACaractereTipo node)
    {
        defaultIn(node);
    }

    public void outACaractereTipo(ACaractereTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACaractereTipo(ACaractereTipo node)
    {
        inACaractereTipo(node);
        if(node.getCaractere() != null)
        {
            node.getCaractere().apply(this);
        }
        outACaractereTipo(node);
    }

    public void inAInteiroTipo(AInteiroTipo node)
    {
        defaultIn(node);
    }

    public void outAInteiroTipo(AInteiroTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInteiroTipo(AInteiroTipo node)
    {
        inAInteiroTipo(node);
        if(node.getInteiro() != null)
        {
            node.getInteiro().apply(this);
        }
        outAInteiroTipo(node);
    }

    public void inARealTipo(ARealTipo node)
    {
        defaultIn(node);
    }

    public void outARealTipo(ARealTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARealTipo(ARealTipo node)
    {
        inARealTipo(node);
        if(node.getReal() != null)
        {
            node.getReal().apply(this);
        }
        outARealTipo(node);
    }

    public void inAStringValor(AStringValor node)
    {
        defaultIn(node);
    }

    public void outAStringValor(AStringValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringValor(AStringValor node)
    {
        inAStringValor(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outAStringValor(node);
    }

    public void inANumeroValor(ANumeroValor node)
    {
        defaultIn(node);
    }

    public void outANumeroValor(ANumeroValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumeroValor(ANumeroValor node)
    {
        inANumeroValor(node);
        if(node.getNumero() != null)
        {
            node.getNumero().apply(this);
        }
        outANumeroValor(node);
    }

    public void inARealValor(ARealValor node)
    {
        defaultIn(node);
    }

    public void outARealValor(ARealValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARealValor(ARealValor node)
    {
        inARealValor(node);
        if(node.getNumeroReal() != null)
        {
            node.getNumeroReal().apply(this);
        }
        outARealValor(node);
    }

    public void inAOperacaoExpr(AOperacaoExpr node)
    {
        defaultIn(node);
    }

    public void outAOperacaoExpr(AOperacaoExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOperacaoExpr(AOperacaoExpr node)
    {
        inAOperacaoExpr(node);
        if(node.getSegundo() != null)
        {
            node.getSegundo().apply(this);
        }
        if(node.getOperacao() != null)
        {
            node.getOperacao().apply(this);
        }
        if(node.getPrimeiro() != null)
        {
            node.getPrimeiro().apply(this);
        }
        outAOperacaoExpr(node);
    }

    public void inANegativoExpr(ANegativoExpr node)
    {
        defaultIn(node);
    }

    public void outANegativoExpr(ANegativoExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANegativoExpr(ANegativoExpr node)
    {
        inANegativoExpr(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getSubtracao() != null)
        {
            node.getSubtracao().apply(this);
        }
        outANegativoExpr(node);
    }

    public void inAInternoExpr(AInternoExpr node)
    {
        defaultIn(node);
    }

    public void outAInternoExpr(AInternoExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInternoExpr(AInternoExpr node)
    {
        inAInternoExpr(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAInternoExpr(node);
    }

    public void inANumeroExpr(ANumeroExpr node)
    {
        defaultIn(node);
    }

    public void outANumeroExpr(ANumeroExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumeroExpr(ANumeroExpr node)
    {
        inANumeroExpr(node);
        if(node.getNumero() != null)
        {
            node.getNumero().apply(this);
        }
        outANumeroExpr(node);
    }

    public void inARealExpr(ARealExpr node)
    {
        defaultIn(node);
    }

    public void outARealExpr(ARealExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARealExpr(ARealExpr node)
    {
        inARealExpr(node);
        if(node.getNumeroReal() != null)
        {
            node.getNumeroReal().apply(this);
        }
        outARealExpr(node);
    }

    public void inAVariavelExpr(AVariavelExpr node)
    {
        defaultIn(node);
    }

    public void outAVariavelExpr(AVariavelExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariavelExpr(AVariavelExpr node)
    {
        inAVariavelExpr(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outAVariavelExpr(node);
    }

    public void inAAddOperacao(AAddOperacao node)
    {
        defaultIn(node);
    }

    public void outAAddOperacao(AAddOperacao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAddOperacao(AAddOperacao node)
    {
        inAAddOperacao(node);
        if(node.getAdicao() != null)
        {
            node.getAdicao().apply(this);
        }
        outAAddOperacao(node);
    }

    public void inASubOperacao(ASubOperacao node)
    {
        defaultIn(node);
    }

    public void outASubOperacao(ASubOperacao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASubOperacao(ASubOperacao node)
    {
        inASubOperacao(node);
        if(node.getSubtracao() != null)
        {
            node.getSubtracao().apply(this);
        }
        outASubOperacao(node);
    }

    public void inAMultOperacao(AMultOperacao node)
    {
        defaultIn(node);
    }

    public void outAMultOperacao(AMultOperacao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultOperacao(AMultOperacao node)
    {
        inAMultOperacao(node);
        if(node.getMultiplicacao() != null)
        {
            node.getMultiplicacao().apply(this);
        }
        outAMultOperacao(node);
    }

    public void inADivOperacao(ADivOperacao node)
    {
        defaultIn(node);
    }

    public void outADivOperacao(ADivOperacao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivOperacao(ADivOperacao node)
    {
        inADivOperacao(node);
        if(node.getDivisao() != null)
        {
            node.getDivisao().apply(this);
        }
        outADivOperacao(node);
    }

    public void inAIdVar(AIdVar node)
    {
        defaultIn(node);
    }

    public void outAIdVar(AIdVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdVar(AIdVar node)
    {
        inAIdVar(node);
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        outAIdVar(node);
    }

    public void inAVetorVar(AVetorVar node)
    {
        defaultIn(node);
    }

    public void outAVetorVar(AVetorVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVetorVar(AVetorVar node)
    {
        inAVetorVar(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        outAVetorVar(node);
    }
}
